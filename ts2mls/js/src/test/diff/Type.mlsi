export declare module Type {
  declare trait None {
    val _tag: "None"
  }
  declare trait Some<A> {
    val _tag: "Some"
    val value: A
  }
  type Option<A> = (None) | (Some<A>)
  type Func = (number) => number
  type S2 = (string, string, )
  declare trait I1 {}
  declare trait I2 {}
  type I3 = (I1) & (I2)
  type StringArray = Array<string>
  type SomeInterface = {x: number,y: number,}
  declare class ABC {}
  type DEF = ABC
  type TP<A, B, C> = (A, B, C, )
  module NA {
    fun fb(b: string): unit
    export type B = string
  }
  declare class NC {
    val b: string
  }
  type G = ABC
  val none: {_tag: "None",}
  fun some<A>(a: A): (None) | (Some<A>)
}
