:NewParser
:ParseOnly
let f: (number => string) & (string => string)
class M {
  let foo: (number => string) & (string => string)
}
let app: ((string => unit) => number => unit) & ((string => unit) => string => unit)
let create: (number => unit => bool) & (bool => unit => bool)
let g0: (MutArray<string> => string) & (MutArray<object> => string)
let db: (number => MutArray<number>) & (object => MutArray<number>)
class N {}
let id: (M => unit) & (N => unit)
let tst: ((z: number,) => (y: string,)) & ((z: bool,) => (y: string,))
let op: (number => (number) | (undefined) => unit) & (number => (bool) | (undefined) => unit)
let swap: ((number, string, ) => (number, string, )) & ((string, number, ) => (number, string, ))
let u: ((number) | (bool) => string) & (object => string)
let doSome: anything => unit /* warning: the overload of function doSome is not supported yet. */
namespace XX {
  let f: T => anything => string /* warning: the overload of function f is not supported yet. */
}
class WWW {
  let F: T => anything /* warning: the overload of function F is not supported yet. */
}
let baz: unit => anything /* warning: the overload of function baz is not supported yet. */
//│ |#let| |f|#:| |(|number| |=>| |string|)| |&| |(|string| |=>| |string|)|↵|#class| |M| |{|→|#let| |foo|#:| |(|number| |=>| |string|)| |&| |(|string| |=>| |string|)|←|↵|}|↵|#let| |app|#:| |(|(|string| |=>| |unit|)| |=>| |number| |=>| |unit|)| |&| |(|(|string| |=>| |unit|)| |=>| |string| |=>| |unit|)|↵|#let| |create|#:| |(|number| |=>| |unit| |=>| |bool|)| |&| |(|bool| |=>| |unit| |=>| |bool|)|↵|#let| |g0|#:| |(|MutArray|‹|string|›| |=>| |string|)| |&| |(|MutArray|‹|object|›| |=>| |string|)|↵|#let| |db|#:| |(|number| |=>| |MutArray|‹|number|›|)| |&| |(|object| |=>| |MutArray|‹|number|›|)|↵|#class| |N| |{||}|↵|#let| |id|#:| |(|M| |=>| |unit|)| |&| |(|N| |=>| |unit|)|↵|#let| |tst|#:| |(|(|z|#:| |number|,|)| |=>| |(|y|#:| |string|,|)|)| |&| |(|(|z|#:| |bool|,|)| |=>| |(|y|#:| |string|,|)|)|↵|#let| |op|#:| |(|number| |=>| |(|number|)| ||| |(|undefined|)| |=>| |unit|)| |&| |(|number| |=>| |(|bool|)| ||| |(|undefined|)| |=>| |unit|)|↵|#let| |swap|#:| |(|(|number|,| |string|,| |)| |=>| |(|number|,| |string|,| |)|)| |&| |(|(|string|,| |number|,| |)| |=>| |(|number|,| |string|,| |)|)|↵|#let| |u|#:| |(|(|number|)| ||| |(|bool|)| |=>| |string|)| |&| |(|object| |=>| |string|)|↵|#let| |doSome|#:| |anything| |=>| |unit| |/* warning: the overload of function doSome is not supported yet. */|↵|#namespace| |XX| |{|→|#let| |f|#:| |T| |=>| |anything| |=>| |string| |/* warning: the overload of function f is not supported yet. */|←|↵|}|↵|#class| |WWW| |{|→|#let| |F|#:| |T| |=>| |anything| |/* warning: the overload of function F is not supported yet. */|←|↵|}|↵|#let| |baz|#:| |unit| |=>| |anything| |/* warning: the overload of function baz is not supported yet. */|
//│ Parsed: {fun f: [] -> (number -> string,) & (string -> string,); class M() {fun foo: [] -> (number -> string,) & (string -> string,)}; fun app: [] -> ((string -> unit) -> number -> unit,) & ((string -> unit) -> string -> unit,); fun create: [] -> (number -> unit -> bool,) & (bool -> unit -> bool,); fun g0: [] -> (MutArray[string] -> string,) & (MutArray[object] -> string,); fun db: [] -> (number -> MutArray[number],) & (object -> MutArray[number],); class N() {}; fun id: [] -> (M -> unit,) & (N -> unit,); fun tst: [] -> ((z: number,) -> (y: string,),) & ((z: bool,) -> (y: string,),); fun op: [] -> (number -> ((number,) | (undefined,)) -> unit,) & (number -> ((bool,) | (undefined,)) -> unit,); fun swap: [] -> ((number, string,) -> (number, string,),) & ((string, number,) -> (number, string,),); fun u: [] -> (((number,) | (bool,)) -> string,) & (object -> string,); fun doSome: [] -> anything -> unit; namespace XX(): {fun f: [] -> T -> anything -> string}; class WWW() {fun F: [] -> T -> anything}; fun baz: [] -> unit -> anything}
