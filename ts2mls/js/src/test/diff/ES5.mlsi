val NaN: Num
val Infinity: Num
fun eval(x: Str): anything
fun parseInt(string: Str, radix: (Num) | (undefined)): Num
fun parseFloat(string: Str): Num
fun isNaN(number: Num): (false) | (true)
fun isFinite(number: Num): (false) | (true)
fun decodeURI(encodedURI: Str): Str
fun decodeURIComponent(encodedURIComponent: Str): Str
fun encodeURI(uri: Str): Str
fun encodeURIComponent(uriComponent: (((Str) | (Num)) | (false)) | (true)): Str
fun escape(string: Str): Str
fun unescape(string: Str): Str
declare trait Symbol {
  fun toString(): Str
  fun valueOf(): Symbol
}
type PropertyKey = ((Str) | (Num)) | (Symbol)
declare trait PropertyDescriptor {
  val configurable: ((false) | (true)) | (undefined)
  val set: ((v: anything) => unit) | (undefined)
  val enumerable: ((false) | (true)) | (undefined)
  val get: (() => anything) | (undefined)
  val writable: ((false) | (true)) | (undefined)
  val value: (anything) | (undefined)
}
declare trait Function {
  fun bind(thisArg: anything, argArray: (anything) | (MutArray[anything])): anything
  fun apply(thisArg: anything, argArray: (anything) | (undefined)): anything
  val prototype: anything
  fun call(thisArg: anything, argArray: (anything) | (MutArray[anything])): anything
  fun toString(): Str
  val length: Num
  val caller: Function
  val arguments: anything
}
declare trait Boolean {
  fun valueOf(): (false) | (true)
}
declare trait Math {
  fun random(): Num
  fun asin(x: Num): Num
  val LOG2E: Num
  fun min(values: (Num) | (MutArray[Num])): Num
  fun cos(x: Num): Num
  val LOG10E: Num
  val PI: Num
  fun floor(x: Num): Num
  val SQRT2: Num
  fun round(x: Num): Num
  fun sin(x: Num): Num
  val E: Num
  val LN10: Num
  fun exp(x: Num): Num
  val LN2: Num
  fun atan(x: Num): Num
  fun pow(x: Num, y: Num): Num
  fun ceil(x: Num): Num
  fun max(values: (Num) | (MutArray[Num])): Num
  fun atan2(y: Num, x: Num): Num
  fun sqrt(x: Num): Num
  fun tan(x: Num): Num
  val SQRT1_2: Num
  fun abs(x: Num): Num
  fun log(x: Num): Num
  fun acos(x: Num): Num
}
declare trait Date {
  fun getUTCMonth(): Num
  fun valueOf(): Num
  fun getUTCMinutes(): Num
  fun setMilliseconds(ms: Num): Num
  fun toLocaleString(): Str
  fun getDate(): Num
  fun getUTCDate(): Num
  fun setDate(date: Num): Num
  fun setFullYear(year: Num, month: (Num) | (undefined), date: (Num) | (undefined)): Num
  fun getMinutes(): Num
  fun getFullYear(): Num
  fun setUTCDate(date: Num): Num
  fun setMinutes(min: Num, sec: (Num) | (undefined), ms: (Num) | (undefined)): Num
  fun setTime(time: Num): Num
  fun toUTCString(): Str
  fun toLocaleDateString(): Str
  fun setUTCMonth(month: Num, date: (Num) | (undefined)): Num
  fun setUTCFullYear(year: Num, month: (Num) | (undefined), date: (Num) | (undefined)): Num
  fun setHours(hours: Num, min: (Num) | (undefined), sec: (Num) | (undefined), ms: (Num) | (undefined)): Num
  fun getTime(): Num
  fun setSeconds(sec: Num, ms: (Num) | (undefined)): Num
  fun setUTCSeconds(sec: Num, ms: (Num) | (undefined)): Num
  fun getUTCFullYear(): Num
  fun getUTCHours(): Num
  fun getUTCDay(): Num
  fun setUTCMinutes(min: Num, sec: (Num) | (undefined), ms: (Num) | (undefined)): Num
  fun getHours(): Num
  fun toISOString(): Str
  fun toTimeString(): Str
  fun setUTCMilliseconds(ms: Num): Num
  fun getUTCSeconds(): Num
  fun getMilliseconds(): Num
  fun setMonth(month: Num, date: (Num) | (undefined)): Num
  fun getDay(): Num
  fun toLocaleTimeString(): Str
  fun getSeconds(): Num
  fun getUTCMilliseconds(): Num
  fun toDateString(): Str
  fun toString(): Str
  fun getMonth(): Num
  fun getTimezoneOffset(): Num
  fun setUTCHours(hours: Num, min: (Num) | (undefined), sec: (Num) | (undefined), ms: (Num) | (undefined)): Num
  fun toJSON(key: (anything) | (undefined)): Str
}
