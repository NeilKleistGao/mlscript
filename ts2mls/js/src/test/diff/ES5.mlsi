:NewParser
:ParseOnly
let NaN: number
let Infinity: number
fun eval(x: string): anything
fun parseInt(string: string, radix: (number) | (undefined)): number
fun parseFloat(string: string): number
fun isNaN(number: number): (false) | (true)
fun isFinite(number: number): (false) | (true)
fun decodeURI(encodedURI: string): string
fun decodeURIComponent(encodedURIComponent: string): string
fun encodeURI(uri: string): string
fun encodeURIComponent(uriComponent: (((string) | (number)) | (false)) | (true)): string
fun escape(string: string): string
fun unescape(string: string): string
trait Symbol() {
  fun toString(): string
  fun valueOf(): Symbol
}
type PropertyKey = ((string) | (number)) | (Symbol)
trait PropertyDescriptor() {
  let configurable: ((false) | (true)) | (undefined)
  let set: ((anything) => unit) | (undefined)
  let enumerable: ((false) | (true)) | (undefined)
  let get: (unit => anything) | (undefined)
  let writable: ((false) | (true)) | (undefined)
  let value: (anything) | (undefined)
}
trait PropertyDescriptorMap() {
  fun __index(key: ((string) | (number)) | (Symbol)): PropertyDescriptor
}
trait Object() {
  fun hasOwnProperty(v: ((string) | (number)) | (Symbol)): (false) | (true)
  fun propertyIsEnumerable(v: ((string) | (number)) | (Symbol)): (false) | (true)
  fun valueOf(): Object
  fun toLocaleString(): string
  let constructor: Function
  fun isPrototypeOf(v: Object): (false) | (true)
  fun toString(): string
}
let Function: FunctionConstructor
trait FunctionConstructor() {
  fun __new(args: MutArray<string>): Function
  fun __call(args: MutArray<string>): Function
  let prototype: Function
}
type ThisParameterType<T> = Unsupported["T extends (this: infer U, ...args: never) => any ? U : unknown", "ts2mls/js/src/test/typescript/ES5.d.ts", 306, 27]
type OmitThisParameter<T> = Unsupported["unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T", "ts2mls/js/src/test/typescript/ES5.d.ts", 311, 27]
trait IArguments() {
  fun __index(index: number): anything
  let length: number
  let callee: Function
}
trait String() {
  fun localeCompare(that: string, locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.CollatorOptions) | (undefined)): number
}
trait StringConstructor() {
  fun __new(value: (anything) | (undefined)): String
  fun __call(value: (anything) | (undefined)): string
  let prototype: String
  fun fromCharCode(codes: MutArray<number>): string
}
let Boolean: BooleanConstructor
trait BooleanConstructor() {
  fun __new(value: (anything) | (undefined)): Boolean
  fun __call<T>(value: (T) | (undefined)): (false) | (true)
  let prototype: Boolean
}
trait Number() {
  fun toLocaleString(locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.NumberFormatOptions) | (undefined)): string
}
trait NumberConstructor() {
  fun __call(value: (anything) | (undefined)): number
  let NaN: number
  let MIN_VALUE: number
  fun __new(value: (anything) | (undefined)): Number
  let NEGATIVE_INFINITY: number
  let POSITIVE_INFINITY: number
  let MAX_VALUE: number
  let prototype: Number
}
trait TemplateStringsArray(): ReadonlyArray<string> {
  let raw: ReadonlyArray<string>
}
trait ImportMeta() {}
trait ImportCallOptions() {
  let assert: (ImportAssertions) | (undefined)
}
trait ImportAssertions() {
  fun __index(key: string): string
}
let Math: Math
trait Date() {
  fun toLocaleString(locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.DateTimeFormatOptions) | (undefined)): string
  fun toLocaleDateString(locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.DateTimeFormatOptions) | (undefined)): string
  fun toLocaleTimeString(locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.DateTimeFormatOptions) | (undefined)): string
}
trait DateConstructor() {
  fun __call(): string
  fun UTC(year: number, monthIndex: number, date: (number) | (undefined), hours: (number) | (undefined), minutes: (number) | (undefined), seconds: (number) | (undefined), ms: (number) | (undefined)): number
  fun __new(year: number, monthIndex: number, date: (number) | (undefined), hours: (number) | (undefined), minutes: (number) | (undefined), seconds: (number) | (undefined), ms: (number) | (undefined)): Date
  fun now(): number
  fun parse(s: string): number
  let prototype: Date
}
let RegExp: RegExpConstructor
let Error: ErrorConstructor
trait ErrorConstructor() {
  fun __new(message: (string) | (undefined)): Error
  fun __call(message: (string) | (undefined)): Error
  let prototype: Error
}
let EvalError: EvalErrorConstructor
trait EvalErrorConstructor(): ErrorConstructor {
  fun __new(message: (string) | (undefined)): EvalError
  fun __call(message: (string) | (undefined)): EvalError
  let prototype: EvalError
}
let RangeError: RangeErrorConstructor
trait RangeErrorConstructor(): ErrorConstructor {
  fun __new(message: (string) | (undefined)): RangeError
  fun __call(message: (string) | (undefined)): RangeError
  let prototype: RangeError
}
let ReferenceError: ReferenceErrorConstructor
trait ReferenceErrorConstructor(): ErrorConstructor {
  fun __new(message: (string) | (undefined)): ReferenceError
  fun __call(message: (string) | (undefined)): ReferenceError
  let prototype: ReferenceError
}
let SyntaxError: SyntaxErrorConstructor
trait SyntaxErrorConstructor(): ErrorConstructor {
  fun __new(message: (string) | (undefined)): SyntaxError
  fun __call(message: (string) | (undefined)): SyntaxError
  let prototype: SyntaxError
}
let TypeError: TypeErrorConstructor
trait TypeErrorConstructor(): ErrorConstructor {
  fun __new(message: (string) | (undefined)): TypeError
  fun __call(message: (string) | (undefined)): TypeError
  let prototype: TypeError
}
let URIError: URIErrorConstructor
trait URIErrorConstructor(): ErrorConstructor {
  fun __new(message: (string) | (undefined)): URIError
  fun __call(message: (string) | (undefined)): URIError
  let prototype: URIError
}
let JSON: JSON
trait ReadonlyArray<T>() {
  fun lastIndexOf(searchElement: T, fromIndex: (number) | (undefined)): number
  fun every(predicate: (T) => (number) => (ReadonlyArray<T>) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun forEach(callbackfn: (T) => (number) => (ReadonlyArray<T>) => unit, thisArg: (anything) | (undefined)): unit
  fun filter(predicate: (T) => (number) => (ReadonlyArray<T>) => anything, thisArg: (anything) | (undefined)): MutArray<T>
  fun __index(n: number): T
  fun reduceRight<U>(callbackfn: (U) => (T) => (number) => (ReadonlyArray<T>) => U, initialValue: U): U
  fun join(separator: (string) | (undefined)): string
  fun map<U>(callbackfn: (T) => (number) => (ReadonlyArray<T>) => U, thisArg: (anything) | (undefined)): MutArray<U>
  fun concat(items: MutArray<(T) | (ConcatArray<T>)>): MutArray<T>
  fun toLocaleString(): string
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): MutArray<T>
  fun reduce<U>(callbackfn: (U) => (T) => (number) => (ReadonlyArray<T>) => U, initialValue: U): U
  fun toString(): string
  let length: number
  fun some(predicate: (T) => (number) => (ReadonlyArray<T>) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun indexOf(searchElement: T, fromIndex: (number) | (undefined)): number
}
trait ConcatArray<T>() {
  let length: number
  fun __index(n: number): T
  fun join(separator: (string) | (undefined)): string
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): MutArray<T>
}
let Array: ArrayConstructor
trait ArrayConstructor() {
  fun __new<T>(items: MutArray<T>): MutArray<T>
  fun __call<T>(items: MutArray<T>): MutArray<T>
  fun isArray(arg: anything): (false) | (true)
  let prototype: MutArray<anything>
}
trait TypedPropertyDescriptor<T>() {
  let configurable: ((false) | (true)) | (undefined)
  let set: ((T) => unit) | (undefined)
  let enumerable: ((false) | (true)) | (undefined)
  let get: (unit => T) | (undefined)
  let writable: ((false) | (true)) | (undefined)
  let value: (T) | (undefined)
}
type PromiseConstructorLike = ((((T) | (PromiseLike<T>)) => unit) => (((anything) | (undefined)) => unit) => unit) => PromiseLike<T>
trait ThisType<T>() {}
let ArrayBuffer: ArrayBufferConstructor
trait ArrayBufferTypes() {
  let ArrayBuffer: ArrayBuffer
}
type ArrayBufferLike = ArrayBuffer
trait ArrayBufferConstructor() {
  let prototype: ArrayBuffer
  fun __new(byteLength: number): ArrayBuffer
  fun isView(arg: anything): (false) | (true)
}
trait ArrayBufferView() {
  let buffer: ArrayBuffer
  let byteLength: number
  let byteOffset: number
}
let DataView: DataViewConstructor
trait DataViewConstructor() {
  let prototype: DataView
  fun __new(buffer: ArrayBuffer, byteOffset: (number) | (undefined), byteLength: (number) | (undefined)): DataView
}
trait Int8Array() {
  fun valueOf(): Int8Array
  fun lastIndexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  fun every(predicate: (number) => (number) => (Int8Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun set(array: ArrayLike<number>, offset: (number) | (undefined)): unit
  fun toLocaleString(): string
  fun __index(index: number): number
  fun reduceRight<U>(callbackfn: (U) => (number) => (number) => (Int8Array) => U, initialValue: U): U
  fun fill(value: number, start: (number) | (undefined), end: (number) | (undefined)): Int8Array
  fun sort(compareFn: ((number) => (number) => number) | (undefined)): Int8Array
  let BYTES_PER_ELEMENT: number
  fun copyWithin(target: number, start: (number) | (undefined), end: (number) | (undefined)): Int8Array
  fun find(predicate: (number) => (number) => (Int8Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun subarray(begin: (number) | (undefined), end: (number) | (undefined)): Int8Array
  fun join(separator: (string) | (undefined)): string
  fun map(callbackfn: (number) => (number) => (Int8Array) => number, thisArg: (anything) | (undefined)): Int8Array
  fun forEach(callbackfn: (number) => (number) => (Int8Array) => unit, thisArg: (anything) | (undefined)): unit
  let buffer: ArrayBuffer
  fun findIndex(predicate: (number) => (number) => (Int8Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun reverse(): Int8Array
  fun filter(predicate: (number) => (number) => (Int8Array) => anything, thisArg: (anything) | (undefined)): Int8Array
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): Int8Array
  let byteLength: number
  fun reduce<U>(callbackfn: (U) => (number) => (number) => (Int8Array) => U, initialValue: U): U
  fun toString(): string
  let length: number
  fun some(predicate: (number) => (number) => (Int8Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun indexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  let byteOffset: number
}
trait Uint8Array() {
  fun valueOf(): Uint8Array
  fun lastIndexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  fun every(predicate: (number) => (number) => (Uint8Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun set(array: ArrayLike<number>, offset: (number) | (undefined)): unit
  fun toLocaleString(): string
  fun __index(index: number): number
  fun reduceRight<U>(callbackfn: (U) => (number) => (number) => (Uint8Array) => U, initialValue: U): U
  fun fill(value: number, start: (number) | (undefined), end: (number) | (undefined)): Uint8Array
  fun sort(compareFn: ((number) => (number) => number) | (undefined)): Uint8Array
  let BYTES_PER_ELEMENT: number
  fun copyWithin(target: number, start: (number) | (undefined), end: (number) | (undefined)): Uint8Array
  fun find(predicate: (number) => (number) => (Uint8Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun subarray(begin: (number) | (undefined), end: (number) | (undefined)): Uint8Array
  fun join(separator: (string) | (undefined)): string
  fun map(callbackfn: (number) => (number) => (Uint8Array) => number, thisArg: (anything) | (undefined)): Uint8Array
  fun forEach(callbackfn: (number) => (number) => (Uint8Array) => unit, thisArg: (anything) | (undefined)): unit
  let buffer: ArrayBuffer
  fun findIndex(predicate: (number) => (number) => (Uint8Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun reverse(): Uint8Array
  fun filter(predicate: (number) => (number) => (Uint8Array) => anything, thisArg: (anything) | (undefined)): Uint8Array
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): Uint8Array
  let byteLength: number
  fun reduce<U>(callbackfn: (U) => (number) => (number) => (Uint8Array) => U, initialValue: U): U
  fun toString(): string
  let length: number
  fun some(predicate: (number) => (number) => (Uint8Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun indexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  let byteOffset: number
}
trait Uint8ClampedArray() {
  fun valueOf(): Uint8ClampedArray
  fun lastIndexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  fun every(predicate: (number) => (number) => (Uint8ClampedArray) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun set(array: ArrayLike<number>, offset: (number) | (undefined)): unit
  fun toLocaleString(): string
  fun __index(index: number): number
  fun reduceRight<U>(callbackfn: (U) => (number) => (number) => (Uint8ClampedArray) => U, initialValue: U): U
  fun fill(value: number, start: (number) | (undefined), end: (number) | (undefined)): Uint8ClampedArray
  fun sort(compareFn: ((number) => (number) => number) | (undefined)): Uint8ClampedArray
  let BYTES_PER_ELEMENT: number
  fun copyWithin(target: number, start: (number) | (undefined), end: (number) | (undefined)): Uint8ClampedArray
  fun find(predicate: (number) => (number) => (Uint8ClampedArray) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun subarray(begin: (number) | (undefined), end: (number) | (undefined)): Uint8ClampedArray
  fun join(separator: (string) | (undefined)): string
  fun map(callbackfn: (number) => (number) => (Uint8ClampedArray) => number, thisArg: (anything) | (undefined)): Uint8ClampedArray
  fun forEach(callbackfn: (number) => (number) => (Uint8ClampedArray) => unit, thisArg: (anything) | (undefined)): unit
  let buffer: ArrayBuffer
  fun findIndex(predicate: (number) => (number) => (Uint8ClampedArray) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun reverse(): Uint8ClampedArray
  fun filter(predicate: (number) => (number) => (Uint8ClampedArray) => anything, thisArg: (anything) | (undefined)): Uint8ClampedArray
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): Uint8ClampedArray
  let byteLength: number
  fun reduce<U>(callbackfn: (U) => (number) => (number) => (Uint8ClampedArray) => U, initialValue: U): U
  fun toString(): string
  let length: number
  fun some(predicate: (number) => (number) => (Uint8ClampedArray) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun indexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  let byteOffset: number
}
trait Int16Array() {
  fun valueOf(): Int16Array
  fun lastIndexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  fun every(predicate: (number) => (number) => (Int16Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun set(array: ArrayLike<number>, offset: (number) | (undefined)): unit
  fun toLocaleString(): string
  fun __index(index: number): number
  fun reduceRight<U>(callbackfn: (U) => (number) => (number) => (Int16Array) => U, initialValue: U): U
  fun fill(value: number, start: (number) | (undefined), end: (number) | (undefined)): Int16Array
  fun sort(compareFn: ((number) => (number) => number) | (undefined)): Int16Array
  let BYTES_PER_ELEMENT: number
  fun copyWithin(target: number, start: (number) | (undefined), end: (number) | (undefined)): Int16Array
  fun find(predicate: (number) => (number) => (Int16Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun subarray(begin: (number) | (undefined), end: (number) | (undefined)): Int16Array
  fun join(separator: (string) | (undefined)): string
  fun map(callbackfn: (number) => (number) => (Int16Array) => number, thisArg: (anything) | (undefined)): Int16Array
  fun forEach(callbackfn: (number) => (number) => (Int16Array) => unit, thisArg: (anything) | (undefined)): unit
  let buffer: ArrayBuffer
  fun findIndex(predicate: (number) => (number) => (Int16Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun reverse(): Int16Array
  fun filter(predicate: (number) => (number) => (Int16Array) => anything, thisArg: (anything) | (undefined)): Int16Array
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): Int16Array
  let byteLength: number
  fun reduce<U>(callbackfn: (U) => (number) => (number) => (Int16Array) => U, initialValue: U): U
  fun toString(): string
  let length: number
  fun some(predicate: (number) => (number) => (Int16Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun indexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  let byteOffset: number
}
trait Uint16Array() {
  fun valueOf(): Uint16Array
  fun lastIndexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  fun every(predicate: (number) => (number) => (Uint16Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun set(array: ArrayLike<number>, offset: (number) | (undefined)): unit
  fun toLocaleString(): string
  fun __index(index: number): number
  fun reduceRight<U>(callbackfn: (U) => (number) => (number) => (Uint16Array) => U, initialValue: U): U
  fun fill(value: number, start: (number) | (undefined), end: (number) | (undefined)): Uint16Array
  fun sort(compareFn: ((number) => (number) => number) | (undefined)): Uint16Array
  let BYTES_PER_ELEMENT: number
  fun copyWithin(target: number, start: (number) | (undefined), end: (number) | (undefined)): Uint16Array
  fun find(predicate: (number) => (number) => (Uint16Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun subarray(begin: (number) | (undefined), end: (number) | (undefined)): Uint16Array
  fun join(separator: (string) | (undefined)): string
  fun map(callbackfn: (number) => (number) => (Uint16Array) => number, thisArg: (anything) | (undefined)): Uint16Array
  fun forEach(callbackfn: (number) => (number) => (Uint16Array) => unit, thisArg: (anything) | (undefined)): unit
  let buffer: ArrayBuffer
  fun findIndex(predicate: (number) => (number) => (Uint16Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun reverse(): Uint16Array
  fun filter(predicate: (number) => (number) => (Uint16Array) => anything, thisArg: (anything) | (undefined)): Uint16Array
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): Uint16Array
  let byteLength: number
  fun reduce<U>(callbackfn: (U) => (number) => (number) => (Uint16Array) => U, initialValue: U): U
  fun toString(): string
  let length: number
  fun some(predicate: (number) => (number) => (Uint16Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun indexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  let byteOffset: number
}
trait Int32Array() {
  fun valueOf(): Int32Array
  fun lastIndexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  fun every(predicate: (number) => (number) => (Int32Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun set(array: ArrayLike<number>, offset: (number) | (undefined)): unit
  fun toLocaleString(): string
  fun __index(index: number): number
  fun reduceRight<U>(callbackfn: (U) => (number) => (number) => (Int32Array) => U, initialValue: U): U
  fun fill(value: number, start: (number) | (undefined), end: (number) | (undefined)): Int32Array
  fun sort(compareFn: ((number) => (number) => number) | (undefined)): Int32Array
  let BYTES_PER_ELEMENT: number
  fun copyWithin(target: number, start: (number) | (undefined), end: (number) | (undefined)): Int32Array
  fun find(predicate: (number) => (number) => (Int32Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun subarray(begin: (number) | (undefined), end: (number) | (undefined)): Int32Array
  fun join(separator: (string) | (undefined)): string
  fun map(callbackfn: (number) => (number) => (Int32Array) => number, thisArg: (anything) | (undefined)): Int32Array
  fun forEach(callbackfn: (number) => (number) => (Int32Array) => unit, thisArg: (anything) | (undefined)): unit
  let buffer: ArrayBuffer
  fun findIndex(predicate: (number) => (number) => (Int32Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun reverse(): Int32Array
  fun filter(predicate: (number) => (number) => (Int32Array) => anything, thisArg: (anything) | (undefined)): Int32Array
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): Int32Array
  let byteLength: number
  fun reduce<U>(callbackfn: (U) => (number) => (number) => (Int32Array) => U, initialValue: U): U
  fun toString(): string
  let length: number
  fun some(predicate: (number) => (number) => (Int32Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun indexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  let byteOffset: number
}
trait Uint32Array() {
  fun valueOf(): Uint32Array
  fun lastIndexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  fun every(predicate: (number) => (number) => (Uint32Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun set(array: ArrayLike<number>, offset: (number) | (undefined)): unit
  fun toLocaleString(): string
  fun __index(index: number): number
  fun reduceRight<U>(callbackfn: (U) => (number) => (number) => (Uint32Array) => U, initialValue: U): U
  fun fill(value: number, start: (number) | (undefined), end: (number) | (undefined)): Uint32Array
  fun sort(compareFn: ((number) => (number) => number) | (undefined)): Uint32Array
  let BYTES_PER_ELEMENT: number
  fun copyWithin(target: number, start: (number) | (undefined), end: (number) | (undefined)): Uint32Array
  fun find(predicate: (number) => (number) => (Uint32Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun subarray(begin: (number) | (undefined), end: (number) | (undefined)): Uint32Array
  fun join(separator: (string) | (undefined)): string
  fun map(callbackfn: (number) => (number) => (Uint32Array) => number, thisArg: (anything) | (undefined)): Uint32Array
  fun forEach(callbackfn: (number) => (number) => (Uint32Array) => unit, thisArg: (anything) | (undefined)): unit
  let buffer: ArrayBuffer
  fun findIndex(predicate: (number) => (number) => (Uint32Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun reverse(): Uint32Array
  fun filter(predicate: (number) => (number) => (Uint32Array) => anything, thisArg: (anything) | (undefined)): Uint32Array
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): Uint32Array
  let byteLength: number
  fun reduce<U>(callbackfn: (U) => (number) => (number) => (Uint32Array) => U, initialValue: U): U
  fun toString(): string
  let length: number
  fun some(predicate: (number) => (number) => (Uint32Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun indexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  let byteOffset: number
}
trait Float32Array() {
  fun valueOf(): Float32Array
  fun lastIndexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  fun every(predicate: (number) => (number) => (Float32Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun set(array: ArrayLike<number>, offset: (number) | (undefined)): unit
  fun toLocaleString(): string
  fun __index(index: number): number
  fun reduceRight<U>(callbackfn: (U) => (number) => (number) => (Float32Array) => U, initialValue: U): U
  fun fill(value: number, start: (number) | (undefined), end: (number) | (undefined)): Float32Array
  fun sort(compareFn: ((number) => (number) => number) | (undefined)): Float32Array
  let BYTES_PER_ELEMENT: number
  fun copyWithin(target: number, start: (number) | (undefined), end: (number) | (undefined)): Float32Array
  fun find(predicate: (number) => (number) => (Float32Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun subarray(begin: (number) | (undefined), end: (number) | (undefined)): Float32Array
  fun join(separator: (string) | (undefined)): string
  fun map(callbackfn: (number) => (number) => (Float32Array) => number, thisArg: (anything) | (undefined)): Float32Array
  fun forEach(callbackfn: (number) => (number) => (Float32Array) => unit, thisArg: (anything) | (undefined)): unit
  let buffer: ArrayBuffer
  fun findIndex(predicate: (number) => (number) => (Float32Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun reverse(): Float32Array
  fun filter(predicate: (number) => (number) => (Float32Array) => anything, thisArg: (anything) | (undefined)): Float32Array
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): Float32Array
  let byteLength: number
  fun reduce<U>(callbackfn: (U) => (number) => (number) => (Float32Array) => U, initialValue: U): U
  fun toString(): string
  let length: number
  fun some(predicate: (number) => (number) => (Float32Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun indexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  let byteOffset: number
}
trait Float64Array() {
  fun valueOf(): Float64Array
  fun lastIndexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  fun every(predicate: (number) => (number) => (Float64Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun set(array: ArrayLike<number>, offset: (number) | (undefined)): unit
  fun __index(index: number): number
  fun reduceRight<U>(callbackfn: (U) => (number) => (number) => (Float64Array) => U, initialValue: U): U
  fun fill(value: number, start: (number) | (undefined), end: (number) | (undefined)): Float64Array
  fun sort(compareFn: ((number) => (number) => number) | (undefined)): Float64Array
  let BYTES_PER_ELEMENT: number
  fun copyWithin(target: number, start: (number) | (undefined), end: (number) | (undefined)): Float64Array
  fun find(predicate: (number) => (number) => (Float64Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun subarray(begin: (number) | (undefined), end: (number) | (undefined)): Float64Array
  fun join(separator: (string) | (undefined)): string
  fun map(callbackfn: (number) => (number) => (Float64Array) => number, thisArg: (anything) | (undefined)): Float64Array
  fun forEach(callbackfn: (number) => (number) => (Float64Array) => unit, thisArg: (anything) | (undefined)): unit
  let buffer: ArrayBuffer
  fun findIndex(predicate: (number) => (number) => (Float64Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun reverse(): Float64Array
  fun filter(predicate: (number) => (number) => (Float64Array) => anything, thisArg: (anything) | (undefined)): Float64Array
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): Float64Array
  let byteLength: number
  fun reduce<U>(callbackfn: (U) => (number) => (number) => (Float64Array) => U, initialValue: U): U
  fun toString(): string
  let length: number
  fun some(predicate: (number) => (number) => (Float64Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun indexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  let byteOffset: number
}
namespace Intl {
  trait CollatorOptions() {
    let sensitivity: (string) | (undefined)
    let ignorePunctuation: ((false) | (true)) | (undefined)
    let usage: (string) | (undefined)
    let localeMatcher: (string) | (undefined)
    let numeric: ((false) | (true)) | (undefined)
    let caseFirst: (string) | (undefined)
  }
  trait ResolvedCollatorOptions() {
    let sensitivity: string
    let ignorePunctuation: (false) | (true)
    let usage: string
    let locale: string
    let numeric: (false) | (true)
    let caseFirst: string
    let collation: string
  }
  trait Collator() {
    fun compare(x: string, y: string): number
    fun resolvedOptions(): Intl.ResolvedCollatorOptions
  }
  trait NumberFormatOptions() {
    let minimumSignificantDigits: (number) | (undefined)
    let useGrouping: ((false) | (true)) | (undefined)
    let style: (string) | (undefined)
    let localeMatcher: (string) | (undefined)
    let currency: (string) | (undefined)
    let minimumIntegerDigits: (number) | (undefined)
    let maximumFractionDigits: (number) | (undefined)
    let currencySign: (string) | (undefined)
    let maximumSignificantDigits: (number) | (undefined)
    let minimumFractionDigits: (number) | (undefined)
  }
  trait ResolvedNumberFormatOptions() {
    let numberingSystem: string
    let minimumSignificantDigits: (number) | (undefined)
    let useGrouping: (false) | (true)
    let style: string
    let locale: string
    let currency: (string) | (undefined)
    let minimumIntegerDigits: number
    let maximumFractionDigits: number
    let maximumSignificantDigits: (number) | (undefined)
    let minimumFractionDigits: number
  }
  trait NumberFormat() {
    fun format(value: number): string
    fun resolvedOptions(): Intl.ResolvedNumberFormatOptions
  }
  trait DateTimeFormatOptions() {
    let minute: ((string) | (string)) | (undefined)
    let year: ((string) | (string)) | (undefined)
    let hour: ((string) | (string)) | (undefined)
    let hour12: ((false) | (true)) | (undefined)
    let weekday: (((string) | (string)) | (string)) | (undefined)
    let formatMatcher: ((string) | (string)) | (undefined)
    let day: ((string) | (string)) | (undefined)
    let timeZone: (string) | (undefined)
    let month: (((((string) | (string)) | (string)) | (string)) | (string)) | (undefined)
    let second: ((string) | (string)) | (undefined)
    let localeMatcher: ((string) | (string)) | (undefined)
    let timeZoneName: ((((((string) | (string)) | (string)) | (string)) | (string)) | (string)) | (undefined)
    let era: (((string) | (string)) | (string)) | (undefined)
  }
  trait ResolvedDateTimeFormatOptions() {
    let numberingSystem: string
    let minute: (string) | (undefined)
    let year: (string) | (undefined)
    let hour: (string) | (undefined)
    let second: (string) | (undefined)
    let hour12: ((false) | (true)) | (undefined)
    let weekday: (string) | (undefined)
    let day: (string) | (undefined)
    let timeZone: string
    let month: (string) | (undefined)
    let locale: string
    let calendar: string
    let timeZoneName: (string) | (undefined)
    let era: (string) | (undefined)
  }
  trait DateTimeFormat() {
    fun format(date: ((number) | (Date)) | (undefined)): string
    fun resolvedOptions(): Intl.ResolvedDateTimeFormatOptions
  }
}
//│ |#let| |NaN|#:| |number|↵|#let| |Infinity|#:| |number|↵|#fun| |eval|(|x|#:| |string|)|#:| |anything|↵|#fun| |parseInt|(|string|#:| |string|,| |radix|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |parseFloat|(|string|#:| |string|)|#:| |number|↵|#fun| |isNaN|(|number|#:| |number|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |isFinite|(|number|#:| |number|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |decodeURI|(|encodedURI|#:| |string|)|#:| |string|↵|#fun| |decodeURIComponent|(|encodedURIComponent|#:| |string|)|#:| |string|↵|#fun| |encodeURI|(|uri|#:| |string|)|#:| |string|↵|#fun| |encodeURIComponent|(|uriComponent|#:| |(|(|(|string|)| ||| |(|number|)|)| ||| |(|false|)|)| ||| |(|true|)|)|#:| |string|↵|#fun| |escape|(|string|#:| |string|)|#:| |string|↵|#fun| |unescape|(|string|#:| |string|)|#:| |string|↵|#trait| |Symbol|(||)| |{|→|#fun| |toString|(||)|#:| |string|↵|#fun| |valueOf|(||)|#:| |Symbol|←|↵|}|↵|#type| |PropertyKey| |#=| |(|(|string|)| ||| |(|number|)|)| ||| |(|Symbol|)|↵|#trait| |PropertyDescriptor|(||)| |{|→|#let| |configurable|#:| |(|(|false|)| ||| |(|true|)|)| ||| |(|undefined|)|↵|#let| |set|#:| |(|(|anything|)| |=>| |unit|)| ||| |(|undefined|)|↵|#let| |enumerable|#:| |(|(|false|)| ||| |(|true|)|)| ||| |(|undefined|)|↵|#let| |get|#:| |(|unit| |=>| |anything|)| ||| |(|undefined|)|↵|#let| |writable|#:| |(|(|false|)| ||| |(|true|)|)| ||| |(|undefined|)|↵|#let| |value|#:| |(|anything|)| ||| |(|undefined|)|←|↵|}|↵|#trait| |PropertyDescriptorMap|(||)| |{|→|#fun| |__index|(|key|#:| |(|(|string|)| ||| |(|number|)|)| ||| |(|Symbol|)|)|#:| |PropertyDescriptor|←|↵|}|↵|#trait| |Object|(||)| |{|→|#fun| |hasOwnProperty|(|v|#:| |(|(|string|)| ||| |(|number|)|)| ||| |(|Symbol|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |propertyIsEnumerable|(|v|#:| |(|(|string|)| ||| |(|number|)|)| ||| |(|Symbol|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |valueOf|(||)|#:| |Object|↵|#fun| |toLocaleString|(||)|#:| |string|↵|#let| |constructor|#:| |Function|↵|#fun| |isPrototypeOf|(|v|#:| |Object|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |toString|(||)|#:| |string|←|↵|}|↵|#let| |Function|#:| |FunctionConstructor|↵|#trait| |FunctionConstructor|(||)| |{|→|#fun| |__new|(|args|#:| |MutArray|‹|string|›|)|#:| |Function|↵|#fun| |__call|(|args|#:| |MutArray|‹|string|›|)|#:| |Function|↵|#let| |prototype|#:| |Function|←|↵|}|↵|#type| |ThisParameterType|‹|T|›| |#=| |Unsupported|[|"T extends (this: infer U, ...args: never) => any ? U : unknown"|,| |"ts2mls/js/src/test/typescript/ES5.d.ts"|,| |306|,| |27|]|↵|#type| |OmitThisParameter|‹|T|›| |#=| |Unsupported|[|"unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T"|,| |"ts2mls/js/src/test/typescript/ES5.d.ts"|,| |311|,| |27|]|↵|#trait| |IArguments|(||)| |{|→|#fun| |__index|(|index|#:| |number|)|#:| |anything|↵|#let| |length|#:| |number|↵|#let| |callee|#:| |Function|←|↵|}|↵|#trait| |String|(||)| |{|→|#fun| |localeCompare|(|that|#:| |string|,| |locales|#:| |(|(|string|)| ||| |(|MutArray|‹|string|›|)|)| ||| |(|undefined|)|,| |options|#:| |(|Intl|.CollatorOptions|)| ||| |(|undefined|)|)|#:| |number|←|↵|}|↵|#trait| |StringConstructor|(||)| |{|→|#fun| |__new|(|value|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |String|↵|#fun| |__call|(|value|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |string|↵|#let| |prototype|#:| |String|↵|#fun| |fromCharCode|(|codes|#:| |MutArray|‹|number|›|)|#:| |string|←|↵|}|↵|#let| |Boolean|#:| |BooleanConstructor|↵|#trait| |BooleanConstructor|(||)| |{|→|#fun| |__new|(|value|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Boolean|↵|#fun| |__call|‹|T|›|(|value|#:| |(|T|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#let| |prototype|#:| |Boolean|←|↵|}|↵|#trait| |Number|(||)| |{|→|#fun| |toLocaleString|(|locales|#:| |(|(|string|)| ||| |(|MutArray|‹|string|›|)|)| ||| |(|undefined|)|,| |options|#:| |(|Intl|.NumberFormatOptions|)| ||| |(|undefined|)|)|#:| |string|←|↵|}|↵|#trait| |NumberConstructor|(||)| |{|→|#fun| |__call|(|value|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#let| |NaN|#:| |number|↵|#let| |MIN_VALUE|#:| |number|↵|#fun| |__new|(|value|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Number|↵|#let| |NEGATIVE_INFINITY|#:| |number|↵|#let| |POSITIVE_INFINITY|#:| |number|↵|#let| |MAX_VALUE|#:| |number|↵|#let| |prototype|#:| |Number|←|↵|}|↵|#trait| |TemplateStringsArray|(||)|#:| |ReadonlyArray|‹|string|›| |{|→|#let| |raw|#:| |ReadonlyArray|‹|string|›|←|↵|}|↵|#trait| |ImportMeta|(||)| |{||}|↵|#trait| |ImportCallOptions|(||)| |{|→|#let| |assert|#:| |(|ImportAssertions|)| ||| |(|undefined|)|←|↵|}|↵|#trait| |ImportAssertions|(||)| |{|→|#fun| |__index|(|key|#:| |string|)|#:| |string|←|↵|}|↵|#let| |Math|#:| |Math|↵|#trait| |Date|(||)| |{|→|#fun| |toLocaleString|(|locales|#:| |(|(|string|)| ||| |(|MutArray|‹|string|›|)|)| ||| |(|undefined|)|,| |options|#:| |(|Intl|.DateTimeFormatOptions|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |toLocaleDateString|(|locales|#:| |(|(|string|)| ||| |(|MutArray|‹|string|›|)|)| ||| |(|undefined|)|,| |options|#:| |(|Intl|.DateTimeFormatOptions|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |toLocaleTimeString|(|locales|#:| |(|(|string|)| ||| |(|MutArray|‹|string|›|)|)| ||| |(|undefined|)|,| |options|#:| |(|Intl|.DateTimeFormatOptions|)| ||| |(|undefined|)|)|#:| |string|←|↵|}|↵|#trait| |DateConstructor|(||)| |{|→|#fun| |__call|(||)|#:| |string|↵|#fun| |UTC|(|year|#:| |number|,| |monthIndex|#:| |number|,| |date|#:| |(|number|)| ||| |(|undefined|)|,| |hours|#:| |(|number|)| ||| |(|undefined|)|,| |minutes|#:| |(|number|)| ||| |(|undefined|)|,| |seconds|#:| |(|number|)| ||| |(|undefined|)|,| |ms|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |__new|(|year|#:| |number|,| |monthIndex|#:| |number|,| |date|#:| |(|number|)| ||| |(|undefined|)|,| |hours|#:| |(|number|)| ||| |(|undefined|)|,| |minutes|#:| |(|number|)| ||| |(|undefined|)|,| |seconds|#:| |(|number|)| ||| |(|undefined|)|,| |ms|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Date|↵|#fun| |now|(||)|#:| |number|↵|#fun| |parse|(|s|#:| |string|)|#:| |number|↵|#let| |prototype|#:| |Date|←|↵|}|↵|#let| |RegExp|#:| |RegExpConstructor|↵|#let| |Error|#:| |ErrorConstructor|↵|#trait| |ErrorConstructor|(||)| |{|→|#fun| |__new|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |Error|↵|#fun| |__call|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |Error|↵|#let| |prototype|#:| |Error|←|↵|}|↵|#let| |EvalError|#:| |EvalErrorConstructor|↵|#trait| |EvalErrorConstructor|(||)|#:| |ErrorConstructor| |{|→|#fun| |__new|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |EvalError|↵|#fun| |__call|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |EvalError|↵|#let| |prototype|#:| |EvalError|←|↵|}|↵|#let| |RangeError|#:| |RangeErrorConstructor|↵|#trait| |RangeErrorConstructor|(||)|#:| |ErrorConstructor| |{|→|#fun| |__new|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |RangeError|↵|#fun| |__call|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |RangeError|↵|#let| |prototype|#:| |RangeError|←|↵|}|↵|#let| |ReferenceError|#:| |ReferenceErrorConstructor|↵|#trait| |ReferenceErrorConstructor|(||)|#:| |ErrorConstructor| |{|→|#fun| |__new|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |ReferenceError|↵|#fun| |__call|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |ReferenceError|↵|#let| |prototype|#:| |ReferenceError|←|↵|}|↵|#let| |SyntaxError|#:| |SyntaxErrorConstructor|↵|#trait| |SyntaxErrorConstructor|(||)|#:| |ErrorConstructor| |{|→|#fun| |__new|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |SyntaxError|↵|#fun| |__call|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |SyntaxError|↵|#let| |prototype|#:| |SyntaxError|←|↵|}|↵|#let| |TypeError|#:| |TypeErrorConstructor|↵|#trait| |TypeErrorConstructor|(||)|#:| |ErrorConstructor| |{|→|#fun| |__new|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |TypeError|↵|#fun| |__call|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |TypeError|↵|#let| |prototype|#:| |TypeError|←|↵|}|↵|#let| |URIError|#:| |URIErrorConstructor|↵|#trait| |URIErrorConstructor|(||)|#:| |ErrorConstructor| |{|→|#fun| |__new|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |URIError|↵|#fun| |__call|(|message|#:| |(|string|)| ||| |(|undefined|)|)|#:| |URIError|↵|#let| |prototype|#:| |URIError|←|↵|}|↵|#let| |JSON|#:| |JSON|↵|#trait| |ReadonlyArray|‹|T|›|(||)| |{|→|#fun| |lastIndexOf|(|searchElement|#:| |T|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |every|(|predicate|#:| |(|T|)| |=>| |(|number|)| |=>| |(|ReadonlyArray|‹|T|›|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |forEach|(|callbackfn|#:| |(|T|)| |=>| |(|number|)| |=>| |(|ReadonlyArray|‹|T|›|)| |=>| |unit|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |unit|↵|#fun| |filter|(|predicate|#:| |(|T|)| |=>| |(|number|)| |=>| |(|ReadonlyArray|‹|T|›|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |MutArray|‹|T|›|↵|#fun| |__index|(|n|#:| |number|)|#:| |T|↵|#fun| |reduceRight|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|T|)| |=>| |(|number|)| |=>| |(|ReadonlyArray|‹|T|›|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |join|(|separator|#:| |(|string|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |map|‹|U|›|(|callbackfn|#:| |(|T|)| |=>| |(|number|)| |=>| |(|ReadonlyArray|‹|T|›|)| |=>| |U|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |MutArray|‹|U|›|↵|#fun| |concat|(|items|#:| |MutArray|‹|(|T|)| ||| |(|ConcatArray|‹|T|›|)|›|)|#:| |MutArray|‹|T|›|↵|#fun| |toLocaleString|(||)|#:| |string|↵|#fun| |slice|(|start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |MutArray|‹|T|›|↵|#fun| |reduce|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|T|)| |=>| |(|number|)| |=>| |(|ReadonlyArray|‹|T|›|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |toString|(||)|#:| |string|↵|#let| |length|#:| |number|↵|#fun| |some|(|predicate|#:| |(|T|)| |=>| |(|number|)| |=>| |(|ReadonlyArray|‹|T|›|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |indexOf|(|searchElement|#:| |T|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|←|↵|}|↵|#trait| |ConcatArray|‹|T|›|(||)| |{|→|#let| |length|#:| |number|↵|#fun| |__index|(|n|#:| |number|)|#:| |T|↵|#fun| |join|(|separator|#:| |(|string|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |slice|(|start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |MutArray|‹|T|›|←|↵|}|↵|#let| |Array|#:| |ArrayConstructor|↵|#trait| |ArrayConstructor|(||)| |{|→|#fun| |__new|‹|T|›|(|items|#:| |MutArray|‹|T|›|)|#:| |MutArray|‹|T|›|↵|#fun| |__call|‹|T|›|(|items|#:| |MutArray|‹|T|›|)|#:| |MutArray|‹|T|›|↵|#fun| |isArray|(|arg|#:| |anything|)|#:| |(|false|)| ||| |(|true|)|↵|#let| |prototype|#:| |MutArray|‹|anything|›|←|↵|}|↵|#trait| |TypedPropertyDescriptor|‹|T|›|(||)| |{|→|#let| |configurable|#:| |(|(|false|)| ||| |(|true|)|)| ||| |(|undefined|)|↵|#let| |set|#:| |(|(|T|)| |=>| |unit|)| ||| |(|undefined|)|↵|#let| |enumerable|#:| |(|(|false|)| ||| |(|true|)|)| ||| |(|undefined|)|↵|#let| |get|#:| |(|unit| |=>| |T|)| ||| |(|undefined|)|↵|#let| |writable|#:| |(|(|false|)| ||| |(|true|)|)| ||| |(|undefined|)|↵|#let| |value|#:| |(|T|)| ||| |(|undefined|)|←|↵|}|↵|#type| |PromiseConstructorLike| |#=| |(|(|(|(|T|)| ||| |(|PromiseLike|‹|T|›|)|)| |=>| |unit|)| |=>| |(|(|(|anything|)| ||| |(|undefined|)|)| |=>| |unit|)| |=>| |unit|)| |=>| |PromiseLike|‹|T|›|↵|#trait| |ThisType|‹|T|›|(||)| |{||}|↵|#let| |ArrayBuffer|#:| |ArrayBufferConstructor|↵|#trait| |ArrayBufferTypes|(||)| |{|→|#let| |ArrayBuffer|#:| |ArrayBuffer|←|↵|}|↵|#type| |ArrayBufferLike| |#=| |ArrayBuffer|↵|#trait| |ArrayBufferConstructor|(||)| |{|→|#let| |prototype|#:| |ArrayBuffer|↵|#fun| |__new|(|byteLength|#:| |number|)|#:| |ArrayBuffer|↵|#fun| |isView|(|arg|#:| |anything|)|#:| |(|false|)| ||| |(|true|)|←|↵|}|↵|#trait| |ArrayBufferView|(||)| |{|→|#let| |buffer|#:| |ArrayBuffer|↵|#let| |byteLength|#:| |number|↵|#let| |byteOffset|#:| |number|←|↵|}|↵|#let| |DataView|#:| |DataViewConstructor|↵|#trait| |DataViewConstructor|(||)| |{|→|#let| |prototype|#:| |DataView|↵|#fun| |__new|(|buffer|#:| |ArrayBuffer|,| |byteOffset|#:| |(|number|)| ||| |(|undefined|)|,| |byteLength|#:| |(|number|)| ||| |(|undefined|)|)|#:| |DataView|←|↵|}|↵|#trait| |Int8Array|(||)| |{|→|#fun| |valueOf|(||)|#:| |Int8Array|↵|#fun| |lastIndexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |every|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int8Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |set|(|array|#:| |ArrayLike|‹|number|›|,| |offset|#:| |(|number|)| ||| |(|undefined|)|)|#:| |unit|↵|#fun| |toLocaleString|(||)|#:| |string|↵|#fun| |__index|(|index|#:| |number|)|#:| |number|↵|#fun| |reduceRight|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Int8Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |fill|(|value|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Int8Array|↵|#fun| |sort|(|compareFn|#:| |(|(|number|)| |=>| |(|number|)| |=>| |number|)| ||| |(|undefined|)|)|#:| |Int8Array|↵|#let| |BYTES_PER_ELEMENT|#:| |number|↵|#fun| |copyWithin|(|target|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Int8Array|↵|#fun| |find|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int8Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |subarray|(|begin|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Int8Array|↵|#fun| |join|(|separator|#:| |(|string|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |map|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int8Array|)| |=>| |number|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Int8Array|↵|#fun| |forEach|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int8Array|)| |=>| |unit|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |unit|↵|#let| |buffer|#:| |ArrayBuffer|↵|#fun| |findIndex|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int8Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |reverse|(||)|#:| |Int8Array|↵|#fun| |filter|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int8Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Int8Array|↵|#fun| |slice|(|start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Int8Array|↵|#let| |byteLength|#:| |number|↵|#fun| |reduce|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Int8Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |toString|(||)|#:| |string|↵|#let| |length|#:| |number|↵|#fun| |some|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int8Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |indexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#let| |byteOffset|#:| |number|←|↵|}|↵|#trait| |Uint8Array|(||)| |{|→|#fun| |valueOf|(||)|#:| |Uint8Array|↵|#fun| |lastIndexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |every|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |set|(|array|#:| |ArrayLike|‹|number|›|,| |offset|#:| |(|number|)| ||| |(|undefined|)|)|#:| |unit|↵|#fun| |toLocaleString|(||)|#:| |string|↵|#fun| |__index|(|index|#:| |number|)|#:| |number|↵|#fun| |reduceRight|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |fill|(|value|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint8Array|↵|#fun| |sort|(|compareFn|#:| |(|(|number|)| |=>| |(|number|)| |=>| |number|)| ||| |(|undefined|)|)|#:| |Uint8Array|↵|#let| |BYTES_PER_ELEMENT|#:| |number|↵|#fun| |copyWithin|(|target|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint8Array|↵|#fun| |find|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |subarray|(|begin|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint8Array|↵|#fun| |join|(|separator|#:| |(|string|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |map|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8Array|)| |=>| |number|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Uint8Array|↵|#fun| |forEach|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8Array|)| |=>| |unit|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |unit|↵|#let| |buffer|#:| |ArrayBuffer|↵|#fun| |findIndex|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |reverse|(||)|#:| |Uint8Array|↵|#fun| |filter|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Uint8Array|↵|#fun| |slice|(|start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint8Array|↵|#let| |byteLength|#:| |number|↵|#fun| |reduce|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |toString|(||)|#:| |string|↵|#let| |length|#:| |number|↵|#fun| |some|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |indexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#let| |byteOffset|#:| |number|←|↵|}|↵|#trait| |Uint8ClampedArray|(||)| |{|→|#fun| |valueOf|(||)|#:| |Uint8ClampedArray|↵|#fun| |lastIndexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |every|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8ClampedArray|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |set|(|array|#:| |ArrayLike|‹|number|›|,| |offset|#:| |(|number|)| ||| |(|undefined|)|)|#:| |unit|↵|#fun| |toLocaleString|(||)|#:| |string|↵|#fun| |__index|(|index|#:| |number|)|#:| |number|↵|#fun| |reduceRight|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8ClampedArray|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |fill|(|value|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint8ClampedArray|↵|#fun| |sort|(|compareFn|#:| |(|(|number|)| |=>| |(|number|)| |=>| |number|)| ||| |(|undefined|)|)|#:| |Uint8ClampedArray|↵|#let| |BYTES_PER_ELEMENT|#:| |number|↵|#fun| |copyWithin|(|target|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint8ClampedArray|↵|#fun| |find|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8ClampedArray|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |subarray|(|begin|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint8ClampedArray|↵|#fun| |join|(|separator|#:| |(|string|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |map|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8ClampedArray|)| |=>| |number|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Uint8ClampedArray|↵|#fun| |forEach|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8ClampedArray|)| |=>| |unit|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |unit|↵|#let| |buffer|#:| |ArrayBuffer|↵|#fun| |findIndex|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8ClampedArray|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |reverse|(||)|#:| |Uint8ClampedArray|↵|#fun| |filter|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8ClampedArray|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Uint8ClampedArray|↵|#fun| |slice|(|start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint8ClampedArray|↵|#let| |byteLength|#:| |number|↵|#fun| |reduce|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8ClampedArray|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |toString|(||)|#:| |string|↵|#let| |length|#:| |number|↵|#fun| |some|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint8ClampedArray|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |indexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#let| |byteOffset|#:| |number|←|↵|}|↵|#trait| |Int16Array|(||)| |{|→|#fun| |valueOf|(||)|#:| |Int16Array|↵|#fun| |lastIndexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |every|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int16Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |set|(|array|#:| |ArrayLike|‹|number|›|,| |offset|#:| |(|number|)| ||| |(|undefined|)|)|#:| |unit|↵|#fun| |toLocaleString|(||)|#:| |string|↵|#fun| |__index|(|index|#:| |number|)|#:| |number|↵|#fun| |reduceRight|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Int16Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |fill|(|value|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Int16Array|↵|#fun| |sort|(|compareFn|#:| |(|(|number|)| |=>| |(|number|)| |=>| |number|)| ||| |(|undefined|)|)|#:| |Int16Array|↵|#let| |BYTES_PER_ELEMENT|#:| |number|↵|#fun| |copyWithin|(|target|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Int16Array|↵|#fun| |find|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int16Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |subarray|(|begin|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Int16Array|↵|#fun| |join|(|separator|#:| |(|string|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |map|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int16Array|)| |=>| |number|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Int16Array|↵|#fun| |forEach|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int16Array|)| |=>| |unit|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |unit|↵|#let| |buffer|#:| |ArrayBuffer|↵|#fun| |findIndex|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int16Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |reverse|(||)|#:| |Int16Array|↵|#fun| |filter|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int16Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Int16Array|↵|#fun| |slice|(|start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Int16Array|↵|#let| |byteLength|#:| |number|↵|#fun| |reduce|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Int16Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |toString|(||)|#:| |string|↵|#let| |length|#:| |number|↵|#fun| |some|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int16Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |indexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#let| |byteOffset|#:| |number|←|↵|}|↵|#trait| |Uint16Array|(||)| |{|→|#fun| |valueOf|(||)|#:| |Uint16Array|↵|#fun| |lastIndexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |every|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint16Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |set|(|array|#:| |ArrayLike|‹|number|›|,| |offset|#:| |(|number|)| ||| |(|undefined|)|)|#:| |unit|↵|#fun| |toLocaleString|(||)|#:| |string|↵|#fun| |__index|(|index|#:| |number|)|#:| |number|↵|#fun| |reduceRight|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Uint16Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |fill|(|value|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint16Array|↵|#fun| |sort|(|compareFn|#:| |(|(|number|)| |=>| |(|number|)| |=>| |number|)| ||| |(|undefined|)|)|#:| |Uint16Array|↵|#let| |BYTES_PER_ELEMENT|#:| |number|↵|#fun| |copyWithin|(|target|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint16Array|↵|#fun| |find|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint16Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |subarray|(|begin|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint16Array|↵|#fun| |join|(|separator|#:| |(|string|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |map|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint16Array|)| |=>| |number|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Uint16Array|↵|#fun| |forEach|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint16Array|)| |=>| |unit|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |unit|↵|#let| |buffer|#:| |ArrayBuffer|↵|#fun| |findIndex|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint16Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |reverse|(||)|#:| |Uint16Array|↵|#fun| |filter|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint16Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Uint16Array|↵|#fun| |slice|(|start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint16Array|↵|#let| |byteLength|#:| |number|↵|#fun| |reduce|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Uint16Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |toString|(||)|#:| |string|↵|#let| |length|#:| |number|↵|#fun| |some|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint16Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |indexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#let| |byteOffset|#:| |number|←|↵|}|↵|#trait| |Int32Array|(||)| |{|→|#fun| |valueOf|(||)|#:| |Int32Array|↵|#fun| |lastIndexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |every|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int32Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |set|(|array|#:| |ArrayLike|‹|number|›|,| |offset|#:| |(|number|)| ||| |(|undefined|)|)|#:| |unit|↵|#fun| |toLocaleString|(||)|#:| |string|↵|#fun| |__index|(|index|#:| |number|)|#:| |number|↵|#fun| |reduceRight|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Int32Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |fill|(|value|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Int32Array|↵|#fun| |sort|(|compareFn|#:| |(|(|number|)| |=>| |(|number|)| |=>| |number|)| ||| |(|undefined|)|)|#:| |Int32Array|↵|#let| |BYTES_PER_ELEMENT|#:| |number|↵|#fun| |copyWithin|(|target|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Int32Array|↵|#fun| |find|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int32Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |subarray|(|begin|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Int32Array|↵|#fun| |join|(|separator|#:| |(|string|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |map|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int32Array|)| |=>| |number|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Int32Array|↵|#fun| |forEach|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int32Array|)| |=>| |unit|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |unit|↵|#let| |buffer|#:| |ArrayBuffer|↵|#fun| |findIndex|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int32Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |reverse|(||)|#:| |Int32Array|↵|#fun| |filter|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int32Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Int32Array|↵|#fun| |slice|(|start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Int32Array|↵|#let| |byteLength|#:| |number|↵|#fun| |reduce|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Int32Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |toString|(||)|#:| |string|↵|#let| |length|#:| |number|↵|#fun| |some|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Int32Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |indexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#let| |byteOffset|#:| |number|←|↵|}|↵|#trait| |Uint32Array|(||)| |{|→|#fun| |valueOf|(||)|#:| |Uint32Array|↵|#fun| |lastIndexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |every|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint32Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |set|(|array|#:| |ArrayLike|‹|number|›|,| |offset|#:| |(|number|)| ||| |(|undefined|)|)|#:| |unit|↵|#fun| |toLocaleString|(||)|#:| |string|↵|#fun| |__index|(|index|#:| |number|)|#:| |number|↵|#fun| |reduceRight|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Uint32Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |fill|(|value|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint32Array|↵|#fun| |sort|(|compareFn|#:| |(|(|number|)| |=>| |(|number|)| |=>| |number|)| ||| |(|undefined|)|)|#:| |Uint32Array|↵|#let| |BYTES_PER_ELEMENT|#:| |number|↵|#fun| |copyWithin|(|target|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint32Array|↵|#fun| |find|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint32Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |subarray|(|begin|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint32Array|↵|#fun| |join|(|separator|#:| |(|string|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |map|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint32Array|)| |=>| |number|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Uint32Array|↵|#fun| |forEach|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint32Array|)| |=>| |unit|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |unit|↵|#let| |buffer|#:| |ArrayBuffer|↵|#fun| |findIndex|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint32Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |reverse|(||)|#:| |Uint32Array|↵|#fun| |filter|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint32Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Uint32Array|↵|#fun| |slice|(|start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Uint32Array|↵|#let| |byteLength|#:| |number|↵|#fun| |reduce|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Uint32Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |toString|(||)|#:| |string|↵|#let| |length|#:| |number|↵|#fun| |some|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Uint32Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |indexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#let| |byteOffset|#:| |number|←|↵|}|↵|#trait| |Float32Array|(||)| |{|→|#fun| |valueOf|(||)|#:| |Float32Array|↵|#fun| |lastIndexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |every|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float32Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |set|(|array|#:| |ArrayLike|‹|number|›|,| |offset|#:| |(|number|)| ||| |(|undefined|)|)|#:| |unit|↵|#fun| |toLocaleString|(||)|#:| |string|↵|#fun| |__index|(|index|#:| |number|)|#:| |number|↵|#fun| |reduceRight|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Float32Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |fill|(|value|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Float32Array|↵|#fun| |sort|(|compareFn|#:| |(|(|number|)| |=>| |(|number|)| |=>| |number|)| ||| |(|undefined|)|)|#:| |Float32Array|↵|#let| |BYTES_PER_ELEMENT|#:| |number|↵|#fun| |copyWithin|(|target|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Float32Array|↵|#fun| |find|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float32Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |subarray|(|begin|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Float32Array|↵|#fun| |join|(|separator|#:| |(|string|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |map|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float32Array|)| |=>| |number|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Float32Array|↵|#fun| |forEach|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float32Array|)| |=>| |unit|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |unit|↵|#let| |buffer|#:| |ArrayBuffer|↵|#fun| |findIndex|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float32Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |reverse|(||)|#:| |Float32Array|↵|#fun| |filter|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float32Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Float32Array|↵|#fun| |slice|(|start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Float32Array|↵|#let| |byteLength|#:| |number|↵|#fun| |reduce|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Float32Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |toString|(||)|#:| |string|↵|#let| |length|#:| |number|↵|#fun| |some|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float32Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |indexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#let| |byteOffset|#:| |number|←|↵|}|↵|#trait| |Float64Array|(||)| |{|→|#fun| |valueOf|(||)|#:| |Float64Array|↵|#fun| |lastIndexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |every|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float64Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |set|(|array|#:| |ArrayLike|‹|number|›|,| |offset|#:| |(|number|)| ||| |(|undefined|)|)|#:| |unit|↵|#fun| |__index|(|index|#:| |number|)|#:| |number|↵|#fun| |reduceRight|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Float64Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |fill|(|value|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Float64Array|↵|#fun| |sort|(|compareFn|#:| |(|(|number|)| |=>| |(|number|)| |=>| |number|)| ||| |(|undefined|)|)|#:| |Float64Array|↵|#let| |BYTES_PER_ELEMENT|#:| |number|↵|#fun| |copyWithin|(|target|#:| |number|,| |start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Float64Array|↵|#fun| |find|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float64Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |subarray|(|begin|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Float64Array|↵|#fun| |join|(|separator|#:| |(|string|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |map|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float64Array|)| |=>| |number|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Float64Array|↵|#fun| |forEach|(|callbackfn|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float64Array|)| |=>| |unit|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |unit|↵|#let| |buffer|#:| |ArrayBuffer|↵|#fun| |findIndex|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float64Array|)| |=>| |(|false|)| ||| |(|true|)|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |number|↵|#fun| |reverse|(||)|#:| |Float64Array|↵|#fun| |filter|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float64Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |Float64Array|↵|#fun| |slice|(|start|#:| |(|number|)| ||| |(|undefined|)|,| |end|#:| |(|number|)| ||| |(|undefined|)|)|#:| |Float64Array|↵|#let| |byteLength|#:| |number|↵|#fun| |reduce|‹|U|›|(|callbackfn|#:| |(|U|)| |=>| |(|number|)| |=>| |(|number|)| |=>| |(|Float64Array|)| |=>| |U|,| |initialValue|#:| |U|)|#:| |U|↵|#fun| |toString|(||)|#:| |string|↵|#let| |length|#:| |number|↵|#fun| |some|(|predicate|#:| |(|number|)| |=>| |(|number|)| |=>| |(|Float64Array|)| |=>| |anything|,| |thisArg|#:| |(|anything|)| ||| |(|undefined|)|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |indexOf|(|searchElement|#:| |number|,| |fromIndex|#:| |(|number|)| ||| |(|undefined|)|)|#:| |number|↵|#let| |byteOffset|#:| |number|←|↵|}|↵|#namespace| |Intl| |{|→|#trait| |CollatorOptions|(||)| |{|→|#let| |sensitivity|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |ignorePunctuation|#:| |(|(|false|)| ||| |(|true|)|)| ||| |(|undefined|)|↵|#let| |usage|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |localeMatcher|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |numeric|#:| |(|(|false|)| ||| |(|true|)|)| ||| |(|undefined|)|↵|#let| |caseFirst|#:| |(|string|)| ||| |(|undefined|)|←|↵|}|↵|#trait| |ResolvedCollatorOptions|(||)| |{|→|#let| |sensitivity|#:| |string|↵|#let| |ignorePunctuation|#:| |(|false|)| ||| |(|true|)|↵|#let| |usage|#:| |string|↵|#let| |locale|#:| |string|↵|#let| |numeric|#:| |(|false|)| ||| |(|true|)|↵|#let| |caseFirst|#:| |string|↵|#let| |collation|#:| |string|←|↵|}|↵|#trait| |Collator|(||)| |{|→|#fun| |compare|(|x|#:| |string|,| |y|#:| |string|)|#:| |number|↵|#fun| |resolvedOptions|(||)|#:| |Intl|.ResolvedCollatorOptions|←|↵|}|↵|#trait| |NumberFormatOptions|(||)| |{|→|#let| |minimumSignificantDigits|#:| |(|number|)| ||| |(|undefined|)|↵|#let| |useGrouping|#:| |(|(|false|)| ||| |(|true|)|)| ||| |(|undefined|)|↵|#let| |style|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |localeMatcher|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |currency|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |minimumIntegerDigits|#:| |(|number|)| ||| |(|undefined|)|↵|#let| |maximumFractionDigits|#:| |(|number|)| ||| |(|undefined|)|↵|#let| |currencySign|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |maximumSignificantDigits|#:| |(|number|)| ||| |(|undefined|)|↵|#let| |minimumFractionDigits|#:| |(|number|)| ||| |(|undefined|)|←|↵|}|↵|#trait| |ResolvedNumberFormatOptions|(||)| |{|→|#let| |numberingSystem|#:| |string|↵|#let| |minimumSignificantDigits|#:| |(|number|)| ||| |(|undefined|)|↵|#let| |useGrouping|#:| |(|false|)| ||| |(|true|)|↵|#let| |style|#:| |string|↵|#let| |locale|#:| |string|↵|#let| |currency|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |minimumIntegerDigits|#:| |number|↵|#let| |maximumFractionDigits|#:| |number|↵|#let| |maximumSignificantDigits|#:| |(|number|)| ||| |(|undefined|)|↵|#let| |minimumFractionDigits|#:| |number|←|↵|}|↵|#trait| |NumberFormat|(||)| |{|→|#fun| |format|(|value|#:| |number|)|#:| |string|↵|#fun| |resolvedOptions|(||)|#:| |Intl|.ResolvedNumberFormatOptions|←|↵|}|↵|#trait| |DateTimeFormatOptions|(||)| |{|→|#let| |minute|#:| |(|(|string|)| ||| |(|string|)|)| ||| |(|undefined|)|↵|#let| |year|#:| |(|(|string|)| ||| |(|string|)|)| ||| |(|undefined|)|↵|#let| |hour|#:| |(|(|string|)| ||| |(|string|)|)| ||| |(|undefined|)|↵|#let| |hour12|#:| |(|(|false|)| ||| |(|true|)|)| ||| |(|undefined|)|↵|#let| |weekday|#:| |(|(|(|string|)| ||| |(|string|)|)| ||| |(|string|)|)| ||| |(|undefined|)|↵|#let| |formatMatcher|#:| |(|(|string|)| ||| |(|string|)|)| ||| |(|undefined|)|↵|#let| |day|#:| |(|(|string|)| ||| |(|string|)|)| ||| |(|undefined|)|↵|#let| |timeZone|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |month|#:| |(|(|(|(|(|string|)| ||| |(|string|)|)| ||| |(|string|)|)| ||| |(|string|)|)| ||| |(|string|)|)| ||| |(|undefined|)|↵|#let| |second|#:| |(|(|string|)| ||| |(|string|)|)| ||| |(|undefined|)|↵|#let| |localeMatcher|#:| |(|(|string|)| ||| |(|string|)|)| ||| |(|undefined|)|↵|#let| |timeZoneName|#:| |(|(|(|(|(|(|string|)| ||| |(|string|)|)| ||| |(|string|)|)| ||| |(|string|)|)| ||| |(|string|)|)| ||| |(|string|)|)| ||| |(|undefined|)|↵|#let| |era|#:| |(|(|(|string|)| ||| |(|string|)|)| ||| |(|string|)|)| ||| |(|undefined|)|←|↵|}|↵|#trait| |ResolvedDateTimeFormatOptions|(||)| |{|→|#let| |numberingSystem|#:| |string|↵|#let| |minute|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |year|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |hour|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |second|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |hour12|#:| |(|(|false|)| ||| |(|true|)|)| ||| |(|undefined|)|↵|#let| |weekday|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |day|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |timeZone|#:| |string|↵|#let| |month|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |locale|#:| |string|↵|#let| |calendar|#:| |string|↵|#let| |timeZoneName|#:| |(|string|)| ||| |(|undefined|)|↵|#let| |era|#:| |(|string|)| ||| |(|undefined|)|←|↵|}|↵|#trait| |DateTimeFormat|(||)| |{|→|#fun| |format|(|date|#:| |(|(|number|)| ||| |(|Date|)|)| ||| |(|undefined|)|)|#:| |string|↵|#fun| |resolvedOptions|(||)|#:| |Intl|.ResolvedDateTimeFormatOptions|←|↵|}|←|↵|}|
//│ Parsed: {let NaN: number; let Infinity: number; fun eval: (x: string,) -> anything; fun parseInt: (string: string, radix: number | undefined,) -> number; fun parseFloat: (string: string,) -> number; fun isNaN: (number: number,) -> bool; fun isFinite: (number: number,) -> bool; fun decodeURI: (encodedURI: string,) -> string; fun decodeURIComponent: (encodedURIComponent: string,) -> string; fun encodeURI: (uri: string,) -> string; fun encodeURIComponent: (uriComponent: string | number | false | true,) -> string; fun escape: (string: string,) -> string; fun unescape: (string: string,) -> string; trait Symbol() {fun toString: () -> string; fun valueOf: () -> Symbol}; type alias PropertyKey(): string | number | Symbol {}; trait PropertyDescriptor() {let configurable: false | true | undefined; let set: anything -> unit | undefined; let enumerable: false | true | undefined; let get: unit -> anything | undefined; let writable: false | true | undefined; let value: anything | undefined}; trait PropertyDescriptorMap() {fun __index: (key: string | number | Symbol,) -> PropertyDescriptor}; trait Object() {fun hasOwnProperty: (v: string | number | Symbol,) -> bool; fun propertyIsEnumerable: (v: string | number | Symbol,) -> bool; fun valueOf: () -> Object; fun toLocaleString: () -> string; let constructor: Function; fun isPrototypeOf: (v: Object,) -> bool; fun toString: () -> string}; let Function: FunctionConstructor; trait FunctionConstructor() {fun __new: (args: MutArray[string],) -> Function; fun __call: (args: MutArray[string],) -> Function; let prototype: Function}; type alias ThisParameterType‹T›(): Unsupported["T extends (this: infer U, ...args: never) => any ? U : unknown", "ts2mls/js/src/test/typescript/ES5.d.ts", 306, 27] {}; type alias OmitThisParameter‹T›(): Unsupported["unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T", "ts2mls/js/src/test/typescript/ES5.d.ts", 311, 27] {}; trait IArguments() {fun __index: (index: number,) -> anything; let length: number; let callee: Function}; trait String() {fun localeCompare: (that: string, locales: string | MutArray[string] | undefined, options: Intl.CollatorOptions | undefined,) -> number}; trait StringConstructor() {fun __new: (value: anything | undefined,) -> String; fun __call: (value: anything | undefined,) -> string; let prototype: String; fun fromCharCode: (codes: MutArray[number],) -> string}; let Boolean: BooleanConstructor; trait BooleanConstructor() {fun __new: (value: anything | undefined,) -> Boolean; fun __call: (value: T | undefined,) -> bool; let prototype: Boolean}; trait Number() {fun toLocaleString: (locales: string | MutArray[string] | undefined, options: Intl.NumberFormatOptions | undefined,) -> string}; trait NumberConstructor() {fun __call: (value: anything | undefined,) -> number; let NaN: number; let MIN_VALUE: number; fun __new: (value: anything | undefined,) -> Number; let NEGATIVE_INFINITY: number; let POSITIVE_INFINITY: number; let MAX_VALUE: number; let prototype: Number}; trait TemplateStringsArray(): ReadonlyArray[string] {let raw: ReadonlyArray[string]}; trait ImportMeta() {}; trait ImportCallOptions() {let assert: ImportAssertions | undefined}; trait ImportAssertions() {fun __index: (key: string,) -> string}; let Math: Math; trait Date() {fun toLocaleString: (locales: string | MutArray[string] | undefined, options: Intl.DateTimeFormatOptions | undefined,) -> string; fun toLocaleDateString: (locales: string | MutArray[string] | undefined, options: Intl.DateTimeFormatOptions | undefined,) -> string; fun toLocaleTimeString: (locales: string | MutArray[string] | undefined, options: Intl.DateTimeFormatOptions | undefined,) -> string}; trait DateConstructor() {fun __call: () -> string; fun UTC: (year: number, monthIndex: number, date: number | undefined, hours: number | undefined, minutes: number | undefined, seconds: number | undefined, ms: number | undefined,) -> number; fun __new: (year: number, monthIndex: number, date: number | undefined, hours: number | undefined, minutes: number | undefined, seconds: number | undefined, ms: number | undefined,) -> Date; fun now: () -> number; fun parse: (s: string,) -> number; let prototype: Date}; let RegExp: RegExpConstructor; let Error: ErrorConstructor; trait ErrorConstructor() {fun __new: (message: string | undefined,) -> Error; fun __call: (message: string | undefined,) -> Error; let prototype: Error}; let EvalError: EvalErrorConstructor; trait EvalErrorConstructor(): ErrorConstructor {fun __new: (message: string | undefined,) -> EvalError; fun __call: (message: string | undefined,) -> EvalError; let prototype: EvalError}; let RangeError: RangeErrorConstructor; trait RangeErrorConstructor(): ErrorConstructor {fun __new: (message: string | undefined,) -> RangeError; fun __call: (message: string | undefined,) -> RangeError; let prototype: RangeError}; let ReferenceError: ReferenceErrorConstructor; trait ReferenceErrorConstructor(): ErrorConstructor {fun __new: (message: string | undefined,) -> ReferenceError; fun __call: (message: string | undefined,) -> ReferenceError; let prototype: ReferenceError}; let SyntaxError: SyntaxErrorConstructor; trait SyntaxErrorConstructor(): ErrorConstructor {fun __new: (message: string | undefined,) -> SyntaxError; fun __call: (message: string | undefined,) -> SyntaxError; let prototype: SyntaxError}; let TypeError: TypeErrorConstructor; trait TypeErrorConstructor(): ErrorConstructor {fun __new: (message: string | undefined,) -> TypeError; fun __call: (message: string | undefined,) -> TypeError; let prototype: TypeError}; let URIError: URIErrorConstructor; trait URIErrorConstructor(): ErrorConstructor {fun __new: (message: string | undefined,) -> URIError; fun __call: (message: string | undefined,) -> URIError; let prototype: URIError}; let JSON: JSON; trait ReadonlyArray‹T›() {fun lastIndexOf: (searchElement: T, fromIndex: number | undefined,) -> number; fun every: (predicate: T -> number -> ReadonlyArray[T] -> anything, thisArg: anything | undefined,) -> bool; fun forEach: (callbackfn: T -> number -> ReadonlyArray[T] -> unit, thisArg: anything | undefined,) -> unit; fun filter: (predicate: T -> number -> ReadonlyArray[T] -> anything, thisArg: anything | undefined,) -> MutArray[T]; fun __index: (n: number,) -> T; fun reduceRight: (callbackfn: U -> T -> number -> ReadonlyArray[T] -> U, initialValue: U,) -> U; fun join: (separator: string | undefined,) -> string; fun map: (callbackfn: T -> number -> ReadonlyArray[T] -> U, thisArg: anything | undefined,) -> MutArray[U]; fun concat: (items: MutArray[T | ConcatArray[T]],) -> MutArray[T]; fun toLocaleString: () -> string; fun slice: (start: number | undefined, end: number | undefined,) -> MutArray[T]; fun reduce: (callbackfn: U -> T -> number -> ReadonlyArray[T] -> U, initialValue: U,) -> U; fun toString: () -> string; let length: number; fun some: (predicate: T -> number -> ReadonlyArray[T] -> anything, thisArg: anything | undefined,) -> bool; fun indexOf: (searchElement: T, fromIndex: number | undefined,) -> number}; trait ConcatArray‹T›() {let length: number; fun __index: (n: number,) -> T; fun join: (separator: string | undefined,) -> string; fun slice: (start: number | undefined, end: number | undefined,) -> MutArray[T]}; let Array: ArrayConstructor; trait ArrayConstructor() {fun __new: (items: MutArray[T],) -> MutArray[T]; fun __call: (items: MutArray[T],) -> MutArray[T]; fun isArray: (arg: anything,) -> bool; let prototype: MutArray[anything]}; trait TypedPropertyDescriptor‹T›() {let configurable: false | true | undefined; let set: T -> unit | undefined; let enumerable: false | true | undefined; let get: unit -> T | undefined; let writable: false | true | undefined; let value: T | undefined}; type alias PromiseConstructorLike(): (((T | PromiseLike[T]) -> unit) -> ((anything | undefined) -> unit) -> unit) -> PromiseLike[T] {}; trait ThisType‹T›() {}; let ArrayBuffer: ArrayBufferConstructor; trait ArrayBufferTypes() {let ArrayBuffer: ArrayBuffer}; type alias ArrayBufferLike(): ArrayBuffer {}; trait ArrayBufferConstructor() {let prototype: ArrayBuffer; fun __new: (byteLength: number,) -> ArrayBuffer; fun isView: (arg: anything,) -> bool}; trait ArrayBufferView() {let buffer: ArrayBuffer; let byteLength: number; let byteOffset: number}; let DataView: DataViewConstructor; trait DataViewConstructor() {let prototype: DataView; fun __new: (buffer: ArrayBuffer, byteOffset: number | undefined, byteLength: number | undefined,) -> DataView}; trait Int8Array() {fun valueOf: () -> Int8Array; fun lastIndexOf: (searchElement: number, fromIndex: number | undefined,) -> number; fun every: (predicate: number -> number -> Int8Array -> anything, thisArg: anything | undefined,) -> bool; fun set: (array: ArrayLike[number], offset: number | undefined,) -> unit; fun toLocaleString: () -> string; fun __index: (index: number,) -> number; fun reduceRight: (callbackfn: U -> number -> number -> Int8Array -> U, initialValue: U,) -> U; fun fill: (value: number, start: number | undefined, end: number | undefined,) -> Int8Array; fun sort: (compareFn: number -> number -> number | undefined,) -> Int8Array; let BYTES_PER_ELEMENT: number; fun copyWithin: (target: number, start: number | undefined, end: number | undefined,) -> Int8Array; fun find: (predicate: number -> number -> Int8Array -> bool, thisArg: anything | undefined,) -> number; fun subarray: (begin: number | undefined, end: number | undefined,) -> Int8Array; fun join: (separator: string | undefined,) -> string; fun map: (callbackfn: number -> number -> Int8Array -> number, thisArg: anything | undefined,) -> Int8Array; fun forEach: (callbackfn: number -> number -> Int8Array -> unit, thisArg: anything | undefined,) -> unit; let buffer: ArrayBuffer; fun findIndex: (predicate: number -> number -> Int8Array -> bool, thisArg: anything | undefined,) -> number; fun reverse: () -> Int8Array; fun filter: (predicate: number -> number -> Int8Array -> anything, thisArg: anything | undefined,) -> Int8Array; fun slice: (start: number | undefined, end: number | undefined,) -> Int8Array; let byteLength: number; fun reduce: (callbackfn: U -> number -> number -> Int8Array -> U, initialValue: U,) -> U; fun toString: () -> string; let length: number; fun some: (predicate: number -> number -> Int8Array -> anything, thisArg: anything | undefined,) -> bool; fun indexOf: (searchElement: number, fromIndex: number | undefined,) -> number; let byteOffset: number}; trait Uint8Array() {fun valueOf: () -> Uint8Array; fun lastIndexOf: (searchElement: number, fromIndex: number | undefined,) -> number; fun every: (predicate: number -> number -> Uint8Array -> anything, thisArg: anything | undefined,) -> bool; fun set: (array: ArrayLike[number], offset: number | undefined,) -> unit; fun toLocaleString: () -> string; fun __index: (index: number,) -> number; fun reduceRight: (callbackfn: U -> number -> number -> Uint8Array -> U, initialValue: U,) -> U; fun fill: (value: number, start: number | undefined, end: number | undefined,) -> Uint8Array; fun sort: (compareFn: number -> number -> number | undefined,) -> Uint8Array; let BYTES_PER_ELEMENT: number; fun copyWithin: (target: number, start: number | undefined, end: number | undefined,) -> Uint8Array; fun find: (predicate: number -> number -> Uint8Array -> bool, thisArg: anything | undefined,) -> number; fun subarray: (begin: number | undefined, end: number | undefined,) -> Uint8Array; fun join: (separator: string | undefined,) -> string; fun map: (callbackfn: number -> number -> Uint8Array -> number, thisArg: anything | undefined,) -> Uint8Array; fun forEach: (callbackfn: number -> number -> Uint8Array -> unit, thisArg: anything | undefined,) -> unit; let buffer: ArrayBuffer; fun findIndex: (predicate: number -> number -> Uint8Array -> bool, thisArg: anything | undefined,) -> number; fun reverse: () -> Uint8Array; fun filter: (predicate: number -> number -> Uint8Array -> anything, thisArg: anything | undefined,) -> Uint8Array; fun slice: (start: number | undefined, end: number | undefined,) -> Uint8Array; let byteLength: number; fun reduce: (callbackfn: U -> number -> number -> Uint8Array -> U, initialValue: U,) -> U; fun toString: () -> string; let length: number; fun some: (predicate: number -> number -> Uint8Array -> anything, thisArg: anything | undefined,) -> bool; fun indexOf: (searchElement: number, fromIndex: number | undefined,) -> number; let byteOffset: number}; trait Uint8ClampedArray() {fun valueOf: () -> Uint8ClampedArray; fun lastIndexOf: (searchElement: number, fromIndex: number | undefined,) -> number; fun every: (predicate: number -> number -> Uint8ClampedArray -> anything, thisArg: anything | undefined,) -> bool; fun set: (array: ArrayLike[number], offset: number | undefined,) -> unit; fun toLocaleString: () -> string; fun __index: (index: number,) -> number; fun reduceRight: (callbackfn: U -> number -> number -> Uint8ClampedArray -> U, initialValue: U,) -> U; fun fill: (value: number, start: number | undefined, end: number | undefined,) -> Uint8ClampedArray; fun sort: (compareFn: number -> number -> number | undefined,) -> Uint8ClampedArray; let BYTES_PER_ELEMENT: number; fun copyWithin: (target: number, start: number | undefined, end: number | undefined,) -> Uint8ClampedArray; fun find: (predicate: number -> number -> Uint8ClampedArray -> bool, thisArg: anything | undefined,) -> number; fun subarray: (begin: number | undefined, end: number | undefined,) -> Uint8ClampedArray; fun join: (separator: string | undefined,) -> string; fun map: (callbackfn: number -> number -> Uint8ClampedArray -> number, thisArg: anything | undefined,) -> Uint8ClampedArray; fun forEach: (callbackfn: number -> number -> Uint8ClampedArray -> unit, thisArg: anything | undefined,) -> unit; let buffer: ArrayBuffer; fun findIndex: (predicate: number -> number -> Uint8ClampedArray -> bool, thisArg: anything | undefined,) -> number; fun reverse: () -> Uint8ClampedArray; fun filter: (predicate: number -> number -> Uint8ClampedArray -> anything, thisArg: anything | undefined,) -> Uint8ClampedArray; fun slice: (start: number | undefined, end: number | undefined,) -> Uint8ClampedArray; let byteLength: number; fun reduce: (callbackfn: U -> number -> number -> Uint8ClampedArray -> U, initialValue: U,) -> U; fun toString: () -> string; let length: number; fun some: (predicate: number -> number -> Uint8ClampedArray -> anything, thisArg: anything | undefined,) -> bool; fun indexOf: (searchElement: number, fromIndex: number | undefined,) -> number; let byteOffset: number}; trait Int16Array() {fun valueOf: () -> Int16Array; fun lastIndexOf: (searchElement: number, fromIndex: number | undefined,) -> number; fun every: (predicate: number -> number -> Int16Array -> anything, thisArg: anything | undefined,) -> bool; fun set: (array: ArrayLike[number], offset: number | undefined,) -> unit; fun toLocaleString: () -> string; fun __index: (index: number,) -> number; fun reduceRight: (callbackfn: U -> number -> number -> Int16Array -> U, initialValue: U,) -> U; fun fill: (value: number, start: number | undefined, end: number | undefined,) -> Int16Array; fun sort: (compareFn: number -> number -> number | undefined,) -> Int16Array; let BYTES_PER_ELEMENT: number; fun copyWithin: (target: number, start: number | undefined, end: number | undefined,) -> Int16Array; fun find: (predicate: number -> number -> Int16Array -> bool, thisArg: anything | undefined,) -> number; fun subarray: (begin: number | undefined, end: number | undefined,) -> Int16Array; fun join: (separator: string | undefined,) -> string; fun map: (callbackfn: number -> number -> Int16Array -> number, thisArg: anything | undefined,) -> Int16Array; fun forEach: (callbackfn: number -> number -> Int16Array -> unit, thisArg: anything | undefined,) -> unit; let buffer: ArrayBuffer; fun findIndex: (predicate: number -> number -> Int16Array -> bool, thisArg: anything | undefined,) -> number; fun reverse: () -> Int16Array; fun filter: (predicate: number -> number -> Int16Array -> anything, thisArg: anything | undefined,) -> Int16Array; fun slice: (start: number | undefined, end: number | undefined,) -> Int16Array; let byteLength: number; fun reduce: (callbackfn: U -> number -> number -> Int16Array -> U, initialValue: U,) -> U; fun toString: () -> string; let length: number; fun some: (predicate: number -> number -> Int16Array -> anything, thisArg: anything | undefined,) -> bool; fun indexOf: (searchElement: number, fromIndex: number | undefined,) -> number; let byteOffset: number}; trait Uint16Array() {fun valueOf: () -> Uint16Array; fun lastIndexOf: (searchElement: number, fromIndex: number | undefined,) -> number; fun every: (predicate: number -> number -> Uint16Array -> anything, thisArg: anything | undefined,) -> bool; fun set: (array: ArrayLike[number], offset: number | undefined,) -> unit; fun toLocaleString: () -> string; fun __index: (index: number,) -> number; fun reduceRight: (callbackfn: U -> number -> number -> Uint16Array -> U, initialValue: U,) -> U; fun fill: (value: number, start: number | undefined, end: number | undefined,) -> Uint16Array; fun sort: (compareFn: number -> number -> number | undefined,) -> Uint16Array; let BYTES_PER_ELEMENT: number; fun copyWithin: (target: number, start: number | undefined, end: number | undefined,) -> Uint16Array; fun find: (predicate: number -> number -> Uint16Array -> bool, thisArg: anything | undefined,) -> number; fun subarray: (begin: number | undefined, end: number | undefined,) -> Uint16Array; fun join: (separator: string | undefined,) -> string; fun map: (callbackfn: number -> number -> Uint16Array -> number, thisArg: anything | undefined,) -> Uint16Array; fun forEach: (callbackfn: number -> number -> Uint16Array -> unit, thisArg: anything | undefined,) -> unit; let buffer: ArrayBuffer; fun findIndex: (predicate: number -> number -> Uint16Array -> bool, thisArg: anything | undefined,) -> number; fun reverse: () -> Uint16Array; fun filter: (predicate: number -> number -> Uint16Array -> anything, thisArg: anything | undefined,) -> Uint16Array; fun slice: (start: number | undefined, end: number | undefined,) -> Uint16Array; let byteLength: number; fun reduce: (callbackfn: U -> number -> number -> Uint16Array -> U, initialValue: U,) -> U; fun toString: () -> string; let length: number; fun some: (predicate: number -> number -> Uint16Array -> anything, thisArg: anything | undefined,) -> bool; fun indexOf: (searchElement: number, fromIndex: number | undefined,) -> number; let byteOffset: number}; trait Int32Array() {fun valueOf: () -> Int32Array; fun lastIndexOf: (searchElement: number, fromIndex: number | undefined,) -> number; fun every: (predicate: number -> number -> Int32Array -> anything, thisArg: anything | undefined,) -> bool; fun set: (array: ArrayLike[number], offset: number | undefined,) -> unit; fun toLocaleString: () -> string; fun __index: (index: number,) -> number; fun reduceRight: (callbackfn: U -> number -> number -> Int32Array -> U, initialValue: U,) -> U; fun fill: (value: number, start: number | undefined, end: number | undefined,) -> Int32Array; fun sort: (compareFn: number -> number -> number | undefined,) -> Int32Array; let BYTES_PER_ELEMENT: number; fun copyWithin: (target: number, start: number | undefined, end: number | undefined,) -> Int32Array; fun find: (predicate: number -> number -> Int32Array -> bool, thisArg: anything | undefined,) -> number; fun subarray: (begin: number | undefined, end: number | undefined,) -> Int32Array; fun join: (separator: string | undefined,) -> string; fun map: (callbackfn: number -> number -> Int32Array -> number, thisArg: anything | undefined,) -> Int32Array; fun forEach: (callbackfn: number -> number -> Int32Array -> unit, thisArg: anything | undefined,) -> unit; let buffer: ArrayBuffer; fun findIndex: (predicate: number -> number -> Int32Array -> bool, thisArg: anything | undefined,) -> number; fun reverse: () -> Int32Array; fun filter: (predicate: number -> number -> Int32Array -> anything, thisArg: anything | undefined,) -> Int32Array; fun slice: (start: number | undefined, end: number | undefined,) -> Int32Array; let byteLength: number; fun reduce: (callbackfn: U -> number -> number -> Int32Array -> U, initialValue: U,) -> U; fun toString: () -> string; let length: number; fun some: (predicate: number -> number -> Int32Array -> anything, thisArg: anything | undefined,) -> bool; fun indexOf: (searchElement: number, fromIndex: number | undefined,) -> number; let byteOffset: number}; trait Uint32Array() {fun valueOf: () -> Uint32Array; fun lastIndexOf: (searchElement: number, fromIndex: number | undefined,) -> number; fun every: (predicate: number -> number -> Uint32Array -> anything, thisArg: anything | undefined,) -> bool; fun set: (array: ArrayLike[number], offset: number | undefined,) -> unit; fun toLocaleString: () -> string; fun __index: (index: number,) -> number; fun reduceRight: (callbackfn: U -> number -> number -> Uint32Array -> U, initialValue: U,) -> U; fun fill: (value: number, start: number | undefined, end: number | undefined,) -> Uint32Array; fun sort: (compareFn: number -> number -> number | undefined,) -> Uint32Array; let BYTES_PER_ELEMENT: number; fun copyWithin: (target: number, start: number | undefined, end: number | undefined,) -> Uint32Array; fun find: (predicate: number -> number -> Uint32Array -> bool, thisArg: anything | undefined,) -> number; fun subarray: (begin: number | undefined, end: number | undefined,) -> Uint32Array; fun join: (separator: string | undefined,) -> string; fun map: (callbackfn: number -> number -> Uint32Array -> number, thisArg: anything | undefined,) -> Uint32Array; fun forEach: (callbackfn: number -> number -> Uint32Array -> unit, thisArg: anything | undefined,) -> unit; let buffer: ArrayBuffer; fun findIndex: (predicate: number -> number -> Uint32Array -> bool, thisArg: anything | undefined,) -> number; fun reverse: () -> Uint32Array; fun filter: (predicate: number -> number -> Uint32Array -> anything, thisArg: anything | undefined,) -> Uint32Array; fun slice: (start: number | undefined, end: number | undefined,) -> Uint32Array; let byteLength: number; fun reduce: (callbackfn: U -> number -> number -> Uint32Array -> U, initialValue: U,) -> U; fun toString: () -> string; let length: number; fun some: (predicate: number -> number -> Uint32Array -> anything, thisArg: anything | undefined,) -> bool; fun indexOf: (searchElement: number, fromIndex: number | undefined,) -> number; let byteOffset: number}; trait Float32Array() {fun valueOf: () -> Float32Array; fun lastIndexOf: (searchElement: number, fromIndex: number | undefined,) -> number; fun every: (predicate: number -> number -> Float32Array -> anything, thisArg: anything | undefined,) -> bool; fun set: (array: ArrayLike[number], offset: number | undefined,) -> unit; fun toLocaleString: () -> string; fun __index: (index: number,) -> number; fun reduceRight: (callbackfn: U -> number -> number -> Float32Array -> U, initialValue: U,) -> U; fun fill: (value: number, start: number | undefined, end: number | undefined,) -> Float32Array; fun sort: (compareFn: number -> number -> number | undefined,) -> Float32Array; let BYTES_PER_ELEMENT: number; fun copyWithin: (target: number, start: number | undefined, end: number | undefined,) -> Float32Array; fun find: (predicate: number -> number -> Float32Array -> bool, thisArg: anything | undefined,) -> number; fun subarray: (begin: number | undefined, end: number | undefined,) -> Float32Array; fun join: (separator: string | undefined,) -> string; fun map: (callbackfn: number -> number -> Float32Array -> number, thisArg: anything | undefined,) -> Float32Array; fun forEach: (callbackfn: number -> number -> Float32Array -> unit, thisArg: anything | undefined,) -> unit; let buffer: ArrayBuffer; fun findIndex: (predicate: number -> number -> Float32Array -> bool, thisArg: anything | undefined,) -> number; fun reverse: () -> Float32Array; fun filter: (predicate: number -> number -> Float32Array -> anything, thisArg: anything | undefined,) -> Float32Array; fun slice: (start: number | undefined, end: number | undefined,) -> Float32Array; let byteLength: number; fun reduce: (callbackfn: U -> number -> number -> Float32Array -> U, initialValue: U,) -> U; fun toString: () -> string; let length: number; fun some: (predicate: number -> number -> Float32Array -> anything, thisArg: anything | undefined,) -> bool; fun indexOf: (searchElement: number, fromIndex: number | undefined,) -> number; let byteOffset: number}; trait Float64Array() {fun valueOf: () -> Float64Array; fun lastIndexOf: (searchElement: number, fromIndex: number | undefined,) -> number; fun every: (predicate: number -> number -> Float64Array -> anything, thisArg: anything | undefined,) -> bool; fun set: (array: ArrayLike[number], offset: number | undefined,) -> unit; fun __index: (index: number,) -> number; fun reduceRight: (callbackfn: U -> number -> number -> Float64Array -> U, initialValue: U,) -> U; fun fill: (value: number, start: number | undefined, end: number | undefined,) -> Float64Array; fun sort: (compareFn: number -> number -> number | undefined,) -> Float64Array; let BYTES_PER_ELEMENT: number; fun copyWithin: (target: number, start: number | undefined, end: number | undefined,) -> Float64Array; fun find: (predicate: number -> number -> Float64Array -> bool, thisArg: anything | undefined,) -> number; fun subarray: (begin: number | undefined, end: number | undefined,) -> Float64Array; fun join: (separator: string | undefined,) -> string; fun map: (callbackfn: number -> number -> Float64Array -> number, thisArg: anything | undefined,) -> Float64Array; fun forEach: (callbackfn: number -> number -> Float64Array -> unit, thisArg: anything | undefined,) -> unit; let buffer: ArrayBuffer; fun findIndex: (predicate: number -> number -> Float64Array -> bool, thisArg: anything | undefined,) -> number; fun reverse: () -> Float64Array; fun filter: (predicate: number -> number -> Float64Array -> anything, thisArg: anything | undefined,) -> Float64Array; fun slice: (start: number | undefined, end: number | undefined,) -> Float64Array; let byteLength: number; fun reduce: (callbackfn: U -> number -> number -> Float64Array -> U, initialValue: U,) -> U; fun toString: () -> string; let length: number; fun some: (predicate: number -> number -> Float64Array -> anything, thisArg: anything | undefined,) -> bool; fun indexOf: (searchElement: number, fromIndex: number | undefined,) -> number; let byteOffset: number}; module Intl() {trait CollatorOptions() {let sensitivity: string | undefined; let ignorePunctuation: false | true | undefined; let usage: string | undefined; let localeMatcher: string | undefined; let numeric: false | true | undefined; let caseFirst: string | undefined}; trait ResolvedCollatorOptions() {let sensitivity: string; let ignorePunctuation: bool; let usage: string; let locale: string; let numeric: bool; let caseFirst: string; let collation: string}; trait Collator() {fun compare: (x: string, y: string,) -> number; fun resolvedOptions: () -> Intl.ResolvedCollatorOptions}; trait NumberFormatOptions() {let minimumSignificantDigits: number | undefined; let useGrouping: false | true | undefined; let style: string | undefined; let localeMatcher: string | undefined; let currency: string | undefined; let minimumIntegerDigits: number | undefined; let maximumFractionDigits: number | undefined; let currencySign: string | undefined; let maximumSignificantDigits: number | undefined; let minimumFractionDigits: number | undefined}; trait ResolvedNumberFormatOptions() {let numberingSystem: string; let minimumSignificantDigits: number | undefined; let useGrouping: bool; let style: string; let locale: string; let currency: string | undefined; let minimumIntegerDigits: number; let maximumFractionDigits: number; let maximumSignificantDigits: number | undefined; let minimumFractionDigits: number}; trait NumberFormat() {fun format: (value: number,) -> string; fun resolvedOptions: () -> Intl.ResolvedNumberFormatOptions}; trait DateTimeFormatOptions() {let minute: string | undefined; let year: string | undefined; let hour: string | undefined; let hour12: false | true | undefined; let weekday: string | undefined; let formatMatcher: string | undefined; let day: string | undefined; let timeZone: string | undefined; let month: string | undefined; let second: string | undefined; let localeMatcher: string | undefined; let timeZoneName: string | undefined; let era: string | undefined}; trait ResolvedDateTimeFormatOptions() {let numberingSystem: string; let minute: string | undefined; let year: string | undefined; let hour: string | undefined; let second: string | undefined; let hour12: false | true | undefined; let weekday: string | undefined; let day: string | undefined; let timeZone: string; let month: string | undefined; let locale: string; let calendar: string; let timeZoneName: string | undefined; let era: string | undefined}; trait DateTimeFormat() {fun format: (date: number | Date | undefined,) -> string; fun resolvedOptions: () -> Intl.ResolvedDateTimeFormatOptions}}}
