val NaN: Num
val Infinity: Num
fun eval(x: Str): anything
fun parseInt(string: Str, radix: (Num) | (undefined)): Num
fun parseFloat(string: Str): Num
fun isNaN(number: Num): (false) | (true)
fun isFinite(number: Num): (false) | (true)
fun decodeURI(encodedURI: Str): Str
fun decodeURIComponent(encodedURIComponent: Str): Str
fun encodeURI(uri: Str): Str
fun encodeURIComponent(uriComponent: (((Str) | (Num)) | (false)) | (true)): Str
fun escape(string: Str): Str
fun unescape(string: Str): Str
declare trait Symbol {
  fun toString(): Str
  fun valueOf(): Symbol
}
type PropertyKey = ((Str) | (Num)) | (Symbol)
declare trait PropertyDescriptor {
  val configurable: ((false) | (true)) | (undefined)
  val set: ((args0: anything) => unit) | (undefined)
  val enumerable: ((false) | (true)) | (undefined)
  val get: (() => anything) | (undefined)
  val writable: ((false) | (true)) | (undefined)
  val value: (anything) | (undefined)
}
declare trait PropertyDescriptorMap {
  val __index: unsupported["[key: PropertyKey]: PropertyDescriptor;", "ES5.d.ts", 101, 33]
}
declare class Object {
  fun hasOwnProperty(args0: ((Str) | (Num)) | (Symbol)): (false) | (true)
  fun propertyIsEnumerable(args0: ((Str) | (Num)) | (Symbol)): (false) | (true)
  fun valueOf(): Object
  fun toLocaleString(): Str
  fun isPrototypeOf(args0: Object): (false) | (true)
  fun toString(): Str
}
declare trait ObjectConstructor {
  val __call: unsupported["(value: any): any;", "ES5.d.ts", 139, 12]
  fun getOwnPropertyNames(args0: anything): MutArray[Str]
  fun isFrozen(args0: anything): (false) | (true)
  fun getPrototypeOf(args0: anything): anything
  fun defineProperty[T](args0: T, args1: ((Str) | (Num)) | (Symbol), args2: (PropertyDescriptor) & (ThisType[anything])): T
  val prototype: Object
  fun isSealed(args0: anything): (false) | (true)
  fun defineProperties[T](args0: T, args1: (PropertyDescriptorMap) & (ThisType[anything])): T
  fun preventExtensions[T](args0: T): T
  fun create(args0: Object, args1: (PropertyDescriptorMap) & (ThisType[anything])): anything /* warning: the overload of function create is not supported yet. */
  val freeze: unsupported["freeze<T>(o: T): Readonly<T>;", "ES5.d.ts", 210, 143]
  val __new: unsupported["new(value?: any): Object;", "ES5.d.ts", 137, 29]
  fun getOwnPropertyDescriptor(args0: anything, args1: ((Str) | (Num)) | (Symbol)): PropertyDescriptor
  fun seal[T](args0: T): T
  fun keys(args0: Object): MutArray[Str]
  fun isExtensible(args0: anything): (false) | (true)
}
declare trait Function {
  fun bind(args0: anything, args1: (anything) | (MutArray[anything])): anything
  fun apply(args0: anything, args1: (anything) | (undefined)): anything
  val prototype: anything
  fun call(args0: anything, args1: (anything) | (MutArray[anything])): anything
  fun toString(): Str
  val length: Num
  val caller: Function
  val arguments: anything
}
declare trait FunctionConstructor {
  val __new: unsupported["new(...args: string[]): Function;", "ES5.d.ts", 291, 31]
  val __call: unsupported["(...args: string[]): Function;", "ES5.d.ts", 296, 37]
  val prototype: Function
}
type ThisParameterType = unsupported["type ThisParameterType<T> = T extends (this: infer U, ...args: never) => any ? U : unknown;", "ES5.d.ts", 301, 42]
type OmitThisParameter = unsupported["type OmitThisParameter<T> = unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T;", "ES5.d.ts", 306, 91]
declare trait CallableFunction extends Function {
  fun apply[T, A, R](args0: T, args1: A): R /* warning: the overload of function apply is not supported yet. */
  fun call[T, A, R](args0: T, args1: A): R
  fun bind[T, AX, R](args0: T, args1: (AX) | (MutArray[AX])): (args: (AX) | (MutArray[AX])) => R /* warning: the overload of function bind is not supported yet. */
}
declare trait NewableFunction extends Function {
  fun apply[T, A](args0: T, args1: A): unit /* warning: the overload of function apply is not supported yet. */
  fun call[T, A](args0: T, args1: A): unit
  fun bind[AX, R](args0: anything, args1: (AX) | (MutArray[AX])): (args: (AX) | (MutArray[AX])) => R /* warning: the overload of function bind is not supported yet. */
}
declare trait IArguments {
  val __index: unsupported["[index: number]: any;", "ES5.d.ts", 373, 22]
  val length: Num
  val callee: Function
}
declare trait String {
  fun replace(args0: (Str) | (RegExp), args1: (substring: Str, args: (anything) | (MutArray[anything])) => Str): Str /* warning: the overload of function replace is not supported yet. */
  fun valueOf(): Str
  fun toLocaleUpperCase(args0: ((Str) | (MutArray[Str])) | (undefined)): Str
  fun lastIndexOf(args0: Str, args1: (Num) | (undefined)): Num
  fun localeCompare(args0: Str): Num
  fun toLocaleLowerCase(args0: ((Str) | (MutArray[Str])) | (undefined)): Str
  fun match(args0: (Str) | (RegExp)): RegExpMatchArray
  fun split(args0: (Str) | (RegExp), args1: (Num) | (undefined)): MutArray[Str]
  fun toUpperCase(): Str
  fun indexOf(args0: Str, args1: (Num) | (undefined)): Num
  fun toLowerCase(): Str
  fun concat(args0: (Str) | (MutArray[Str])): Str
  val __index: unsupported["readonly [index: number]: string;", "ES5.d.ts", 498, 22]
  fun charCodeAt(args0: Num): Num
  fun slice(args0: (Num) | (undefined), args1: (Num) | (undefined)): Str
  fun substr(args0: Num, args1: (Num) | (undefined)): Str
  fun toString(): Str
  val length: Num
  fun substring(args0: Num, args1: (Num) | (undefined)): Str
  fun trim(): Str
  fun search(args0: (Str) | (RegExp)): Num
  fun charAt(args0: Num): Str
}
declare trait StringConstructor {
  val __new: unsupported["new(value?: any): String;", "ES5.d.ts", 503, 29]
  val __call: unsupported["(value?: any): string;", "ES5.d.ts", 504, 29]
  val prototype: String
  fun fromCharCode(args0: (Num) | (MutArray[Num])): Str
}
declare class Bool {
  fun valueOf(): (false) | (true)
}
declare trait BooleanConstructor {
  val __new: unsupported["new(value?: any): Bool;", "ES5.d.ts", 520, 30]
  val __call: unsupported["<T>(value?: T): boolean;", "ES5.d.ts", 521, 27]
  val prototype: Bool
}
val Boolean: BooleanConstructor
declare trait Number {
  fun toExponential(args0: (Num) | (undefined)): Str
  fun valueOf(): Num
  fun toString(args0: (Num) | (undefined)): Str
  fun toFixed(args0: (Num) | (undefined)): Str
  fun toPrecision(args0: (Num) | (undefined)): Str
}
declare trait NumberConstructor {
  val __call: unsupported["(value?: any): number;", "ES5.d.ts", 558, 29]
  val NaN: Num
  val MIN_VALUE: Num
  val __new: unsupported["new(value?: any): Number;", "ES5.d.ts", 557, 29]
  val NEGATIVE_INFINITY: Num
  val POSITIVE_INFINITY: Num
  val MAX_VALUE: Num
  val prototype: Number
}
declare trait TemplateStringsArray extends ReadonlyArray[Str] {
  val raw: ReadonlyArray[Str]
}
declare trait ImportMeta {}
declare trait ImportCallOptions {
  val assert: (ImportAssertions) | (undefined)
}
declare trait ImportAssertions {
  val __index: unsupported["[key: string]: string;", "ES5.d.ts", 616, 28]
}
declare trait Math {
  fun random(): Num
  fun asin(args0: Num): Num
  val LOG2E: Num
  fun min(args0: (Num) | (MutArray[Num])): Num
  fun cos(args0: Num): Num
  val LOG10E: Num
  val PI: Num
  fun floor(args0: Num): Num
  val SQRT2: Num
  fun round(args0: Num): Num
  fun sin(args0: Num): Num
  val E: Num
  val LN10: Num
  fun exp(args0: Num): Num
  val LN2: Num
  fun atan(args0: Num): Num
  fun pow(args0: Num, args1: Num): Num
  fun ceil(args0: Num): Num
  fun max(args0: (Num) | (MutArray[Num])): Num
  fun atan2(args0: Num, args1: Num): Num
  fun sqrt(args0: Num): Num
  fun tan(args0: Num): Num
  val SQRT1_2: Num
  fun abs(args0: Num): Num
  fun log(args0: Num): Num
  fun acos(args0: Num): Num
}
declare trait Date {
  fun getUTCMonth(): Num
  fun valueOf(): Num
  fun getUTCMinutes(): Num
  fun setMilliseconds(args0: Num): Num
  fun toLocaleString(): Str
  fun getDate(): Num
  fun getUTCDate(): Num
  fun setDate(args0: Num): Num
  fun setFullYear(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Num
  fun getMinutes(): Num
  fun getFullYear(): Num
  fun setUTCDate(args0: Num): Num
  fun setMinutes(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Num
  fun setTime(args0: Num): Num
  fun toUTCString(): Str
  fun toLocaleDateString(): Str
  fun setUTCMonth(args0: Num, args1: (Num) | (undefined)): Num
  fun setUTCFullYear(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Num
  fun setHours(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined), args3: (Num) | (undefined)): Num
  fun getTime(): Num
  fun setSeconds(args0: Num, args1: (Num) | (undefined)): Num
  fun setUTCSeconds(args0: Num, args1: (Num) | (undefined)): Num
  fun getUTCFullYear(): Num
  fun getUTCHours(): Num
  fun getUTCDay(): Num
  fun setUTCMinutes(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Num
  fun getHours(): Num
  fun toISOString(): Str
  fun toTimeString(): Str
  fun setUTCMilliseconds(args0: Num): Num
  fun getUTCSeconds(): Num
  fun getMilliseconds(): Num
  fun setMonth(args0: Num, args1: (Num) | (undefined)): Num
  fun getDay(): Num
  fun toLocaleTimeString(): Str
  fun getSeconds(): Num
  fun getUTCMilliseconds(): Num
  fun toDateString(): Str
  fun toString(): Str
  fun getMonth(): Num
  fun getTimezoneOffset(): Num
  fun setUTCHours(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined), args3: (Num) | (undefined)): Num
  fun toJSON(args0: (anything) | (undefined)): Str
}
declare trait DateConstructor {
  val __call: unsupported["(): string;", "ES5.d.ts", 898, 128]
  fun UTC(args0: Num, args1: Num, args2: (Num) | (undefined), args3: (Num) | (undefined), args4: (Num) | (undefined), args5: (Num) | (undefined), args6: (Num) | (undefined)): Num
  val __new: unsupported["new(year: number, monthIndex: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;", "ES5.d.ts", 887, 38]
  fun now(): Num
  fun parse(args0: Str): Num
  val prototype: Date
}
declare trait RegExpMatchArray extends Array[Str] {
  val index: (Num) | (undefined)
  val input: (Str) | (undefined)
  val id"0": Str
}
declare trait RegExpExecArray extends Array[Str] {
  val index: Num
  val input: Str
  val id"0": Str
}
declare trait RegExp {
  fun test(args0: Str): (false) | (true)
  val multiline: (false) | (true)
  val source: Str
  fun compile(args0: Str, args1: (Str) | (undefined)): RegExp
  val global: (false) | (true)
  val lastIndex: Num
  val ignoreCase: (false) | (true)
  fun exec(args0: Str): RegExpExecArray
}
declare trait RegExpConstructor {
  val id"$4": Str
  val rightContext: Str
  val lastParen: Str
  val id"$5": Str
  val id"$+": Str
  val __new: unsupported["new(pattern: string, flags?: string): RegExp;", "ES5.d.ts", 987, 42]
  val id"$'": Str
  val id"$&": Str
  val id"$7": Str
  val prototype: RegExp
  val id"$`": Str
  val id"$_": Str
  val __call: unsupported["(pattern: string, flags?: string): RegExp;", "ES5.d.ts", 989, 39]
  val lastMatch: Str
  val id"$9": Str
  val id"$6": Str
  val id"$3": Str
  val id"$2": Str
  val leftContext: Str
  val id"$8": Str
  val id"$1": Str
  val input: Str
}
declare trait Error {
  val name: Str
  val message: Str
  val stack: (Str) | (undefined)
}
declare trait ErrorConstructor {
  val __new: unsupported["new(message?: string): Error;", "ES5.d.ts", 1042, 28]
  val __call: unsupported["(message?: string): Error;", "ES5.d.ts", 1043, 33]
  val prototype: Error
}
declare trait EvalError extends Error {}
val EvalErrorConstructor: unsupported["interface EvalErrorConstructor extends ErrorConstructor {     new(message?: string): EvalError;     (message?: string): EvalError;     readonly prototype: EvalError; }", "ES5.d.ts", 1051, 1]
declare trait RangeError extends Error {}
val RangeErrorConstructor: unsupported["interface RangeErrorConstructor extends ErrorConstructor {     new(message?: string): RangeError;     (message?: string): RangeError;     readonly prototype: RangeError; }", "ES5.d.ts", 1062, 1]
declare trait ReferenceError extends Error {}
val ReferenceErrorConstructor: unsupported["interface ReferenceErrorConstructor extends ErrorConstructor {     new(message?: string): ReferenceError;     (message?: string): ReferenceError;     readonly prototype: ReferenceError; }", "ES5.d.ts", 1073, 1]
declare trait SyntaxError extends Error {}
val SyntaxErrorConstructor: unsupported["interface SyntaxErrorConstructor extends ErrorConstructor {     new(message?: string): SyntaxError;     (message?: string): SyntaxError;     readonly prototype: SyntaxError; }", "ES5.d.ts", 1084, 1]
declare trait TypeError extends Error {}
val TypeErrorConstructor: unsupported["interface TypeErrorConstructor extends ErrorConstructor {     new(message?: string): TypeError;     (message?: string): TypeError;     readonly prototype: TypeError; }", "ES5.d.ts", 1095, 1]
declare trait URIError extends Error {}
val URIErrorConstructor: unsupported["interface URIErrorConstructor extends ErrorConstructor {     new(message?: string): URIError;     (message?: string): URIError;     readonly prototype: URIError; }", "ES5.d.ts", 1106, 1]
declare trait JSON {
  fun parse(args0: Str, args1: ((key: Str, value: anything) => anything) | (undefined)): anything
  fun stringify(args0: anything, args1: (MutArray[(Str) | (Num)]) | (undefined), args2: ((Str) | (Num)) | (undefined)): Str /* warning: the overload of function stringify is not supported yet. */
}
declare trait ReadonlyArray[T] {
  fun lastIndexOf(args0: T, args1: (Num) | (undefined)): Num
  fun every(args0: (value: T, index: Num, array: ReadonlyArray[T]) => anything, args1: (anything) | (undefined)): (false) | (true) /* warning: the overload of function every is not supported yet. */
  fun forEach(args0: (value: T, index: Num, array: ReadonlyArray[T]) => unit, args1: (anything) | (undefined)): unit
  fun filter(args0: (value: T, index: Num, array: ReadonlyArray[T]) => anything, args1: (anything) | (undefined)): MutArray[T] /* warning: the overload of function filter is not supported yet. */
  val __index: unsupported["readonly [n: number]: T;", "ES5.d.ts", 1272, 136]
  fun reduceRight[U](args0: (previousValue: U, currentValue: T, currentIndex: Num, array: ReadonlyArray[T]) => U, args1: U): U /* warning: the overload of function reduceRight is not supported yet. */
  fun join(args0: (Str) | (undefined)): Str
  fun map[U](args0: (value: T, index: Num, array: ReadonlyArray[T]) => U, args1: (anything) | (undefined)): MutArray[U]
  fun concat(args0: ((T) | (ConcatArray[T])) | (MutArray[(T) | (ConcatArray[T])])): MutArray[T] /* warning: the overload of function concat is not supported yet. */
  fun toLocaleString(): Str
  fun slice(args0: (Num) | (undefined), args1: (Num) | (undefined)): MutArray[T]
  fun reduce[U](args0: (previousValue: U, currentValue: T, currentIndex: Num, array: ReadonlyArray[T]) => U, args1: U): U /* warning: the overload of function reduce is not supported yet. */
  fun toString(): Str
  val length: Num
  fun some(args0: (value: T, index: Num, array: ReadonlyArray[T]) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun indexOf(args0: T, args1: (Num) | (undefined)): Num
}
declare trait ConcatArray[T] {
  val length: Num
  val __index: unsupported["readonly [n: number]: T;", "ES5.d.ts", 1278, 28]
  fun join(args0: (Str) | (undefined)): Str
  fun slice(args0: (Num) | (undefined), args1: (Num) | (undefined)): MutArray[T]
}
declare trait Array[T] {
  fun lastIndexOf(args0: T, args1: (Num) | (undefined)): Num
  fun every(args0: (value: T, index: Num, array: MutArray[T]) => anything, args1: (anything) | (undefined)): (false) | (true) /* warning: the overload of function every is not supported yet. */
  fun push(args0: (T) | (MutArray[T])): Num
  fun forEach(args0: (value: T, index: Num, array: MutArray[T]) => unit, args1: (anything) | (undefined)): unit
  fun reduceRight[U](args0: (previousValue: U, currentValue: T, currentIndex: Num, array: MutArray[T]) => U, args1: U): U /* warning: the overload of function reduceRight is not supported yet. */
  fun unshift(args0: (T) | (MutArray[T])): Num
  fun sort(args0: ((a: T, b: T) => Num) | (undefined)): Array
  fun join(args0: (Str) | (undefined)): Str
  fun map[U](args0: (value: T, index: Num, array: MutArray[T]) => U, args1: (anything) | (undefined)): MutArray[U]
  fun pop(): T
  fun shift(): T
  fun concat(args0: ((T) | (ConcatArray[T])) | (MutArray[(T) | (ConcatArray[T])])): MutArray[T] /* warning: the overload of function concat is not supported yet. */
  fun toLocaleString(): Str
  fun reverse(): MutArray[T]
  fun filter(args0: (value: T, index: Num, array: MutArray[T]) => anything, args1: (anything) | (undefined)): MutArray[T] /* warning: the overload of function filter is not supported yet. */
  val __index: unsupported["[n: number]: T;", "ES5.d.ts", 1463, 127]
  fun splice(args0: Num, args1: Num, args2: (T) | (MutArray[T])): MutArray[T] /* warning: the overload of function splice is not supported yet. */
  fun slice(args0: (Num) | (undefined), args1: (Num) | (undefined)): MutArray[T]
  fun reduce[U](args0: (previousValue: U, currentValue: T, currentIndex: Num, array: MutArray[T]) => U, args1: U): U /* warning: the overload of function reduce is not supported yet. */
  fun toString(): Str
  val length: Num
  fun some(args0: (value: T, index: Num, array: MutArray[T]) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun indexOf(args0: T, args1: (Num) | (undefined)): Num
}
declare trait ArrayConstructor {
  val __new: unsupported["new <T>(...items: T[]): T[];", "ES5.d.ts", 1470, 38]
  val __call: unsupported["<T>(...items: T[]): T[];", "ES5.d.ts", 1473, 34]
  fun isArray(args0: anything): (false) | (true)
  val prototype: MutArray[anything]
}
declare trait TypedPropertyDescriptor[T] {
  val configurable: ((false) | (true)) | (undefined)
  val set: ((value: T) => unit) | (undefined)
  val enumerable: ((false) | (true)) | (undefined)
  val get: (() => T) | (undefined)
  val writable: ((false) | (true)) | (undefined)
  val value: (T) | (undefined)
}
type PromiseConstructorLike = unsupported["declare type PromiseConstructorLike = new <T>(executor: (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;", "ES5.d.ts", 1488, 1]
declare trait PromiseLike[T] {
  fun id"then"[TResult1, TResult2](args0: ((value: T) => (TResult1) | (PromiseLike[TResult1])) | (undefined), args1: ((reason: anything) => (TResult2) | (PromiseLike[TResult2])) | (undefined)): PromiseLike[(TResult1) | (TResult2)]
}
declare trait Promise[T] {
  fun id"then"[TResult1, TResult2](args0: ((value: T) => (TResult1) | (PromiseLike[TResult1])) | (undefined), args1: ((reason: anything) => (TResult2) | (PromiseLike[TResult2])) | (undefined)): Promise[(TResult1) | (TResult2)]
  fun catch[TResult](args0: ((reason: anything) => (TResult) | (PromiseLike[TResult])) | (undefined)): Promise[(T) | (TResult)]
}
type Awaited = unsupported["type Awaited<T> =     T extends null | undefined ? T : // special case for `null | undefined` when not in `--strictNullChecks` mode         T extends object & { then(onfulfilled: infer F, ...args: infer _): any } ? // `await` only unwraps object types with a callable `then`. Non-object types are not unwrapped             F extends ((value: infer V, ...args: infer _) => any) ? // if the argument to `then` is callable, extracts the first argument                 Awaited<V> : // recursively unwrap the value                 never : // the argument to `then` was not callable         T;", "ES5.d.ts", 1520, 1]
declare trait ArrayLike[T] {
  val length: Num
  val __index: unsupported["readonly [n: number]: T;", "ES5.d.ts", 1534, 28]
}
type Partial = unsupported["type Partial<T> = {     [P in keyof T]?: T[P]; };", "ES5.d.ts", 1536, 1]
type Required = unsupported["type Required<T> = {     [P in keyof T]-?: T[P]; };", "ES5.d.ts", 1543, 2]
type Readonly = unsupported["type Readonly<T> = {     readonly [P in keyof T]: T[P]; };", "ES5.d.ts", 1550, 2]
type Pick = unsupported["type Pick<T, K extends keyof T> = {     [P in K]: T[P]; };", "ES5.d.ts", 1557, 2]
type Record = unsupported["type Record<K extends keyof any, T> = {     [P in K]: T; };", "ES5.d.ts", 1564, 2]
type Exclude = unsupported["type Exclude<T, U> = T extends U ? never : T;", "ES5.d.ts", 1571, 2]
type Extract = unsupported["type Extract<T, U> = T extends U ? T : never;", "ES5.d.ts", 1576, 45]
type Omit = unsupported["type Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;", "ES5.d.ts", 1581, 45]
type NonNullable[T] = (T) & ({})
type Parameters = unsupported["type Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;", "ES5.d.ts", 1591, 29]
type ConstructorParameters = unsupported["type ConstructorParameters<T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never;", "ES5.d.ts", 1596, 99]
type ReturnType = unsupported["type ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;", "ES5.d.ts", 1601, 136]
type InstanceType = unsupported["type InstanceType<T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any;", "ES5.d.ts", 1606, 97]
type Uppercase = unsupported["type Uppercase<S extends string> = intrinsic;", "ES5.d.ts", 1611, 125]
type Lowercase = unsupported["type Lowercase<S extends string> = intrinsic;", "ES5.d.ts", 1616, 45]
type Capitalize = unsupported["type Capitalize<S extends string> = intrinsic;", "ES5.d.ts", 1621, 45]
type Uncapitalize = unsupported["type Uncapitalize<S extends string> = intrinsic;", "ES5.d.ts", 1626, 46]
declare trait ThisType[T] {}
declare trait ArrayBuffer {
  val byteLength: Num
  fun slice(args0: Num, args1: (Num) | (undefined)): ArrayBuffer
}
declare trait ArrayBufferTypes {
  val ArrayBuffer: unsupported["ArrayBuffer: ArrayBuffer;", "ES5.d.ts", 1659, 28]
}
type ArrayBufferLike = ArrayBuffer
declare trait ArrayBufferConstructor {
  val prototype: ArrayBuffer
  val __new: unsupported["new(byteLength: number): ArrayBuffer;", "ES5.d.ts", 1665, 36]
  fun isView(args0: anything): (false) | (true)
}
declare trait ArrayBufferView {
  val buffer: ArrayBuffer
  val byteLength: Num
  val byteOffset: Num
}
declare trait DataView {
  fun setInt32(args0: Num, args1: Num, args2: ((false) | (true)) | (undefined)): unit
  fun setUint32(args0: Num, args1: Num, args2: ((false) | (true)) | (undefined)): unit
  fun setFloat64(args0: Num, args1: Num, args2: ((false) | (true)) | (undefined)): unit
  fun getInt8(args0: Num): Num
  val buffer: ArrayBuffer
  fun setInt16(args0: Num, args1: Num, args2: ((false) | (true)) | (undefined)): unit
  fun getUint8(args0: Num): Num
  val byteLength: Num
  fun getFloat64(args0: Num, args1: ((false) | (true)) | (undefined)): Num
  fun getFloat32(args0: Num, args1: ((false) | (true)) | (undefined)): Num
  fun getUint16(args0: Num, args1: ((false) | (true)) | (undefined)): Num
  fun setInt8(args0: Num, args1: Num): unit
  fun setUint16(args0: Num, args1: Num, args2: ((false) | (true)) | (undefined)): unit
  fun setFloat32(args0: Num, args1: Num, args2: ((false) | (true)) | (undefined)): unit
  fun getUint32(args0: Num, args1: ((false) | (true)) | (undefined)): Num
  fun getInt32(args0: Num, args1: ((false) | (true)) | (undefined)): Num
  fun getInt16(args0: Num, args1: ((false) | (true)) | (undefined)): Num
  fun setUint8(args0: Num, args1: Num): unit
  val byteOffset: Num
}
declare trait DataViewConstructor {
  val prototype: DataView
  val __new: unsupported["new(buffer: ArrayBufferLike, byteOffset?: number, byteLength?: number): DataView;", "ES5.d.ts", 1817, 33]
}
declare trait Int8Array {
  fun valueOf(): Int8Array
  fun lastIndexOf(args0: Num, args1: (Num) | (undefined)): Num
  fun every(args0: (value: Num, index: Num, array: Int8Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun set(args0: ArrayLike[Num], args1: (Num) | (undefined)): unit
  fun toLocaleString(): Str
  val __index: unsupported["[index: number]: number;", "ES5.d.ts", 2065, 25]
  fun reduceRight[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Int8Array) => U, args1: U): U /* warning: the overload of function reduceRight is not supported yet. */
  fun fill(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Int8Array
  fun sort(args0: ((a: Num, b: Num) => Num) | (undefined)): Int8Array
  val BYTES_PER_ELEMENT: Num
  fun copyWithin(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Int8Array
  fun find(args0: (value: Num, index: Num, obj: Int8Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun subarray(args0: (Num) | (undefined), args1: (Num) | (undefined)): Int8Array
  fun join(args0: (Str) | (undefined)): Str
  fun map(args0: (value: Num, index: Num, array: Int8Array) => Num, args1: (anything) | (undefined)): Int8Array
  fun forEach(args0: (value: Num, index: Num, array: Int8Array) => unit, args1: (anything) | (undefined)): unit
  val buffer: ArrayBuffer
  fun findIndex(args0: (value: Num, index: Num, obj: Int8Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun reverse(): Int8Array
  fun filter(args0: (value: Num, index: Num, array: Int8Array) => anything, args1: (anything) | (undefined)): Int8Array
  fun slice(args0: (Num) | (undefined), args1: (Num) | (undefined)): Int8Array
  val byteLength: Num
  fun reduce[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Int8Array) => U, args1: U): U /* warning: the overload of function reduce is not supported yet. */
  fun toString(): Str
  val length: Num
  fun some(args0: (value: Num, index: Num, array: Int8Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun indexOf(args0: Num, args1: (Num) | (undefined)): Num
  val byteOffset: Num
}
declare trait Int8ArrayConstructor {
  val __new: unsupported["new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int8Array;", "ES5.d.ts", 2072, 63]
  fun from[T](args0: ArrayLike[T], args1: (v: T, k: Num) => Num, args2: (anything) | (undefined)): Int8Array /* warning: the overload of function from is not supported yet. */
  val prototype: Int8Array
  fun id"of"(args0: (Num) | (MutArray[Num])): Int8Array
  val BYTES_PER_ELEMENT: Num
}
declare trait Uint8Array {
  fun valueOf(): Uint8Array
  fun lastIndexOf(args0: Num, args1: (Num) | (undefined)): Num
  fun every(args0: (value: Num, index: Num, array: Uint8Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun set(args0: ArrayLike[Num], args1: (Num) | (undefined)): unit
  fun toLocaleString(): Str
  val __index: unsupported["[index: number]: number;", "ES5.d.ts", 2347, 26]
  fun reduceRight[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Uint8Array) => U, args1: U): U /* warning: the overload of function reduceRight is not supported yet. */
  fun fill(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Uint8Array
  fun sort(args0: ((a: Num, b: Num) => Num) | (undefined)): Uint8Array
  val BYTES_PER_ELEMENT: Num
  fun copyWithin(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Uint8Array
  fun find(args0: (value: Num, index: Num, obj: Uint8Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun subarray(args0: (Num) | (undefined), args1: (Num) | (undefined)): Uint8Array
  fun join(args0: (Str) | (undefined)): Str
  fun map(args0: (value: Num, index: Num, array: Uint8Array) => Num, args1: (anything) | (undefined)): Uint8Array
  fun forEach(args0: (value: Num, index: Num, array: Uint8Array) => unit, args1: (anything) | (undefined)): unit
  val buffer: ArrayBuffer
  fun findIndex(args0: (value: Num, index: Num, obj: Uint8Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun reverse(): Uint8Array
  fun filter(args0: (value: Num, index: Num, array: Uint8Array) => anything, args1: (anything) | (undefined)): Uint8Array
  fun slice(args0: (Num) | (undefined), args1: (Num) | (undefined)): Uint8Array
  val byteLength: Num
  fun reduce[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Uint8Array) => U, args1: U): U /* warning: the overload of function reduce is not supported yet. */
  fun toString(): Str
  val length: Num
  fun some(args0: (value: Num, index: Num, array: Uint8Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun indexOf(args0: Num, args1: (Num) | (undefined)): Num
  val byteOffset: Num
}
declare trait Uint8ArrayConstructor {
  val __new: unsupported["new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8Array;", "ES5.d.ts", 2355, 64]
  fun from[T](args0: ArrayLike[T], args1: (v: T, k: Num) => Num, args2: (anything) | (undefined)): Uint8Array /* warning: the overload of function from is not supported yet. */
  val prototype: Uint8Array
  fun id"of"(args0: (Num) | (MutArray[Num])): Uint8Array
  val BYTES_PER_ELEMENT: Num
}
declare trait Uint8ClampedArray {
  fun valueOf(): Uint8ClampedArray
  fun lastIndexOf(args0: Num, args1: (Num) | (undefined)): Num
  fun every(args0: (value: Num, index: Num, array: Uint8ClampedArray) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun set(args0: ArrayLike[Num], args1: (Num) | (undefined)): unit
  fun toLocaleString(): Str
  val __index: unsupported["[index: number]: number;", "ES5.d.ts", 2629, 33]
  fun reduceRight[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Uint8ClampedArray) => U, args1: U): U /* warning: the overload of function reduceRight is not supported yet. */
  fun fill(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Uint8ClampedArray
  fun sort(args0: ((a: Num, b: Num) => Num) | (undefined)): Uint8ClampedArray
  val BYTES_PER_ELEMENT: Num
  fun copyWithin(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Uint8ClampedArray
  fun find(args0: (value: Num, index: Num, obj: Uint8ClampedArray) => (false) | (true), args1: (anything) | (undefined)): Num
  fun subarray(args0: (Num) | (undefined), args1: (Num) | (undefined)): Uint8ClampedArray
  fun join(args0: (Str) | (undefined)): Str
  fun map(args0: (value: Num, index: Num, array: Uint8ClampedArray) => Num, args1: (anything) | (undefined)): Uint8ClampedArray
  fun forEach(args0: (value: Num, index: Num, array: Uint8ClampedArray) => unit, args1: (anything) | (undefined)): unit
  val buffer: ArrayBuffer
  fun findIndex(args0: (value: Num, index: Num, obj: Uint8ClampedArray) => (false) | (true), args1: (anything) | (undefined)): Num
  fun reverse(): Uint8ClampedArray
  fun filter(args0: (value: Num, index: Num, array: Uint8ClampedArray) => anything, args1: (anything) | (undefined)): Uint8ClampedArray
  fun slice(args0: (Num) | (undefined), args1: (Num) | (undefined)): Uint8ClampedArray
  val byteLength: Num
  fun reduce[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Uint8ClampedArray) => U, args1: U): U /* warning: the overload of function reduce is not supported yet. */
  fun toString(): Str
  val length: Num
  fun some(args0: (value: Num, index: Num, array: Uint8ClampedArray) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun indexOf(args0: Num, args1: (Num) | (undefined)): Num
  val byteOffset: Num
}
declare trait Uint8ClampedArrayConstructor {
  val __new: unsupported["new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8ClampedArray;", "ES5.d.ts", 2637, 71]
  fun from[T](args0: ArrayLike[T], args1: (v: T, k: Num) => Num, args2: (anything) | (undefined)): Uint8ClampedArray /* warning: the overload of function from is not supported yet. */
  val prototype: Uint8ClampedArray
  fun id"of"(args0: (Num) | (MutArray[Num])): Uint8ClampedArray
  val BYTES_PER_ELEMENT: Num
}
declare trait Int16Array {
  fun valueOf(): Int16Array
  fun lastIndexOf(args0: Num, args1: (Num) | (undefined)): Num
  fun every(args0: (value: Num, index: Num, array: Int16Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun set(args0: ArrayLike[Num], args1: (Num) | (undefined)): unit
  fun toLocaleString(): Str
  val __index: unsupported["[index: number]: number;", "ES5.d.ts", 2909, 26]
  fun reduceRight[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Int16Array) => U, args1: U): U /* warning: the overload of function reduceRight is not supported yet. */
  fun fill(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Int16Array
  fun sort(args0: ((a: Num, b: Num) => Num) | (undefined)): Int16Array
  val BYTES_PER_ELEMENT: Num
  fun copyWithin(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Int16Array
  fun find(args0: (value: Num, index: Num, obj: Int16Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun subarray(args0: (Num) | (undefined), args1: (Num) | (undefined)): Int16Array
  fun join(args0: (Str) | (undefined)): Str
  fun map(args0: (value: Num, index: Num, array: Int16Array) => Num, args1: (anything) | (undefined)): Int16Array
  fun forEach(args0: (value: Num, index: Num, array: Int16Array) => unit, args1: (anything) | (undefined)): unit
  val buffer: ArrayBuffer
  fun findIndex(args0: (value: Num, index: Num, obj: Int16Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun reverse(): Int16Array
  fun filter(args0: (value: Num, index: Num, array: Int16Array) => anything, args1: (anything) | (undefined)): Int16Array
  fun slice(args0: (Num) | (undefined), args1: (Num) | (undefined)): Int16Array
  val byteLength: Num
  fun reduce[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Int16Array) => U, args1: U): U /* warning: the overload of function reduce is not supported yet. */
  fun toString(): Str
  val length: Num
  fun some(args0: (value: Num, index: Num, array: Int16Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun indexOf(args0: Num, args1: (Num) | (undefined)): Num
  val byteOffset: Num
}
declare trait Int16ArrayConstructor {
  val __new: unsupported["new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int16Array;", "ES5.d.ts", 2917, 64]
  fun from[T](args0: ArrayLike[T], args1: (v: T, k: Num) => Num, args2: (anything) | (undefined)): Int16Array /* warning: the overload of function from is not supported yet. */
  val prototype: Int16Array
  fun id"of"(args0: (Num) | (MutArray[Num])): Int16Array
  val BYTES_PER_ELEMENT: Num
}
declare trait Uint16Array {
  fun valueOf(): Uint16Array
  fun lastIndexOf(args0: Num, args1: (Num) | (undefined)): Num
  fun every(args0: (value: Num, index: Num, array: Uint16Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun set(args0: ArrayLike[Num], args1: (Num) | (undefined)): unit
  fun toLocaleString(): Str
  val __index: unsupported["[index: number]: number;", "ES5.d.ts", 3192, 27]
  fun reduceRight[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Uint16Array) => U, args1: U): U /* warning: the overload of function reduceRight is not supported yet. */
  fun fill(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Uint16Array
  fun sort(args0: ((a: Num, b: Num) => Num) | (undefined)): Uint16Array
  val BYTES_PER_ELEMENT: Num
  fun copyWithin(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Uint16Array
  fun find(args0: (value: Num, index: Num, obj: Uint16Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun subarray(args0: (Num) | (undefined), args1: (Num) | (undefined)): Uint16Array
  fun join(args0: (Str) | (undefined)): Str
  fun map(args0: (value: Num, index: Num, array: Uint16Array) => Num, args1: (anything) | (undefined)): Uint16Array
  fun forEach(args0: (value: Num, index: Num, array: Uint16Array) => unit, args1: (anything) | (undefined)): unit
  val buffer: ArrayBuffer
  fun findIndex(args0: (value: Num, index: Num, obj: Uint16Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun reverse(): Uint16Array
  fun filter(args0: (value: Num, index: Num, array: Uint16Array) => anything, args1: (anything) | (undefined)): Uint16Array
  fun slice(args0: (Num) | (undefined), args1: (Num) | (undefined)): Uint16Array
  val byteLength: Num
  fun reduce[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Uint16Array) => U, args1: U): U /* warning: the overload of function reduce is not supported yet. */
  fun toString(): Str
  val length: Num
  fun some(args0: (value: Num, index: Num, array: Uint16Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun indexOf(args0: Num, args1: (Num) | (undefined)): Num
  val byteOffset: Num
}
declare trait Uint16ArrayConstructor {
  val __new: unsupported["new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint16Array;", "ES5.d.ts", 3200, 65]
  fun from[T](args0: ArrayLike[T], args1: (v: T, k: Num) => Num, args2: (anything) | (undefined)): Uint16Array /* warning: the overload of function from is not supported yet. */
  val prototype: Uint16Array
  fun id"of"(args0: (Num) | (MutArray[Num])): Uint16Array
  val BYTES_PER_ELEMENT: Num
}
declare trait Int32Array {
  fun valueOf(): Int32Array
  fun lastIndexOf(args0: Num, args1: (Num) | (undefined)): Num
  fun every(args0: (value: Num, index: Num, array: Int32Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun set(args0: ArrayLike[Num], args1: (Num) | (undefined)): unit
  fun toLocaleString(): Str
  val __index: unsupported["[index: number]: number;", "ES5.d.ts", 3475, 26]
  fun reduceRight[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Int32Array) => U, args1: U): U /* warning: the overload of function reduceRight is not supported yet. */
  fun fill(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Int32Array
  fun sort(args0: ((a: Num, b: Num) => Num) | (undefined)): Int32Array
  val BYTES_PER_ELEMENT: Num
  fun copyWithin(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Int32Array
  fun find(args0: (value: Num, index: Num, obj: Int32Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun subarray(args0: (Num) | (undefined), args1: (Num) | (undefined)): Int32Array
  fun join(args0: (Str) | (undefined)): Str
  fun map(args0: (value: Num, index: Num, array: Int32Array) => Num, args1: (anything) | (undefined)): Int32Array
  fun forEach(args0: (value: Num, index: Num, array: Int32Array) => unit, args1: (anything) | (undefined)): unit
  val buffer: ArrayBuffer
  fun findIndex(args0: (value: Num, index: Num, obj: Int32Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun reverse(): Int32Array
  fun filter(args0: (value: Num, index: Num, array: Int32Array) => anything, args1: (anything) | (undefined)): Int32Array
  fun slice(args0: (Num) | (undefined), args1: (Num) | (undefined)): Int32Array
  val byteLength: Num
  fun reduce[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Int32Array) => U, args1: U): U /* warning: the overload of function reduce is not supported yet. */
  fun toString(): Str
  val length: Num
  fun some(args0: (value: Num, index: Num, array: Int32Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun indexOf(args0: Num, args1: (Num) | (undefined)): Num
  val byteOffset: Num
}
declare trait Int32ArrayConstructor {
  val __new: unsupported["new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int32Array;", "ES5.d.ts", 3483, 64]
  fun from[T](args0: ArrayLike[T], args1: (v: T, k: Num) => Num, args2: (anything) | (undefined)): Int32Array /* warning: the overload of function from is not supported yet. */
  val prototype: Int32Array
  fun id"of"(args0: (Num) | (MutArray[Num])): Int32Array
  val BYTES_PER_ELEMENT: Num
}
declare trait Uint32Array {
  fun valueOf(): Uint32Array
  fun lastIndexOf(args0: Num, args1: (Num) | (undefined)): Num
  fun every(args0: (value: Num, index: Num, array: Uint32Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun set(args0: ArrayLike[Num], args1: (Num) | (undefined)): unit
  fun toLocaleString(): Str
  val __index: unsupported["[index: number]: number;", "ES5.d.ts", 3756, 27]
  fun reduceRight[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Uint32Array) => U, args1: U): U /* warning: the overload of function reduceRight is not supported yet. */
  fun fill(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Uint32Array
  fun sort(args0: ((a: Num, b: Num) => Num) | (undefined)): Uint32Array
  val BYTES_PER_ELEMENT: Num
  fun copyWithin(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Uint32Array
  fun find(args0: (value: Num, index: Num, obj: Uint32Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun subarray(args0: (Num) | (undefined), args1: (Num) | (undefined)): Uint32Array
  fun join(args0: (Str) | (undefined)): Str
  fun map(args0: (value: Num, index: Num, array: Uint32Array) => Num, args1: (anything) | (undefined)): Uint32Array
  fun forEach(args0: (value: Num, index: Num, array: Uint32Array) => unit, args1: (anything) | (undefined)): unit
  val buffer: ArrayBuffer
  fun findIndex(args0: (value: Num, index: Num, obj: Uint32Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun reverse(): Uint32Array
  fun filter(args0: (value: Num, index: Num, array: Uint32Array) => anything, args1: (anything) | (undefined)): Uint32Array
  fun slice(args0: (Num) | (undefined), args1: (Num) | (undefined)): Uint32Array
  val byteLength: Num
  fun reduce[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Uint32Array) => U, args1: U): U /* warning: the overload of function reduce is not supported yet. */
  fun toString(): Str
  val length: Num
  fun some(args0: (value: Num, index: Num, array: Uint32Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun indexOf(args0: Num, args1: (Num) | (undefined)): Num
  val byteOffset: Num
}
declare trait Uint32ArrayConstructor {
  val __new: unsupported["new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint32Array;", "ES5.d.ts", 3764, 65]
  fun from[T](args0: ArrayLike[T], args1: (v: T, k: Num) => Num, args2: (anything) | (undefined)): Uint32Array /* warning: the overload of function from is not supported yet. */
  val prototype: Uint32Array
  fun id"of"(args0: (Num) | (MutArray[Num])): Uint32Array
  val BYTES_PER_ELEMENT: Num
}
declare trait Float32Array {
  fun valueOf(): Float32Array
  fun lastIndexOf(args0: Num, args1: (Num) | (undefined)): Num
  fun every(args0: (value: Num, index: Num, array: Float32Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun set(args0: ArrayLike[Num], args1: (Num) | (undefined)): unit
  fun toLocaleString(): Str
  val __index: unsupported["[index: number]: number;", "ES5.d.ts", 4038, 28]
  fun reduceRight[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Float32Array) => U, args1: U): U /* warning: the overload of function reduceRight is not supported yet. */
  fun fill(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Float32Array
  fun sort(args0: ((a: Num, b: Num) => Num) | (undefined)): Float32Array
  val BYTES_PER_ELEMENT: Num
  fun copyWithin(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Float32Array
  fun find(args0: (value: Num, index: Num, obj: Float32Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun subarray(args0: (Num) | (undefined), args1: (Num) | (undefined)): Float32Array
  fun join(args0: (Str) | (undefined)): Str
  fun map(args0: (value: Num, index: Num, array: Float32Array) => Num, args1: (anything) | (undefined)): Float32Array
  fun forEach(args0: (value: Num, index: Num, array: Float32Array) => unit, args1: (anything) | (undefined)): unit
  val buffer: ArrayBuffer
  fun findIndex(args0: (value: Num, index: Num, obj: Float32Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun reverse(): Float32Array
  fun filter(args0: (value: Num, index: Num, array: Float32Array) => anything, args1: (anything) | (undefined)): Float32Array
  fun slice(args0: (Num) | (undefined), args1: (Num) | (undefined)): Float32Array
  val byteLength: Num
  fun reduce[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Float32Array) => U, args1: U): U /* warning: the overload of function reduce is not supported yet. */
  fun toString(): Str
  val length: Num
  fun some(args0: (value: Num, index: Num, array: Float32Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun indexOf(args0: Num, args1: (Num) | (undefined)): Num
  val byteOffset: Num
}
declare trait Float32ArrayConstructor {
  val __new: unsupported["new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float32Array;", "ES5.d.ts", 4046, 66]
  fun from[T](args0: ArrayLike[T], args1: (v: T, k: Num) => Num, args2: (anything) | (undefined)): Float32Array /* warning: the overload of function from is not supported yet. */
  val prototype: Float32Array
  fun id"of"(args0: (Num) | (MutArray[Num])): Float32Array
  val BYTES_PER_ELEMENT: Num
}
declare trait Float64Array {
  fun valueOf(): Float64Array
  fun lastIndexOf(args0: Num, args1: (Num) | (undefined)): Num
  fun every(args0: (value: Num, index: Num, array: Float64Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun set(args0: ArrayLike[Num], args1: (Num) | (undefined)): unit
  val __index: unsupported["[index: number]: number;", "ES5.d.ts", 4312, 28]
  fun reduceRight[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Float64Array) => U, args1: U): U /* warning: the overload of function reduceRight is not supported yet. */
  fun fill(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Float64Array
  fun sort(args0: ((a: Num, b: Num) => Num) | (undefined)): Float64Array
  val BYTES_PER_ELEMENT: Num
  fun copyWithin(args0: Num, args1: (Num) | (undefined), args2: (Num) | (undefined)): Float64Array
  fun find(args0: (value: Num, index: Num, obj: Float64Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun subarray(args0: (Num) | (undefined), args1: (Num) | (undefined)): Float64Array
  fun join(args0: (Str) | (undefined)): Str
  fun map(args0: (value: Num, index: Num, array: Float64Array) => Num, args1: (anything) | (undefined)): Float64Array
  fun forEach(args0: (value: Num, index: Num, array: Float64Array) => unit, args1: (anything) | (undefined)): unit
  val buffer: ArrayBuffer
  fun findIndex(args0: (value: Num, index: Num, obj: Float64Array) => (false) | (true), args1: (anything) | (undefined)): Num
  fun reverse(): Float64Array
  fun filter(args0: (value: Num, index: Num, array: Float64Array) => anything, args1: (anything) | (undefined)): Float64Array
  fun slice(args0: (Num) | (undefined), args1: (Num) | (undefined)): Float64Array
  val byteLength: Num
  fun reduce[U](args0: (previousValue: U, currentValue: Num, currentIndex: Num, array: Float64Array) => U, args1: U): U /* warning: the overload of function reduce is not supported yet. */
  fun toString(): Str
  val length: Num
  fun some(args0: (value: Num, index: Num, array: Float64Array) => anything, args1: (anything) | (undefined)): (false) | (true)
  fun indexOf(args0: Num, args1: (Num) | (undefined)): Num
  val byteOffset: Num
}
declare trait Float64ArrayConstructor {
  val __new: unsupported["new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float64Array;", "ES5.d.ts", 4320, 66]
  fun from[T](args0: ArrayLike[T], args1: (v: T, k: Num) => Num, args2: (anything) | (undefined)): Float64Array /* warning: the overload of function from is not supported yet. */
  val prototype: Float64Array
  fun id"of"(args0: (Num) | (MutArray[Num])): Float64Array
  val BYTES_PER_ELEMENT: Num
}
declare module Intl {
  export declare trait CollatorOptions {
    val sensitivity: (Str) | (undefined)
    val ignorePunctuation: ((false) | (true)) | (undefined)
    val usage: (Str) | (undefined)
    val localeMatcher: (Str) | (undefined)
    val numeric: ((false) | (true)) | (undefined)
    val caseFirst: (Str) | (undefined)
  }
  export declare trait ResolvedCollatorOptions {
    val sensitivity: Str
    val ignorePunctuation: (false) | (true)
    val usage: Str
    val locale: Str
    val numeric: (false) | (true)
    val caseFirst: Str
    val collation: Str
  }
  export declare trait Collator {
    fun compare(args0: Str, args1: Str): Num
    fun resolvedOptions(): ResolvedCollatorOptions
  }
  export declare trait NumberFormatOptions {
    val minimumSignificantDigits: (Num) | (undefined)
    val useGrouping: ((false) | (true)) | (undefined)
    val style: (Str) | (undefined)
    val localeMatcher: (Str) | (undefined)
    val currency: (Str) | (undefined)
    val minimumIntegerDigits: (Num) | (undefined)
    val maximumFractionDigits: (Num) | (undefined)
    val currencySign: (Str) | (undefined)
    val maximumSignificantDigits: (Num) | (undefined)
    val minimumFractionDigits: (Num) | (undefined)
  }
  export declare trait ResolvedNumberFormatOptions {
    val numberingSystem: Str
    val minimumSignificantDigits: (Num) | (undefined)
    val useGrouping: (false) | (true)
    val style: Str
    val locale: Str
    val currency: (Str) | (undefined)
    val minimumIntegerDigits: Num
    val maximumFractionDigits: Num
    val maximumSignificantDigits: (Num) | (undefined)
    val minimumFractionDigits: Num
  }
  export declare trait NumberFormat {
    fun format(args0: Num): Str
    fun resolvedOptions(): ResolvedNumberFormatOptions
  }
  export declare trait DateTimeFormatOptions {
    val minute: ((Str) | (Str)) | (undefined)
    val year: ((Str) | (Str)) | (undefined)
    val hour: ((Str) | (Str)) | (undefined)
    val hour12: ((false) | (true)) | (undefined)
    val weekday: (((Str) | (Str)) | (Str)) | (undefined)
    val formatMatcher: ((Str) | (Str)) | (undefined)
    val day: ((Str) | (Str)) | (undefined)
    val timeZone: (Str) | (undefined)
    val month: (((((Str) | (Str)) | (Str)) | (Str)) | (Str)) | (undefined)
    val second: ((Str) | (Str)) | (undefined)
    val localeMatcher: ((Str) | (Str)) | (undefined)
    val timeZoneName: ((((((Str) | (Str)) | (Str)) | (Str)) | (Str)) | (Str)) | (undefined)
    val era: (((Str) | (Str)) | (Str)) | (undefined)
  }
  export declare trait ResolvedDateTimeFormatOptions {
    val numberingSystem: Str
    val minute: (Str) | (undefined)
    val year: (Str) | (undefined)
    val hour: (Str) | (undefined)
    val second: (Str) | (undefined)
    val hour12: ((false) | (true)) | (undefined)
    val weekday: (Str) | (undefined)
    val day: (Str) | (undefined)
    val timeZone: Str
    val month: (Str) | (undefined)
    val locale: Str
    val calendar: Str
    val timeZoneName: (Str) | (undefined)
    val era: (Str) | (undefined)
  }
  export declare trait DateTimeFormat {
    fun format(args0: ((Num) | (Date)) | (undefined)): Str
    fun resolvedOptions(): ResolvedDateTimeFormatOptions
  }
}
