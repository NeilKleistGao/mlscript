:NewParser
:NewDefs
:NoJS
:AllowTypeErrors
let NaN: number
let Infinity: number
fun eval(x: string): anything
fun parseInt(string: string, radix: (number) | (undefined)): number
fun parseFloat(string: string): number
fun isNaN(number: number): (false) | (true)
fun isFinite(number: number): (false) | (true)
fun decodeURI(encodedURI: string): string
fun decodeURIComponent(encodedURIComponent: string): string
fun encodeURI(uri: string): string
fun encodeURIComponent(uriComponent: (((string) | (number)) | (false)) | (true)): string
fun escape(string: string): string
fun unescape(string: string): string
declare trait Symbol() {
  fun toString(): string
  fun valueOf(): Symbol
}
type PropertyKey = ((string) | (number)) | (Symbol)
declare trait PropertyDescriptor() {
  let configurable: ((false) | (true)) | (undefined)
  let set: ((anything) => unit) | (undefined)
  let enumerable: ((false) | (true)) | (undefined)
  let get: (unit => anything) | (undefined)
  let writable: ((false) | (true)) | (undefined)
  let value: (anything) | (undefined)
}
declare trait PropertyDescriptorMap() {
  let __index: Unsupported<"[key: PropertyKey]: PropertyDescriptor;", "ts2mls/js/src/test/typescript/ES5.d.ts", 101, 33>
}
declare trait Object() {
  fun hasOwnProperty(v: ((string) | (number)) | (Symbol)): (false) | (true)
  fun propertyIsEnumerable(v: ((string) | (number)) | (Symbol)): (false) | (true)
  fun valueOf(): Object
  fun toLocaleString(): string
  let constructor: Function
  fun isPrototypeOf(v: Object): (false) | (true)
  fun toString(): string
}
declare trait ObjectConstructor() {
  let __call: Unsupported<"(value: any): any;", "ts2mls/js/src/test/typescript/ES5.d.ts", 139, 12>
  fun getOwnPropertyNames(o: anything): MutArray<string>
  fun isFrozen(o: anything): (false) | (true)
  fun getPrototypeOf(o: anything): anything
  fun defineProperty<T>(o: T, p: ((string) | (number)) | (Symbol), attributes: (PropertyDescriptor) & (ThisType<anything>)): T
  let prototype: Object
  fun isSealed(o: anything): (false) | (true)
  fun defineProperties<T>(o: T, properties: (PropertyDescriptorMap) & (ThisType<anything>)): T
  fun preventExtensions<T>(o: T): T
  let create: ((object) => anything) & ((object) => ((PropertyDescriptorMap) & (ThisType<anything>)) => anything)
  fun freeze<T>(o: T): __type /* warning: the overload of function freeze is not supported yet. */
  let __new: Unsupported<"new(value?: any): Object;", "ts2mls/js/src/test/typescript/ES5.d.ts", 137, 29>
  fun getOwnPropertyDescriptor(o: anything, p: ((string) | (number)) | (Symbol)): PropertyDescriptor
  fun seal<T>(o: T): T
  fun keys(o: object): MutArray<string>
  fun isExtensible(o: anything): (false) | (true)
}
let Function: FunctionConstructor
declare trait FunctionConstructor() {
  let __new: Unsupported<"new(...args: string[]): Function;", "ts2mls/js/src/test/typescript/ES5.d.ts", 292, 31>
  let __call: Unsupported<"(...args: string[]): Function;", "ts2mls/js/src/test/typescript/ES5.d.ts", 297, 37>
  let prototype: Function
}
type ThisParameterType<T> = Unsupported<"T extends (this: infer U, ...args: never) => any ? U : unknown", "ts2mls/js/src/test/typescript/ES5.d.ts", 307, 27>
type OmitThisParameter<T> = Unsupported<"unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T", "ts2mls/js/src/test/typescript/ES5.d.ts", 312, 27>
declare trait CallableFunction() extends Function {
  fun apply<T, A, R>(thisArg: T, args: A): R /* warning: the overload of function apply is not supported yet. */
  fun call<T, A, R>(thisArg: T, args: A): R
  fun bind<T, AX, R>(thisArg: T, args: MutArray<AX>): (MutArray<AX>) => R /* warning: the overload of function bind is not supported yet. */
}
declare trait NewableFunction() extends Function {
  fun apply<T, A>(thisArg: T, args: A): unit /* warning: the overload of function apply is not supported yet. */
  fun call<T, A>(thisArg: T, args: A): unit
  fun bind<AX, R>(thisArg: anything, args: MutArray<AX>): (MutArray<AX>) => R /* warning: the overload of function bind is not supported yet. */
}
declare trait IArguments() {
  let __index: Unsupported<"[index: number]: any;", "ts2mls/js/src/test/typescript/ES5.d.ts", 374, 22>
  let length: number
  let callee: Function
}
declare trait String() {
  fun localeCompare(that: string, locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.CollatorOptions) | (undefined)): number
}
declare trait StringConstructor() {
  let __new: Unsupported<"new(value?: any): String;", "ts2mls/js/src/test/typescript/ES5.d.ts", 504, 29>
  let __call: Unsupported<"(value?: any): string;", "ts2mls/js/src/test/typescript/ES5.d.ts", 505, 29>
  let prototype: String
  fun fromCharCode(codes: MutArray<number>): string
}
let Boolean: BooleanConstructor
declare trait BooleanConstructor() {
  let __new: Unsupported<"new(value?: any): Boolean;", "ts2mls/js/src/test/typescript/ES5.d.ts", 521, 30>
  let __call: Unsupported<"<T>(value?: T): boolean;", "ts2mls/js/src/test/typescript/ES5.d.ts", 522, 30>
  let prototype: Boolean
}
declare trait Number() {
  fun toLocaleString(locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.NumberFormatOptions) | (undefined)): string
}
declare trait NumberConstructor() {
  let __call: Unsupported<"(value?: any): number;", "ts2mls/js/src/test/typescript/ES5.d.ts", 559, 29>
  let NaN: number
  let MIN_VALUE: number
  let __new: Unsupported<"new(value?: any): Number;", "ts2mls/js/src/test/typescript/ES5.d.ts", 558, 29>
  let NEGATIVE_INFINITY: number
  let POSITIVE_INFINITY: number
  let MAX_VALUE: number
  let prototype: Number
}
declare trait TemplateStringsArray() extends ReadonlyArray<string> {
  let raw: ReadonlyArray<string>
}
declare trait ImportMeta() {}
declare trait ImportCallOptions() {
  let assert: (ImportAssertions) | (undefined)
}
declare trait ImportAssertions() {
  let __index: Unsupported<"[key: string]: string;", "ts2mls/js/src/test/typescript/ES5.d.ts", 617, 28>
}
let Math: Math
declare trait Date() {
  fun toLocaleString(locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.DateTimeFormatOptions) | (undefined)): string
  fun toLocaleDateString(locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.DateTimeFormatOptions) | (undefined)): string
  fun toLocaleTimeString(locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.DateTimeFormatOptions) | (undefined)): string
}
declare trait DateConstructor() {
  let __call: Unsupported<"(): string;", "ts2mls/js/src/test/typescript/ES5.d.ts", 899, 128>
  fun UTC(year: number, monthIndex: number, date: (number) | (undefined), hours: (number) | (undefined), minutes: (number) | (undefined), seconds: (number) | (undefined), ms: (number) | (undefined)): number
  let __new: Unsupported<"new(year: number, monthIndex: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;", "ts2mls/js/src/test/typescript/ES5.d.ts", 888, 38>
  fun now(): number
  fun parse(s: string): number
  let prototype: Date
}
declare trait RegExp() {
  fun test(string: string): (false) | (true)
  let multiline: (false) | (true)
  let source: string
  fun compile(pattern: string, flags: (string) | (undefined)): RegExp
  let global: (false) | (true)
  let lastIndex: number
  let ignoreCase: (false) | (true)
  fun exec(string: string): RegExpExecArray
}
let Error: ErrorConstructor
declare trait ErrorConstructor() {
  let __new: Unsupported<"new(message?: string): Error;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1044, 28>
  let __call: Unsupported<"(message?: string): Error;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1045, 33>
  let prototype: Error
}
let EvalError: EvalErrorConstructor
declare trait EvalErrorConstructor() extends ErrorConstructor {
  let __new: Unsupported<"new(message?: string): EvalError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1055, 57>
  let __call: Unsupported<"(message?: string): EvalError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1056, 37>
  let prototype: EvalError
}
let RangeError: RangeErrorConstructor
declare trait RangeErrorConstructor() extends ErrorConstructor {
  let __new: Unsupported<"new(message?: string): RangeError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1066, 58>
  let __call: Unsupported<"(message?: string): RangeError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1067, 38>
  let prototype: RangeError
}
let ReferenceError: ReferenceErrorConstructor
declare trait ReferenceErrorConstructor() extends ErrorConstructor {
  let __new: Unsupported<"new(message?: string): ReferenceError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1077, 62>
  let __call: Unsupported<"(message?: string): ReferenceError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1078, 42>
  let prototype: ReferenceError
}
let SyntaxError: SyntaxErrorConstructor
declare trait SyntaxErrorConstructor() extends ErrorConstructor {
  let __new: Unsupported<"new(message?: string): SyntaxError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1088, 59>
  let __call: Unsupported<"(message?: string): SyntaxError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1089, 39>
  let prototype: SyntaxError
}
let TypeError: TypeErrorConstructor
declare trait TypeErrorConstructor() extends ErrorConstructor {
  let __new: Unsupported<"new(message?: string): TypeError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1099, 57>
  let __call: Unsupported<"(message?: string): TypeError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1100, 37>
  let prototype: TypeError
}
let URIError: URIErrorConstructor
declare trait URIErrorConstructor() extends ErrorConstructor {
  let __new: Unsupported<"new(message?: string): URIError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1110, 56>
  let __call: Unsupported<"(message?: string): URIError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1111, 36>
  let prototype: URIError
}
let JSON: JSON
declare trait ReadonlyArray<T>() {
  fun lastIndexOf(searchElement: T, fromIndex: (number) | (undefined)): number
  fun every(predicate: (T) => (number) => (ReadonlyArray<T>) => anything, thisArg: (anything) | (undefined)): (false) | (true) /* warning: the overload of function every is not supported yet. */
  fun forEach(callbackfn: (T) => (number) => (ReadonlyArray<T>) => unit, thisArg: (anything) | (undefined)): unit
  fun filter(predicate: (T) => (number) => (ReadonlyArray<T>) => anything, thisArg: (anything) | (undefined)): MutArray<T> /* warning: the overload of function filter is not supported yet. */
  let __index: Unsupported<"readonly [n: number]: T;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1274, 136>
  fun reduceRight<U>(callbackfn: (U) => (T) => (number) => (ReadonlyArray<T>) => U, initialValue: U): U /* warning: the overload of function reduceRight is not supported yet. */
  fun join(separator: (string) | (undefined)): string
  fun map<U>(callbackfn: (T) => (number) => (ReadonlyArray<T>) => U, thisArg: (anything) | (undefined)): MutArray<U>
  let concat: ((MutArray<ConcatArray<T>>) => MutArray<T>) & ((MutArray<(T) | (ConcatArray<T>)>) => MutArray<T>)
  fun toLocaleString(): string
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): MutArray<T>
  fun reduce<U>(callbackfn: (U) => (T) => (number) => (ReadonlyArray<T>) => U, initialValue: U): U /* warning: the overload of function reduce is not supported yet. */
  fun toString(): string
  let length: number
  fun some(predicate: (T) => (number) => (ReadonlyArray<T>) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun indexOf(searchElement: T, fromIndex: (number) | (undefined)): number
}
declare trait ConcatArray<T>() {
  let length: number
  let __index: Unsupported<"readonly [n: number]: T;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1280, 28>
  fun join(separator: (string) | (undefined)): string
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): MutArray<T>
}
let Array: ArrayConstructor
declare trait ArrayConstructor() {
  let __new: Unsupported<"new <T>(...items: T[]): T[];", "ts2mls/js/src/test/typescript/ES5.d.ts", 1472, 38>
  let __call: Unsupported<"<T>(...items: T[]): T[];", "ts2mls/js/src/test/typescript/ES5.d.ts", 1475, 34>
  fun isArray(arg: anything): (false) | (true)
  let prototype: MutArray<anything>
}
declare trait TypedPropertyDescriptor<T>() {
  let configurable: ((false) | (true)) | (undefined)
  let set: ((T) => unit) | (undefined)
  let enumerable: ((false) | (true)) | (undefined)
  let get: (unit => T) | (undefined)
  let writable: ((false) | (true)) | (undefined)
  let value: (T) | (undefined)
}
type PromiseConstructorLike = ((((T) | (PromiseLike<T>)) => unit) => (((anything) | (undefined)) => unit) => unit) => PromiseLike<T>
type Awaited<T> = Unsupported<"T extends null | undefined ? T : // special case for `null | undefined` when not in `--strictNullChecks` mode         T extends object & { then(onfulfilled: infer F, ...args: infer _): any } ? // `await` only unwraps object types with a callable `then`. Non-object types are not unwrapped             F extends ((value: infer V, ...args: infer _) => any) ? // if the argument to `then` is callable, extracts the first argument                 Awaited<V> : // recursively unwrap the value                 never : // the argument to `then` was not callable         T", "ts2mls/js/src/test/typescript/ES5.d.ts", 1527, 17>
declare trait ArrayLike<T>() {
  let length: number
  let __index: Unsupported<"readonly [n: number]: T;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1536, 28>
}
type Partial<T> = Unsupported<"{     [P in keyof T]?: T[P]; }", "ts2mls/js/src/test/typescript/ES5.d.ts", 1543, 17>
type Required<T> = Unsupported<"{     [P in keyof T]-?: T[P]; }", "ts2mls/js/src/test/typescript/ES5.d.ts", 1550, 18>
type Readonly<T> = Unsupported<"{     readonly [P in keyof T]: T[P]; }", "ts2mls/js/src/test/typescript/ES5.d.ts", 1557, 18>
type Pick<T, K> = Unsupported<"{     [P in K]: T[P]; }", "ts2mls/js/src/test/typescript/ES5.d.ts", 1564, 33>
type Record<K, T> = Unsupported<"{     [P in K]: T; }", "ts2mls/js/src/test/typescript/ES5.d.ts", 1571, 37>
type Exclude<T, U> = Unsupported<"T extends U ? never : T", "ts2mls/js/src/test/typescript/ES5.d.ts", 1578, 20>
type Extract<T, U> = Unsupported<"T extends U ? T : never", "ts2mls/js/src/test/typescript/ES5.d.ts", 1583, 20>
type Omit<T, K> = __type
type NonNullable<T> = (T) & ({})
type Parameters<T> = Unsupported<"T extends (...args: infer P) => any ? P : never", "ts2mls/js/src/test/typescript/ES5.d.ts", 1598, 50>
type ConstructorParameters<T> = Unsupported<"T extends abstract new (...args: infer P) => any ? P : never", "ts2mls/js/src/test/typescript/ES5.d.ts", 1603, 74>
type ReturnType<T> = Unsupported<"T extends (...args: any) => infer R ? R : any", "ts2mls/js/src/test/typescript/ES5.d.ts", 1608, 50>
type InstanceType<T> = Unsupported<"T extends abstract new (...args: any) => infer R ? R : any", "ts2mls/js/src/test/typescript/ES5.d.ts", 1613, 65>
type Uppercase<S> = Unsupported<"intrinsic", "ts2mls/js/src/test/typescript/ES5.d.ts", 1618, 34>
type Lowercase<S> = Unsupported<"intrinsic", "ts2mls/js/src/test/typescript/ES5.d.ts", 1623, 34>
type Capitalize<S> = Unsupported<"intrinsic", "ts2mls/js/src/test/typescript/ES5.d.ts", 1628, 35>
type Uncapitalize<S> = Unsupported<"intrinsic", "ts2mls/js/src/test/typescript/ES5.d.ts", 1633, 37>
declare trait ThisType<T>() {}
let ArrayBuffer: ArrayBufferConstructor
declare trait ArrayBufferTypes() {
  let ArrayBuffer: ArrayBuffer
}
type ArrayBufferLike = ArrayBuffer
declare trait ArrayBufferConstructor() {
  let prototype: ArrayBuffer
  let __new: Unsupported<"new(byteLength: number): ArrayBuffer;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1667, 36>
  fun isView(arg: anything): (false) | (true)
}
declare trait ArrayBufferView() {
  let buffer: ArrayBuffer
  let byteLength: number
  let byteOffset: number
}
let DataView: DataViewConstructor
declare trait DataViewConstructor() {
  let prototype: DataView
  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, byteLength?: number): DataView;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1819, 33>
}
let Int8Array: Int8ArrayConstructor
declare trait Int8ArrayConstructor() {
  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int8Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 2074, 63>
  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int8Array /* warning: the overload of function from is not supported yet. */
  let prototype: Int8Array
  fun id"of"(items: MutArray<number>): Int8Array
  let BYTES_PER_ELEMENT: number
}
declare trait Uint8Array() {
  fun valueOf(): Uint8Array
  fun lastIndexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  fun every(predicate: (number) => (number) => (Uint8Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun set(array: ArrayLike<number>, offset: (number) | (undefined)): unit
  fun toLocaleString(): string
  let __index: Unsupported<"[index: number]: number;", "ts2mls/js/src/test/typescript/ES5.d.ts", 2349, 26>
  fun reduceRight<U>(callbackfn: (U) => (number) => (number) => (Uint8Array) => U, initialValue: U): U /* warning: the overload of function reduceRight is not supported yet. */
  fun fill(value: number, start: (number) | (undefined), end: (number) | (undefined)): Uint8Array
  fun sort(compareFn: ((number) => (number) => number) | (undefined)): Uint8Array
  let BYTES_PER_ELEMENT: number
  fun copyWithin(target: number, start: (number) | (undefined), end: (number) | (undefined)): Uint8Array
  fun find(predicate: (number) => (number) => (Uint8Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun subarray(begin: (number) | (undefined), end: (number) | (undefined)): Uint8Array
  fun join(separator: (string) | (undefined)): string
  fun map(callbackfn: (number) => (number) => (Uint8Array) => number, thisArg: (anything) | (undefined)): Uint8Array
  fun forEach(callbackfn: (number) => (number) => (Uint8Array) => unit, thisArg: (anything) | (undefined)): unit
  let buffer: ArrayBuffer
  fun findIndex(predicate: (number) => (number) => (Uint8Array) => (false) | (true), thisArg: (anything) | (undefined)): number
  fun reverse(): Uint8Array
  fun filter(predicate: (number) => (number) => (Uint8Array) => anything, thisArg: (anything) | (undefined)): Uint8Array
  fun slice(start: (number) | (undefined), end: (number) | (undefined)): Uint8Array
  let byteLength: number
  fun reduce<U>(callbackfn: (U) => (number) => (number) => (Uint8Array) => U, initialValue: U): U /* warning: the overload of function reduce is not supported yet. */
  fun toString(): string
  let length: number
  fun some(predicate: (number) => (number) => (Uint8Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
  fun indexOf(searchElement: number, fromIndex: (number) | (undefined)): number
  let byteOffset: number
}
declare trait Uint8ArrayConstructor() {
  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 2357, 64>
  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint8Array /* warning: the overload of function from is not supported yet. */
  let prototype: Uint8Array
  fun id"of"(items: MutArray<number>): Uint8Array
  let BYTES_PER_ELEMENT: number
}
let Uint8ClampedArray: Uint8ClampedArrayConstructor
declare trait Uint8ClampedArrayConstructor() {
  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8ClampedArray;", "ts2mls/js/src/test/typescript/ES5.d.ts", 2639, 71>
  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint8ClampedArray /* warning: the overload of function from is not supported yet. */
  let prototype: Uint8ClampedArray
  fun id"of"(items: MutArray<number>): Uint8ClampedArray
  let BYTES_PER_ELEMENT: number
}
let Int16Array: Int16ArrayConstructor
declare trait Int16ArrayConstructor() {
  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int16Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 2919, 64>
  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int16Array /* warning: the overload of function from is not supported yet. */
  let prototype: Int16Array
  fun id"of"(items: MutArray<number>): Int16Array
  let BYTES_PER_ELEMENT: number
}
let Uint16Array: Uint16ArrayConstructor
declare trait Uint16ArrayConstructor() {
  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint16Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 3202, 65>
  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint16Array /* warning: the overload of function from is not supported yet. */
  let prototype: Uint16Array
  fun id"of"(items: MutArray<number>): Uint16Array
  let BYTES_PER_ELEMENT: number
}
let Int32Array: Int32ArrayConstructor
declare trait Int32ArrayConstructor() {
  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int32Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 3485, 64>
  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int32Array /* warning: the overload of function from is not supported yet. */
  let prototype: Int32Array
  fun id"of"(items: MutArray<number>): Int32Array
  let BYTES_PER_ELEMENT: number
}
let Uint32Array: Uint32ArrayConstructor
declare trait Uint32ArrayConstructor() {
  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint32Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 3766, 65>
  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint32Array /* warning: the overload of function from is not supported yet. */
  let prototype: Uint32Array
  fun id"of"(items: MutArray<number>): Uint32Array
  let BYTES_PER_ELEMENT: number
}
let Float32Array: Float32ArrayConstructor
declare trait Float32ArrayConstructor() {
  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float32Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 4048, 66>
  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Float32Array /* warning: the overload of function from is not supported yet. */
  let prototype: Float32Array
  fun id"of"(items: MutArray<number>): Float32Array
  let BYTES_PER_ELEMENT: number
}
let Float64Array: Float64ArrayConstructor
declare trait Float64ArrayConstructor() {
  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float64Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 4322, 66>
  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Float64Array /* warning: the overload of function from is not supported yet. */
  let prototype: Float64Array
  fun id"of"(items: MutArray<number>): Float64Array
  let BYTES_PER_ELEMENT: number
}
declare module Intl {
  declare trait CollatorOptions() {
    let sensitivity: (string) | (undefined)
    let ignorePunctuation: ((false) | (true)) | (undefined)
    let usage: (string) | (undefined)
    let localeMatcher: (string) | (undefined)
    let numeric: ((false) | (true)) | (undefined)
    let caseFirst: (string) | (undefined)
  }
  declare trait ResolvedCollatorOptions() {
    let sensitivity: string
    let ignorePunctuation: (false) | (true)
    let usage: string
    let locale: string
    let numeric: (false) | (true)
    let caseFirst: string
    let collation: string
  }
  declare trait Collator() {
    fun compare(x: string, y: string): number
    fun resolvedOptions(): Intl.ResolvedCollatorOptions
  }
  declare trait NumberFormatOptions() {
    let minimumSignificantDigits: (number) | (undefined)
    let useGrouping: ((false) | (true)) | (undefined)
    let style: (string) | (undefined)
    let localeMatcher: (string) | (undefined)
    let currency: (string) | (undefined)
    let minimumIntegerDigits: (number) | (undefined)
    let maximumFractionDigits: (number) | (undefined)
    let currencySign: (string) | (undefined)
    let maximumSignificantDigits: (number) | (undefined)
    let minimumFractionDigits: (number) | (undefined)
  }
  declare trait ResolvedNumberFormatOptions() {
    let numberingSystem: string
    let minimumSignificantDigits: (number) | (undefined)
    let useGrouping: (false) | (true)
    let style: string
    let locale: string
    let currency: (string) | (undefined)
    let minimumIntegerDigits: number
    let maximumFractionDigits: number
    let maximumSignificantDigits: (number) | (undefined)
    let minimumFractionDigits: number
  }
  declare trait NumberFormat() {
    fun format(value: number): string
    fun resolvedOptions(): Intl.ResolvedNumberFormatOptions
  }
  declare trait DateTimeFormatOptions() {
    let minute: ((string) | (string)) | (undefined)
    let year: ((string) | (string)) | (undefined)
    let hour: ((string) | (string)) | (undefined)
    let hour12: ((false) | (true)) | (undefined)
    let weekday: (((string) | (string)) | (string)) | (undefined)
    let formatMatcher: ((string) | (string)) | (undefined)
    let day: ((string) | (string)) | (undefined)
    let timeZone: (string) | (undefined)
    let month: (((((string) | (string)) | (string)) | (string)) | (string)) | (undefined)
    let second: ((string) | (string)) | (undefined)
    let localeMatcher: ((string) | (string)) | (undefined)
    let timeZoneName: ((((((string) | (string)) | (string)) | (string)) | (string)) | (string)) | (undefined)
    let era: (((string) | (string)) | (string)) | (undefined)
  }
  declare trait ResolvedDateTimeFormatOptions() {
    let numberingSystem: string
    let minute: (string) | (undefined)
    let year: (string) | (undefined)
    let hour: (string) | (undefined)
    let second: (string) | (undefined)
    let hour12: ((false) | (true)) | (undefined)
    let weekday: (string) | (undefined)
    let day: (string) | (undefined)
    let timeZone: string
    let month: (string) | (undefined)
    let locale: string
    let calendar: string
    let timeZoneName: (string) | (undefined)
    let era: (string) | (undefined)
  }
  declare trait DateTimeFormat() {
    fun format(date: ((number) | (Date)) | (undefined)): string
    fun resolvedOptions(): Intl.ResolvedDateTimeFormatOptions
  }
}
//│ ╔══[ERROR] trait Symbol cannot be used as a type
//│ ║  l.20: 	  fun valueOf(): Symbol
//│ ╙──      	                 ^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.18: 	declare trait Symbol() {
//│ ║        	        ^^^^^^^^^^^^^^^^
//│ ║  l.19: 	  fun toString(): string
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.20: 	  fun valueOf(): Symbol
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.21: 	}
//│ ╙──      	^
//│ ╔══[ERROR] trait Symbol cannot be used as a type
//│ ║  l.22: 	type PropertyKey = ((string) | (number)) | (Symbol)
//│ ╙──      	                                           ^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.23: 	declare trait PropertyDescriptor() {
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.24: 	  let configurable: ((false) | (true)) | (undefined)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.25: 	  let set: ((anything) => unit) | (undefined)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.26: 	  let enumerable: ((false) | (true)) | (undefined)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.27: 	  let get: (unit => anything) | (undefined)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.28: 	  let writable: ((false) | (true)) | (undefined)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.29: 	  let value: (anything) | (undefined)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.30: 	}
//│ ╙──      	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.31: 	declare trait PropertyDescriptorMap() {
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.32: 	  let __index: Unsupported<"[key: PropertyKey]: PropertyDescriptor;", "ts2mls/js/src/test/typescript/ES5.d.ts", 101, 33>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.33: 	}
//│ ╙──      	^
//│ ╔══[ERROR] trait Symbol cannot be used as a type
//│ ║  l.35: 	  fun hasOwnProperty(v: ((string) | (number)) | (Symbol)): (false) | (true)
//│ ╙──      	                                                ^^^^^^^^
//│ ╔══[ERROR] trait Symbol cannot be used as a type
//│ ║  l.36: 	  fun propertyIsEnumerable(v: ((string) | (number)) | (Symbol)): (false) | (true)
//│ ╙──      	                                                      ^^^^^^^^
//│ ╔══[ERROR] trait Object cannot be used as a type
//│ ║  l.37: 	  fun valueOf(): Object
//│ ╙──      	                 ^^^^^^
//│ ╔══[ERROR] trait Object cannot be used as a type
//│ ║  l.40: 	  fun isPrototypeOf(v: Object): (false) | (true)
//│ ╙──      	                       ^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.34: 	declare trait Object() {
//│ ║        	        ^^^^^^^^^^^^^^^^
//│ ║  l.35: 	  fun hasOwnProperty(v: ((string) | (number)) | (Symbol)): (false) | (true)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.36: 	  fun propertyIsEnumerable(v: ((string) | (number)) | (Symbol)): (false) | (true)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.37: 	  fun valueOf(): Object
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.38: 	  fun toLocaleString(): string
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.39: 	  let constructor: Function
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.40: 	  fun isPrototypeOf(v: Object): (false) | (true)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.41: 	  fun toString(): string
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.42: 	}
//│ ╙──      	^
//│ ╔══[ERROR] trait Symbol cannot be used as a type
//│ ║  l.48: 	  fun defineProperty<T>(o: T, p: ((string) | (number)) | (Symbol), attributes: (PropertyDescriptor) & (ThisType<anything>)): T
//│ ╙──      	                                                         ^^^^^^^^
//│ ╔══[ERROR] trait PropertyDescriptor cannot be used as a type
//│ ║  l.48: 	  fun defineProperty<T>(o: T, p: ((string) | (number)) | (Symbol), attributes: (PropertyDescriptor) & (ThisType<anything>)): T
//│ ╙──      	                                                                               ^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ThisType cannot be used as a type
//│ ║  l.48: 	  fun defineProperty<T>(o: T, p: ((string) | (number)) | (Symbol), attributes: (PropertyDescriptor) & (ThisType<anything>)): T
//│ ╙──      	                                                                                                      ^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait PropertyDescriptorMap cannot be used as a type
//│ ║  l.51: 	  fun defineProperties<T>(o: T, properties: (PropertyDescriptorMap) & (ThisType<anything>)): T
//│ ╙──      	                                            ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ThisType cannot be used as a type
//│ ║  l.51: 	  fun defineProperties<T>(o: T, properties: (PropertyDescriptorMap) & (ThisType<anything>)): T
//│ ╙──      	                                                                      ^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: __type
//│ ║  l.54: 	  fun freeze<T>(o: T): __type /* warning: the overload of function freeze is not supported yet. */
//│ ╙──      	                       ^^^^^^
//│ ╔══[ERROR] trait Symbol cannot be used as a type
//│ ║  l.56: 	  fun getOwnPropertyDescriptor(o: anything, p: ((string) | (number)) | (Symbol)): PropertyDescriptor
//│ ╙──      	                                                                       ^^^^^^^^
//│ ╔══[ERROR] trait PropertyDescriptor cannot be used as a type
//│ ║  l.56: 	  fun getOwnPropertyDescriptor(o: anything, p: ((string) | (number)) | (Symbol)): PropertyDescriptor
//│ ╙──      	                                                                                  ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait Object cannot be used as a type
//│ ║  l.58: 	  fun keys(o: object): MutArray<string>
//│ ╙──      	              ^^^^^^
//│ ╔══[ERROR] type identifier not found: object
//│ ║  l.58: 	  fun keys(o: object): MutArray<string>
//│ ╙──      	              ^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.43: 	declare trait ObjectConstructor() {
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.44: 	  let __call: Unsupported<"(value: any): any;", "ts2mls/js/src/test/typescript/ES5.d.ts", 139, 12>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.45: 	  fun getOwnPropertyNames(o: anything): MutArray<string>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.46: 	  fun isFrozen(o: anything): (false) | (true)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.47: 	  fun getPrototypeOf(o: anything): anything
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.48: 	  fun defineProperty<T>(o: T, p: ((string) | (number)) | (Symbol), attributes: (PropertyDescriptor) & (ThisType<anything>)): T
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.49: 	  let prototype: Object
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.50: 	  fun isSealed(o: anything): (false) | (true)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.51: 	  fun defineProperties<T>(o: T, properties: (PropertyDescriptorMap) & (ThisType<anything>)): T
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.52: 	  fun preventExtensions<T>(o: T): T
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.53: 	  let create: ((object) => anything) & ((object) => ((PropertyDescriptorMap) & (ThisType<anything>)) => anything)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.54: 	  fun freeze<T>(o: T): __type /* warning: the overload of function freeze is not supported yet. */
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.55: 	  let __new: Unsupported<"new(value?: any): Object;", "ts2mls/js/src/test/typescript/ES5.d.ts", 137, 29>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.56: 	  fun getOwnPropertyDescriptor(o: anything, p: ((string) | (number)) | (Symbol)): PropertyDescriptor
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	  fun seal<T>(o: T): T
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.58: 	  fun keys(o: object): MutArray<string>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.59: 	  fun isExtensible(o: anything): (false) | (true)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.60: 	}
//│ ╙──      	^
//│ ╔══[ERROR] trait FunctionConstructor cannot be used as a type
//│ ║  l.61: 	let Function: FunctionConstructor
//│ ╙──      	              ^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.62: 	declare trait FunctionConstructor() {
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.63: 	  let __new: Unsupported<"new(...args: string[]): Function;", "ts2mls/js/src/test/typescript/ES5.d.ts", 292, 31>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.64: 	  let __call: Unsupported<"(...args: string[]): Function;", "ts2mls/js/src/test/typescript/ES5.d.ts", 297, 37>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.65: 	  let prototype: Function
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.66: 	}
//│ ╙──      	^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.67: 	type ThisParameterType<T> = Unsupported<"T extends (this: infer U, ...args: never) => any ? U : unknown", "ts2mls/js/src/test/typescript/ES5.d.ts", 307, 27>
//│ ╙──      	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.68: 	type OmitThisParameter<T> = Unsupported<"unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T", "ts2mls/js/src/test/typescript/ES5.d.ts", 312, 27>
//│ ╙──      	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.69: 	declare trait CallableFunction() extends Function {
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.70: 	  fun apply<T, A, R>(thisArg: T, args: A): R /* warning: the overload of function apply is not supported yet. */
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.71: 	  fun call<T, A, R>(thisArg: T, args: A): R
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.72: 	  fun bind<T, AX, R>(thisArg: T, args: MutArray<AX>): (MutArray<AX>) => R /* warning: the overload of function bind is not supported yet. */
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.73: 	}
//│ ╙──      	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.74: 	declare trait NewableFunction() extends Function {
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.75: 	  fun apply<T, A>(thisArg: T, args: A): unit /* warning: the overload of function apply is not supported yet. */
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	  fun call<T, A>(thisArg: T, args: A): unit
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.77: 	  fun bind<AX, R>(thisArg: anything, args: MutArray<AX>): (MutArray<AX>) => R /* warning: the overload of function bind is not supported yet. */
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.78: 	}
//│ ╙──      	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.79: 	declare trait IArguments() {
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^
//│ ║  l.80: 	  let __index: Unsupported<"[index: number]: any;", "ts2mls/js/src/test/typescript/ES5.d.ts", 374, 22>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.81: 	  let length: number
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.82: 	  let callee: Function
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.83: 	}
//│ ╙──      	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.374: 	  declare trait CollatorOptions() {
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.375: 	    let sensitivity: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.376: 	    let ignorePunctuation: ((false) | (true)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.377: 	    let usage: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.378: 	    let localeMatcher: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.379: 	    let numeric: ((false) | (true)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    let caseFirst: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.381: 	  }
//│ ╙──       	^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.382: 	  declare trait ResolvedCollatorOptions() {
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.383: 	    let sensitivity: string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.384: 	    let ignorePunctuation: (false) | (true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.385: 	    let usage: string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.386: 	    let locale: string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.387: 	    let numeric: (false) | (true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.388: 	    let caseFirst: string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.389: 	    let collation: string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.390: 	  }
//│ ╙──       	^^^
//│ ╔══[ERROR] Module `Intl` is not supported yet.
//│ ║  l.393: 	    fun resolvedOptions(): Intl.ResolvedCollatorOptions
//│ ╙──       	                               ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.391: 	  declare trait Collator() {
//│ ║         	          ^^^^^^^^^^^^^^^^^^
//│ ║  l.392: 	    fun compare(x: string, y: string): number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.393: 	    fun resolvedOptions(): Intl.ResolvedCollatorOptions
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.394: 	  }
//│ ╙──       	^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.395: 	  declare trait NumberFormatOptions() {
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.396: 	    let minimumSignificantDigits: (number) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.397: 	    let useGrouping: ((false) | (true)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.398: 	    let style: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.399: 	    let localeMatcher: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.400: 	    let currency: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.401: 	    let minimumIntegerDigits: (number) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.402: 	    let maximumFractionDigits: (number) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.403: 	    let currencySign: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.404: 	    let maximumSignificantDigits: (number) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.405: 	    let minimumFractionDigits: (number) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.406: 	  }
//│ ╙──       	^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.407: 	  declare trait ResolvedNumberFormatOptions() {
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.408: 	    let numberingSystem: string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.409: 	    let minimumSignificantDigits: (number) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.410: 	    let useGrouping: (false) | (true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.411: 	    let style: string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.412: 	    let locale: string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.413: 	    let currency: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.414: 	    let minimumIntegerDigits: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.415: 	    let maximumFractionDigits: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.416: 	    let maximumSignificantDigits: (number) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.417: 	    let minimumFractionDigits: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.418: 	  }
//│ ╙──       	^^^
//│ ╔══[ERROR] Module `Intl` is not supported yet.
//│ ║  l.421: 	    fun resolvedOptions(): Intl.ResolvedNumberFormatOptions
//│ ╙──       	                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.419: 	  declare trait NumberFormat() {
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.420: 	    fun format(value: number): string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.421: 	    fun resolvedOptions(): Intl.ResolvedNumberFormatOptions
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.422: 	  }
//│ ╙──       	^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.423: 	  declare trait DateTimeFormatOptions() {
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.424: 	    let minute: ((string) | (string)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.425: 	    let year: ((string) | (string)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.426: 	    let hour: ((string) | (string)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.427: 	    let hour12: ((false) | (true)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.428: 	    let weekday: (((string) | (string)) | (string)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.429: 	    let formatMatcher: ((string) | (string)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.430: 	    let day: ((string) | (string)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.431: 	    let timeZone: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.432: 	    let month: (((((string) | (string)) | (string)) | (string)) | (string)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.433: 	    let second: ((string) | (string)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.434: 	    let localeMatcher: ((string) | (string)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.435: 	    let timeZoneName: ((((((string) | (string)) | (string)) | (string)) | (string)) | (string)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.436: 	    let era: (((string) | (string)) | (string)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.437: 	  }
//│ ╙──       	^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.438: 	  declare trait ResolvedDateTimeFormatOptions() {
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.439: 	    let numberingSystem: string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.440: 	    let minute: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.441: 	    let year: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.442: 	    let hour: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.443: 	    let second: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.444: 	    let hour12: ((false) | (true)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.445: 	    let weekday: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.446: 	    let day: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.447: 	    let timeZone: string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.448: 	    let month: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.449: 	    let locale: string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.450: 	    let calendar: string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.451: 	    let timeZoneName: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.452: 	    let era: (string) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.453: 	  }
//│ ╙──       	^^^
//│ ╔══[ERROR] trait Date cannot be used as a type
//│ ║  l.455: 	    fun format(date: ((number) | (Date)) | (undefined)): string
//│ ╙──       	                                 ^^^^^^
//│ ╔══[ERROR] Module `Intl` is not supported yet.
//│ ║  l.456: 	    fun resolvedOptions(): Intl.ResolvedDateTimeFormatOptions
//│ ╙──       	                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.454: 	  declare trait DateTimeFormat() {
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.455: 	    fun format(date: ((number) | (Date)) | (undefined)): string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.456: 	    fun resolvedOptions(): Intl.ResolvedDateTimeFormatOptions
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.457: 	  }
//│ ╙──       	^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.84: 	declare trait String() {
//│ ║        	        ^^^^^^^^^^^^^^^^
//│ ║  l.85: 	  fun localeCompare(that: string, locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.CollatorOptions) | (undefined)): number
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.86: 	}
//│ ╙──      	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.87: 	declare trait StringConstructor() {
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.88: 	  let __new: Unsupported<"new(value?: any): String;", "ts2mls/js/src/test/typescript/ES5.d.ts", 504, 29>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.89: 	  let __call: Unsupported<"(value?: any): string;", "ts2mls/js/src/test/typescript/ES5.d.ts", 505, 29>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.90: 	  let prototype: String
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.91: 	  fun fromCharCode(codes: MutArray<number>): string
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	}
//│ ╙──      	^
//│ ╔══[ERROR] trait BooleanConstructor cannot be used as a type
//│ ║  l.93: 	let Boolean: BooleanConstructor
//│ ╙──      	             ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.94: 	declare trait BooleanConstructor() {
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.95: 	  let __new: Unsupported<"new(value?: any): Boolean;", "ts2mls/js/src/test/typescript/ES5.d.ts", 521, 30>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.96: 	  let __call: Unsupported<"<T>(value?: T): boolean;", "ts2mls/js/src/test/typescript/ES5.d.ts", 522, 30>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.97: 	  let prototype: Boolean
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.98: 	}
//│ ╙──      	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.99: 	declare trait Number() {
//│ ║        	        ^^^^^^^^^^^^^^^^
//│ ║  l.100: 	  fun toLocaleString(locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.NumberFormatOptions) | (undefined)): string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.101: 	}
//│ ╙──       	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.102: 	declare trait NumberConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.103: 	  let __call: Unsupported<"(value?: any): number;", "ts2mls/js/src/test/typescript/ES5.d.ts", 559, 29>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.104: 	  let NaN: number
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ║  l.105: 	  let MIN_VALUE: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.106: 	  let __new: Unsupported<"new(value?: any): Number;", "ts2mls/js/src/test/typescript/ES5.d.ts", 558, 29>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.107: 	  let NEGATIVE_INFINITY: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.108: 	  let POSITIVE_INFINITY: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.109: 	  let MAX_VALUE: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.110: 	  let prototype: Number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.111: 	}
//│ ╙──       	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.112: 	declare trait TemplateStringsArray() extends ReadonlyArray<string> {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.113: 	  let raw: ReadonlyArray<string>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.114: 	}
//│ ╙──       	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.115: 	declare trait ImportMeta() {}
//│ ╙──       	        ^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.116: 	declare trait ImportCallOptions() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.117: 	  let assert: (ImportAssertions) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.118: 	}
//│ ╙──       	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.119: 	declare trait ImportAssertions() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.120: 	  let __index: Unsupported<"[key: string]: string;", "ts2mls/js/src/test/typescript/ES5.d.ts", 617, 28>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.121: 	}
//│ ╙──       	^
//│ ╔══[ERROR] function Math cannot be used as a type
//│ ║  l.122: 	let Math: Math
//│ ╙──       	          ^^^^
//│ ╔══[ERROR] type identifier not found: Math
//│ ║  l.122: 	let Math: Math
//│ ╙──       	          ^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.123: 	declare trait Date() {
//│ ║         	        ^^^^^^^^^^^^^^
//│ ║  l.124: 	  fun toLocaleString(locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.DateTimeFormatOptions) | (undefined)): string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.125: 	  fun toLocaleDateString(locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.DateTimeFormatOptions) | (undefined)): string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.126: 	  fun toLocaleTimeString(locales: ((string) | (MutArray<string>)) | (undefined), options: (Intl.DateTimeFormatOptions) | (undefined)): string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.127: 	}
//│ ╙──       	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.128: 	declare trait DateConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.129: 	  let __call: Unsupported<"(): string;", "ts2mls/js/src/test/typescript/ES5.d.ts", 899, 128>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.130: 	  fun UTC(year: number, monthIndex: number, date: (number) | (undefined), hours: (number) | (undefined), minutes: (number) | (undefined), seconds: (number) | (undefined), ms: (number) | (undefined)): number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.131: 	  let __new: Unsupported<"new(year: number, monthIndex: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;", "ts2mls/js/src/test/typescript/ES5.d.ts", 888, 38>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	  fun now(): number
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	  fun parse(s: string): number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.134: 	  let prototype: Date
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.135: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait RegExp cannot be used as a type
//│ ║  l.140: 	  fun compile(pattern: string, flags: (string) | (undefined)): RegExp
//│ ╙──       	                                                               ^^^^^^
//│ ╔══[ERROR] type identifier not found: RegExpExecArray
//│ ║  l.144: 	  fun exec(string: string): RegExpExecArray
//│ ╙──       	                            ^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.136: 	declare trait RegExp() {
//│ ║         	        ^^^^^^^^^^^^^^^^
//│ ║  l.137: 	  fun test(string: string): (false) | (true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.138: 	  let multiline: (false) | (true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.139: 	  let source: string
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.140: 	  fun compile(pattern: string, flags: (string) | (undefined)): RegExp
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.141: 	  let global: (false) | (true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.142: 	  let lastIndex: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.143: 	  let ignoreCase: (false) | (true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.144: 	  fun exec(string: string): RegExpExecArray
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.145: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait ErrorConstructor cannot be used as a type
//│ ║  l.146: 	let Error: ErrorConstructor
//│ ╙──       	           ^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.147: 	declare trait ErrorConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.148: 	  let __new: Unsupported<"new(message?: string): Error;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1044, 28>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.149: 	  let __call: Unsupported<"(message?: string): Error;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1045, 33>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.150: 	  let prototype: Error
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.151: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait EvalErrorConstructor cannot be used as a type
//│ ║  l.152: 	let EvalError: EvalErrorConstructor
//│ ╙──       	               ^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.153: 	declare trait EvalErrorConstructor() extends ErrorConstructor {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.154: 	  let __new: Unsupported<"new(message?: string): EvalError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1055, 57>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.155: 	  let __call: Unsupported<"(message?: string): EvalError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1056, 37>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.156: 	  let prototype: EvalError
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.157: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait RangeErrorConstructor cannot be used as a type
//│ ║  l.158: 	let RangeError: RangeErrorConstructor
//│ ╙──       	                ^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.159: 	declare trait RangeErrorConstructor() extends ErrorConstructor {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.160: 	  let __new: Unsupported<"new(message?: string): RangeError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1066, 58>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.161: 	  let __call: Unsupported<"(message?: string): RangeError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1067, 38>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.162: 	  let prototype: RangeError
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.163: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait ReferenceErrorConstructor cannot be used as a type
//│ ║  l.164: 	let ReferenceError: ReferenceErrorConstructor
//│ ╙──       	                    ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.165: 	declare trait ReferenceErrorConstructor() extends ErrorConstructor {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.166: 	  let __new: Unsupported<"new(message?: string): ReferenceError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1077, 62>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.167: 	  let __call: Unsupported<"(message?: string): ReferenceError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1078, 42>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.168: 	  let prototype: ReferenceError
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.169: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait SyntaxErrorConstructor cannot be used as a type
//│ ║  l.170: 	let SyntaxError: SyntaxErrorConstructor
//│ ╙──       	                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.171: 	declare trait SyntaxErrorConstructor() extends ErrorConstructor {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.172: 	  let __new: Unsupported<"new(message?: string): SyntaxError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1088, 59>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.173: 	  let __call: Unsupported<"(message?: string): SyntaxError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1089, 39>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.174: 	  let prototype: SyntaxError
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.175: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait TypeErrorConstructor cannot be used as a type
//│ ║  l.176: 	let TypeError: TypeErrorConstructor
//│ ╙──       	               ^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.177: 	declare trait TypeErrorConstructor() extends ErrorConstructor {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.178: 	  let __new: Unsupported<"new(message?: string): TypeError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1099, 57>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.179: 	  let __call: Unsupported<"(message?: string): TypeError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1100, 37>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.180: 	  let prototype: TypeError
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.181: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait URIErrorConstructor cannot be used as a type
//│ ║  l.182: 	let URIError: URIErrorConstructor
//│ ╙──       	              ^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.183: 	declare trait URIErrorConstructor() extends ErrorConstructor {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.184: 	  let __new: Unsupported<"new(message?: string): URIError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1110, 56>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.185: 	  let __call: Unsupported<"(message?: string): URIError;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1111, 36>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.186: 	  let prototype: URIError
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.187: 	}
//│ ╙──       	^
//│ ╔══[ERROR] function JSON cannot be used as a type
//│ ║  l.188: 	let JSON: JSON
//│ ╙──       	          ^^^^
//│ ╔══[ERROR] type identifier not found: JSON
//│ ║  l.188: 	let JSON: JSON
//│ ╙──       	          ^^^^
//│ ╔══[ERROR] trait ReadonlyArray cannot be used as a type
//│ ║  l.191: 	  fun every(predicate: (T) => (number) => (ReadonlyArray<T>) => anything, thisArg: (anything) | (undefined)): (false) | (true) /* warning: the overload of function every is not supported yet. */
//│ ╙──       	                                          ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ReadonlyArray cannot be used as a type
//│ ║  l.192: 	  fun forEach(callbackfn: (T) => (number) => (ReadonlyArray<T>) => unit, thisArg: (anything) | (undefined)): unit
//│ ╙──       	                                             ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ReadonlyArray cannot be used as a type
//│ ║  l.193: 	  fun filter(predicate: (T) => (number) => (ReadonlyArray<T>) => anything, thisArg: (anything) | (undefined)): MutArray<T> /* warning: the overload of function filter is not supported yet. */
//│ ╙──       	                                           ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ReadonlyArray cannot be used as a type
//│ ║  l.195: 	  fun reduceRight<U>(callbackfn: (U) => (T) => (number) => (ReadonlyArray<T>) => U, initialValue: U): U /* warning: the overload of function reduceRight is not supported yet. */
//│ ╙──       	                                                           ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ReadonlyArray cannot be used as a type
//│ ║  l.197: 	  fun map<U>(callbackfn: (T) => (number) => (ReadonlyArray<T>) => U, thisArg: (anything) | (undefined)): MutArray<U>
//│ ╙──       	                                            ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ReadonlyArray cannot be used as a type
//│ ║  l.201: 	  fun reduce<U>(callbackfn: (U) => (T) => (number) => (ReadonlyArray<T>) => U, initialValue: U): U /* warning: the overload of function reduce is not supported yet. */
//│ ╙──       	                                                      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ReadonlyArray cannot be used as a type
//│ ║  l.204: 	  fun some(predicate: (T) => (number) => (ReadonlyArray<T>) => anything, thisArg: (anything) | (undefined)): (false) | (true)
//│ ╙──       	                                         ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.189: 	declare trait ReadonlyArray<T>() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.190: 	  fun lastIndexOf(searchElement: T, fromIndex: (number) | (undefined)): number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.191: 	  fun every(predicate: (T) => (number) => (ReadonlyArray<T>) => anything, thisArg: (anything) | (undefined)): (false) | (true) /* warning: the overload of function every is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.192: 	  fun forEach(callbackfn: (T) => (number) => (ReadonlyArray<T>) => unit, thisArg: (anything) | (undefined)): unit
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.193: 	  fun filter(predicate: (T) => (number) => (ReadonlyArray<T>) => anything, thisArg: (anything) | (undefined)): MutArray<T> /* warning: the overload of function filter is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.194: 	  let __index: Unsupported<"readonly [n: number]: T;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1274, 136>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.195: 	  fun reduceRight<U>(callbackfn: (U) => (T) => (number) => (ReadonlyArray<T>) => U, initialValue: U): U /* warning: the overload of function reduceRight is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.196: 	  fun join(separator: (string) | (undefined)): string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.197: 	  fun map<U>(callbackfn: (T) => (number) => (ReadonlyArray<T>) => U, thisArg: (anything) | (undefined)): MutArray<U>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.198: 	  let concat: ((MutArray<ConcatArray<T>>) => MutArray<T>) & ((MutArray<(T) | (ConcatArray<T>)>) => MutArray<T>)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.199: 	  fun toLocaleString(): string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.200: 	  fun slice(start: (number) | (undefined), end: (number) | (undefined)): MutArray<T>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.201: 	  fun reduce<U>(callbackfn: (U) => (T) => (number) => (ReadonlyArray<T>) => U, initialValue: U): U /* warning: the overload of function reduce is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.202: 	  fun toString(): string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.203: 	  let length: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.204: 	  fun some(predicate: (T) => (number) => (ReadonlyArray<T>) => anything, thisArg: (anything) | (undefined)): (false) | (true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.205: 	  fun indexOf(searchElement: T, fromIndex: (number) | (undefined)): number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.206: 	}
//│ ╙──       	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.207: 	declare trait ConcatArray<T>() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.208: 	  let length: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.209: 	  let __index: Unsupported<"readonly [n: number]: T;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1280, 28>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.210: 	  fun join(separator: (string) | (undefined)): string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.211: 	  fun slice(start: (number) | (undefined), end: (number) | (undefined)): MutArray<T>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.212: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait ArrayConstructor cannot be used as a type
//│ ║  l.213: 	let Array: ArrayConstructor
//│ ╙──       	           ^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.214: 	declare trait ArrayConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.215: 	  let __new: Unsupported<"new <T>(...items: T[]): T[];", "ts2mls/js/src/test/typescript/ES5.d.ts", 1472, 38>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.216: 	  let __call: Unsupported<"<T>(...items: T[]): T[];", "ts2mls/js/src/test/typescript/ES5.d.ts", 1475, 34>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.217: 	  fun isArray(arg: anything): (false) | (true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.218: 	  let prototype: MutArray<anything>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.219: 	}
//│ ╙──       	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.220: 	declare trait TypedPropertyDescriptor<T>() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.221: 	  let configurable: ((false) | (true)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.222: 	  let set: ((T) => unit) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.223: 	  let enumerable: ((false) | (true)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.224: 	  let get: (unit => T) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.225: 	  let writable: ((false) | (true)) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.226: 	  let value: (T) | (undefined)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.227: 	}
//│ ╙──       	^
//│ ╔══[ERROR] type identifier not found: T
//│ ║  l.228: 	type PromiseConstructorLike = ((((T) | (PromiseLike<T>)) => unit) => (((anything) | (undefined)) => unit) => unit) => PromiseLike<T>
//│ ╙──       	                                 ^^^
//│ ╔══[ERROR] type identifier not found: PromiseLike
//│ ║  l.228: 	type PromiseConstructorLike = ((((T) | (PromiseLike<T>)) => unit) => (((anything) | (undefined)) => unit) => unit) => PromiseLike<T>
//│ ╙──       	                                       ^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: PromiseLike
//│ ║  l.228: 	type PromiseConstructorLike = ((((T) | (PromiseLike<T>)) => unit) => (((anything) | (undefined)) => unit) => unit) => PromiseLike<T>
//│ ╙──       	                                                                                                                      ^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.229: 	type Awaited<T> = Unsupported<"T extends null | undefined ? T : // special case for `null | undefined` when not in `--strictNullChecks` mode         T extends object & { then(onfulfilled: infer F, ...args: infer _): any } ? // `await` only unwraps object types with a callable `then`. Non-object types are not unwrapped             F extends ((value: infer V, ...args: infer _) => any) ? // if the argument to `then` is callable, extracts the first argument                 Awaited<V> : // recursively unwrap the value                 never : // the argument to `then` was not callable         T", "ts2mls/js/src/test/typescript/ES5.d.ts", 1527, 17>
//│ ╙──       	
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.230: 	declare trait ArrayLike<T>() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.231: 	  let length: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.232: 	  let __index: Unsupported<"readonly [n: number]: T;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1536, 28>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.233: 	}
//│ ╙──       	^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.234: 	type Partial<T> = Unsupported<"{     [P in keyof T]?: T[P]; }", "ts2mls/js/src/test/typescript/ES5.d.ts", 1543, 17>
//│ ╙──       	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.235: 	type Required<T> = Unsupported<"{     [P in keyof T]-?: T[P]; }", "ts2mls/js/src/test/typescript/ES5.d.ts", 1550, 18>
//│ ╙──       	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.236: 	type Readonly<T> = Unsupported<"{     readonly [P in keyof T]: T[P]; }", "ts2mls/js/src/test/typescript/ES5.d.ts", 1557, 18>
//│ ╙──       	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.237: 	type Pick<T, K> = Unsupported<"{     [P in K]: T[P]; }", "ts2mls/js/src/test/typescript/ES5.d.ts", 1564, 33>
//│ ╙──       	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.238: 	type Record<K, T> = Unsupported<"{     [P in K]: T; }", "ts2mls/js/src/test/typescript/ES5.d.ts", 1571, 37>
//│ ╙──       	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.239: 	type Exclude<T, U> = Unsupported<"T extends U ? never : T", "ts2mls/js/src/test/typescript/ES5.d.ts", 1578, 20>
//│ ╙──       	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.240: 	type Extract<T, U> = Unsupported<"T extends U ? T : never", "ts2mls/js/src/test/typescript/ES5.d.ts", 1583, 20>
//│ ╙──       	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: __type
//│ ║  l.241: 	type Omit<T, K> = __type
//│ ╙──       	                  ^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.243: 	type Parameters<T> = Unsupported<"T extends (...args: infer P) => any ? P : never", "ts2mls/js/src/test/typescript/ES5.d.ts", 1598, 50>
//│ ╙──       	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.244: 	type ConstructorParameters<T> = Unsupported<"T extends abstract new (...args: infer P) => any ? P : never", "ts2mls/js/src/test/typescript/ES5.d.ts", 1603, 74>
//│ ╙──       	                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.245: 	type ReturnType<T> = Unsupported<"T extends (...args: any) => infer R ? R : any", "ts2mls/js/src/test/typescript/ES5.d.ts", 1608, 50>
//│ ╙──       	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.246: 	type InstanceType<T> = Unsupported<"T extends abstract new (...args: any) => infer R ? R : any", "ts2mls/js/src/test/typescript/ES5.d.ts", 1613, 65>
//│ ╙──       	                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.247: 	type Uppercase<S> = Unsupported<"intrinsic", "ts2mls/js/src/test/typescript/ES5.d.ts", 1618, 34>
//│ ╙──       	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.248: 	type Lowercase<S> = Unsupported<"intrinsic", "ts2mls/js/src/test/typescript/ES5.d.ts", 1623, 34>
//│ ╙──       	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.249: 	type Capitalize<S> = Unsupported<"intrinsic", "ts2mls/js/src/test/typescript/ES5.d.ts", 1628, 35>
//│ ╙──       	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Unsupported
//│ ║  l.250: 	type Uncapitalize<S> = Unsupported<"intrinsic", "ts2mls/js/src/test/typescript/ES5.d.ts", 1633, 37>
//│ ╙──       	                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.251: 	declare trait ThisType<T>() {}
//│ ╙──       	        ^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ArrayBufferConstructor cannot be used as a type
//│ ║  l.252: 	let ArrayBuffer: ArrayBufferConstructor
//│ ╙──       	                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.253: 	declare trait ArrayBufferTypes() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.254: 	  let ArrayBuffer: ArrayBuffer
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.255: 	}
//│ ╙──       	^
//│ ╔══[ERROR] function ArrayBuffer cannot be used as a type
//│ ║  l.256: 	type ArrayBufferLike = ArrayBuffer
//│ ╙──       	                       ^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: ArrayBuffer
//│ ║  l.256: 	type ArrayBufferLike = ArrayBuffer
//│ ╙──       	                       ^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.257: 	declare trait ArrayBufferConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.258: 	  let prototype: ArrayBuffer
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.259: 	  let __new: Unsupported<"new(byteLength: number): ArrayBuffer;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1667, 36>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.260: 	  fun isView(arg: anything): (false) | (true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.261: 	}
//│ ╙──       	^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.262: 	declare trait ArrayBufferView() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.263: 	  let buffer: ArrayBuffer
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.264: 	  let byteLength: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.265: 	  let byteOffset: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.266: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait DataViewConstructor cannot be used as a type
//│ ║  l.267: 	let DataView: DataViewConstructor
//│ ╙──       	              ^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.268: 	declare trait DataViewConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.269: 	  let prototype: DataView
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.270: 	  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, byteLength?: number): DataView;", "ts2mls/js/src/test/typescript/ES5.d.ts", 1819, 33>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.271: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait Int8ArrayConstructor cannot be used as a type
//│ ║  l.272: 	let Int8Array: Int8ArrayConstructor
//│ ╙──       	               ^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ArrayLike cannot be used as a type
//│ ║  l.275: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int8Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                         ^^^^^^^^^^^^
//│ ╔══[ERROR] function Int8Array cannot be used as a type
//│ ║  l.275: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int8Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Int8Array
//│ ║  l.275: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int8Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^
//│ ╔══[ERROR] function Int8Array cannot be used as a type
//│ ║  l.277: 	  fun id"of"(items: MutArray<number>): Int8Array
//│ ╙──       	                                       ^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Int8Array
//│ ║  l.277: 	  fun id"of"(items: MutArray<number>): Int8Array
//│ ╙──       	                                       ^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.273: 	declare trait Int8ArrayConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.274: 	  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int8Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 2074, 63>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.275: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int8Array /* warning: the overload of function from is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.276: 	  let prototype: Int8Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.277: 	  fun id"of"(items: MutArray<number>): Int8Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.278: 	  let BYTES_PER_ELEMENT: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.279: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.281: 	  fun valueOf(): Uint8Array
//│ ╙──       	                 ^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.283: 	  fun every(predicate: (number) => (number) => (Uint8Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
//│ ╙──       	                                               ^^^^^^^^^^^^
//│ ╔══[ERROR] trait ArrayLike cannot be used as a type
//│ ║  l.284: 	  fun set(array: ArrayLike<number>, offset: (number) | (undefined)): unit
//│ ╙──       	                 ^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.287: 	  fun reduceRight<U>(callbackfn: (U) => (number) => (number) => (Uint8Array) => U, initialValue: U): U /* warning: the overload of function reduceRight is not supported yet. */
//│ ╙──       	                                                                ^^^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.288: 	  fun fill(value: number, start: (number) | (undefined), end: (number) | (undefined)): Uint8Array
//│ ╙──       	                                                                                       ^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.289: 	  fun sort(compareFn: ((number) => (number) => number) | (undefined)): Uint8Array
//│ ╙──       	                                                                       ^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.291: 	  fun copyWithin(target: number, start: (number) | (undefined), end: (number) | (undefined)): Uint8Array
//│ ╙──       	                                                                                              ^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.292: 	  fun find(predicate: (number) => (number) => (Uint8Array) => (false) | (true), thisArg: (anything) | (undefined)): number
//│ ╙──       	                                              ^^^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.293: 	  fun subarray(begin: (number) | (undefined), end: (number) | (undefined)): Uint8Array
//│ ╙──       	                                                                            ^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.295: 	  fun map(callbackfn: (number) => (number) => (Uint8Array) => number, thisArg: (anything) | (undefined)): Uint8Array
//│ ╙──       	                                              ^^^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.295: 	  fun map(callbackfn: (number) => (number) => (Uint8Array) => number, thisArg: (anything) | (undefined)): Uint8Array
//│ ╙──       	                                                                                                          ^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.296: 	  fun forEach(callbackfn: (number) => (number) => (Uint8Array) => unit, thisArg: (anything) | (undefined)): unit
//│ ╙──       	                                                  ^^^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.298: 	  fun findIndex(predicate: (number) => (number) => (Uint8Array) => (false) | (true), thisArg: (anything) | (undefined)): number
//│ ╙──       	                                                   ^^^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.299: 	  fun reverse(): Uint8Array
//│ ╙──       	                 ^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.300: 	  fun filter(predicate: (number) => (number) => (Uint8Array) => anything, thisArg: (anything) | (undefined)): Uint8Array
//│ ╙──       	                                                ^^^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.300: 	  fun filter(predicate: (number) => (number) => (Uint8Array) => anything, thisArg: (anything) | (undefined)): Uint8Array
//│ ╙──       	                                                                                                              ^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.301: 	  fun slice(start: (number) | (undefined), end: (number) | (undefined)): Uint8Array
//│ ╙──       	                                                                         ^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.303: 	  fun reduce<U>(callbackfn: (U) => (number) => (number) => (Uint8Array) => U, initialValue: U): U /* warning: the overload of function reduce is not supported yet. */
//│ ╙──       	                                                           ^^^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.306: 	  fun some(predicate: (number) => (number) => (Uint8Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
//│ ╙──       	                                              ^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.280: 	declare trait Uint8Array() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^
//│ ║  l.281: 	  fun valueOf(): Uint8Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.282: 	  fun lastIndexOf(searchElement: number, fromIndex: (number) | (undefined)): number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.283: 	  fun every(predicate: (number) => (number) => (Uint8Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.284: 	  fun set(array: ArrayLike<number>, offset: (number) | (undefined)): unit
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.285: 	  fun toLocaleString(): string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.286: 	  let __index: Unsupported<"[index: number]: number;", "ts2mls/js/src/test/typescript/ES5.d.ts", 2349, 26>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.287: 	  fun reduceRight<U>(callbackfn: (U) => (number) => (number) => (Uint8Array) => U, initialValue: U): U /* warning: the overload of function reduceRight is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.288: 	  fun fill(value: number, start: (number) | (undefined), end: (number) | (undefined)): Uint8Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.289: 	  fun sort(compareFn: ((number) => (number) => number) | (undefined)): Uint8Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.290: 	  let BYTES_PER_ELEMENT: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.291: 	  fun copyWithin(target: number, start: (number) | (undefined), end: (number) | (undefined)): Uint8Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.292: 	  fun find(predicate: (number) => (number) => (Uint8Array) => (false) | (true), thisArg: (anything) | (undefined)): number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.293: 	  fun subarray(begin: (number) | (undefined), end: (number) | (undefined)): Uint8Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.294: 	  fun join(separator: (string) | (undefined)): string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.295: 	  fun map(callbackfn: (number) => (number) => (Uint8Array) => number, thisArg: (anything) | (undefined)): Uint8Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.296: 	  fun forEach(callbackfn: (number) => (number) => (Uint8Array) => unit, thisArg: (anything) | (undefined)): unit
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.297: 	  let buffer: ArrayBuffer
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.298: 	  fun findIndex(predicate: (number) => (number) => (Uint8Array) => (false) | (true), thisArg: (anything) | (undefined)): number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.299: 	  fun reverse(): Uint8Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.300: 	  fun filter(predicate: (number) => (number) => (Uint8Array) => anything, thisArg: (anything) | (undefined)): Uint8Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.301: 	  fun slice(start: (number) | (undefined), end: (number) | (undefined)): Uint8Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.302: 	  let byteLength: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.303: 	  fun reduce<U>(callbackfn: (U) => (number) => (number) => (Uint8Array) => U, initialValue: U): U /* warning: the overload of function reduce is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.304: 	  fun toString(): string
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.305: 	  let length: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.306: 	  fun some(predicate: (number) => (number) => (Uint8Array) => anything, thisArg: (anything) | (undefined)): (false) | (true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.307: 	  fun indexOf(searchElement: number, fromIndex: (number) | (undefined)): number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.308: 	  let byteOffset: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.309: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait ArrayLike cannot be used as a type
//│ ║  l.312: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint8Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                         ^^^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.312: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint8Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^
//│ ╔══[ERROR] trait Uint8Array cannot be used as a type
//│ ║  l.314: 	  fun id"of"(items: MutArray<number>): Uint8Array
//│ ╙──       	                                       ^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.310: 	declare trait Uint8ArrayConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.311: 	  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 2357, 64>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.312: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint8Array /* warning: the overload of function from is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.313: 	  let prototype: Uint8Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.314: 	  fun id"of"(items: MutArray<number>): Uint8Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.315: 	  let BYTES_PER_ELEMENT: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.316: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait Uint8ClampedArrayConstructor cannot be used as a type
//│ ║  l.317: 	let Uint8ClampedArray: Uint8ClampedArrayConstructor
//│ ╙──       	                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ArrayLike cannot be used as a type
//│ ║  l.320: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint8ClampedArray /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                         ^^^^^^^^^^^^
//│ ╔══[ERROR] function Uint8ClampedArray cannot be used as a type
//│ ║  l.320: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint8ClampedArray /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Uint8ClampedArray
//│ ║  l.320: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint8ClampedArray /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] function Uint8ClampedArray cannot be used as a type
//│ ║  l.322: 	  fun id"of"(items: MutArray<number>): Uint8ClampedArray
//│ ╙──       	                                       ^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Uint8ClampedArray
//│ ║  l.322: 	  fun id"of"(items: MutArray<number>): Uint8ClampedArray
//│ ╙──       	                                       ^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.318: 	declare trait Uint8ClampedArrayConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.319: 	  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8ClampedArray;", "ts2mls/js/src/test/typescript/ES5.d.ts", 2639, 71>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.320: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint8ClampedArray /* warning: the overload of function from is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.321: 	  let prototype: Uint8ClampedArray
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.322: 	  fun id"of"(items: MutArray<number>): Uint8ClampedArray
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.323: 	  let BYTES_PER_ELEMENT: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.324: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait Int16ArrayConstructor cannot be used as a type
//│ ║  l.325: 	let Int16Array: Int16ArrayConstructor
//│ ╙──       	                ^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ArrayLike cannot be used as a type
//│ ║  l.328: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int16Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                         ^^^^^^^^^^^^
//│ ╔══[ERROR] function Int16Array cannot be used as a type
//│ ║  l.328: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int16Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Int16Array
//│ ║  l.328: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int16Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^
//│ ╔══[ERROR] function Int16Array cannot be used as a type
//│ ║  l.330: 	  fun id"of"(items: MutArray<number>): Int16Array
//│ ╙──       	                                       ^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Int16Array
//│ ║  l.330: 	  fun id"of"(items: MutArray<number>): Int16Array
//│ ╙──       	                                       ^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.326: 	declare trait Int16ArrayConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.327: 	  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int16Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 2919, 64>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.328: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int16Array /* warning: the overload of function from is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.329: 	  let prototype: Int16Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.330: 	  fun id"of"(items: MutArray<number>): Int16Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.331: 	  let BYTES_PER_ELEMENT: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.332: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait Uint16ArrayConstructor cannot be used as a type
//│ ║  l.333: 	let Uint16Array: Uint16ArrayConstructor
//│ ╙──       	                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ArrayLike cannot be used as a type
//│ ║  l.336: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint16Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                         ^^^^^^^^^^^^
//│ ╔══[ERROR] function Uint16Array cannot be used as a type
//│ ║  l.336: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint16Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Uint16Array
//│ ║  l.336: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint16Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^^
//│ ╔══[ERROR] function Uint16Array cannot be used as a type
//│ ║  l.338: 	  fun id"of"(items: MutArray<number>): Uint16Array
//│ ╙──       	                                       ^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Uint16Array
//│ ║  l.338: 	  fun id"of"(items: MutArray<number>): Uint16Array
//│ ╙──       	                                       ^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.334: 	declare trait Uint16ArrayConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.335: 	  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint16Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 3202, 65>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.336: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint16Array /* warning: the overload of function from is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.337: 	  let prototype: Uint16Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.338: 	  fun id"of"(items: MutArray<number>): Uint16Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.339: 	  let BYTES_PER_ELEMENT: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.340: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait Int32ArrayConstructor cannot be used as a type
//│ ║  l.341: 	let Int32Array: Int32ArrayConstructor
//│ ╙──       	                ^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ArrayLike cannot be used as a type
//│ ║  l.344: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int32Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                         ^^^^^^^^^^^^
//│ ╔══[ERROR] function Int32Array cannot be used as a type
//│ ║  l.344: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int32Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Int32Array
//│ ║  l.344: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int32Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^
//│ ╔══[ERROR] function Int32Array cannot be used as a type
//│ ║  l.346: 	  fun id"of"(items: MutArray<number>): Int32Array
//│ ╙──       	                                       ^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Int32Array
//│ ║  l.346: 	  fun id"of"(items: MutArray<number>): Int32Array
//│ ╙──       	                                       ^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.342: 	declare trait Int32ArrayConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.343: 	  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int32Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 3485, 64>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.344: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Int32Array /* warning: the overload of function from is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.345: 	  let prototype: Int32Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.346: 	  fun id"of"(items: MutArray<number>): Int32Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.347: 	  let BYTES_PER_ELEMENT: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.348: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait Uint32ArrayConstructor cannot be used as a type
//│ ║  l.349: 	let Uint32Array: Uint32ArrayConstructor
//│ ╙──       	                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ArrayLike cannot be used as a type
//│ ║  l.352: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint32Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                         ^^^^^^^^^^^^
//│ ╔══[ERROR] function Uint32Array cannot be used as a type
//│ ║  l.352: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint32Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Uint32Array
//│ ║  l.352: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint32Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^^
//│ ╔══[ERROR] function Uint32Array cannot be used as a type
//│ ║  l.354: 	  fun id"of"(items: MutArray<number>): Uint32Array
//│ ╙──       	                                       ^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Uint32Array
//│ ║  l.354: 	  fun id"of"(items: MutArray<number>): Uint32Array
//│ ╙──       	                                       ^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.350: 	declare trait Uint32ArrayConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.351: 	  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint32Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 3766, 65>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.352: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Uint32Array /* warning: the overload of function from is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.353: 	  let prototype: Uint32Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.354: 	  fun id"of"(items: MutArray<number>): Uint32Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.355: 	  let BYTES_PER_ELEMENT: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.356: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait Float32ArrayConstructor cannot be used as a type
//│ ║  l.357: 	let Float32Array: Float32ArrayConstructor
//│ ╙──       	                  ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ArrayLike cannot be used as a type
//│ ║  l.360: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Float32Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                         ^^^^^^^^^^^^
//│ ╔══[ERROR] function Float32Array cannot be used as a type
//│ ║  l.360: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Float32Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Float32Array
//│ ║  l.360: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Float32Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^^^
//│ ╔══[ERROR] function Float32Array cannot be used as a type
//│ ║  l.362: 	  fun id"of"(items: MutArray<number>): Float32Array
//│ ╙──       	                                       ^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Float32Array
//│ ║  l.362: 	  fun id"of"(items: MutArray<number>): Float32Array
//│ ╙──       	                                       ^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.358: 	declare trait Float32ArrayConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.359: 	  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float32Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 4048, 66>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.360: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Float32Array /* warning: the overload of function from is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.361: 	  let prototype: Float32Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.362: 	  fun id"of"(items: MutArray<number>): Float32Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.363: 	  let BYTES_PER_ELEMENT: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.364: 	}
//│ ╙──       	^
//│ ╔══[ERROR] trait Float64ArrayConstructor cannot be used as a type
//│ ║  l.365: 	let Float64Array: Float64ArrayConstructor
//│ ╙──       	                  ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] trait ArrayLike cannot be used as a type
//│ ║  l.368: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Float64Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                         ^^^^^^^^^^^^
//│ ╔══[ERROR] function Float64Array cannot be used as a type
//│ ║  l.368: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Float64Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Float64Array
//│ ║  l.368: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Float64Array /* warning: the overload of function from is not supported yet. */
//│ ╙──       	                                                                                                             ^^^^^^^^^^^^
//│ ╔══[ERROR] function Float64Array cannot be used as a type
//│ ║  l.370: 	  fun id"of"(items: MutArray<number>): Float64Array
//│ ╙──       	                                       ^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Float64Array
//│ ║  l.370: 	  fun id"of"(items: MutArray<number>): Float64Array
//│ ╙──       	                                       ^^^^^^^^^^^^
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.366: 	declare trait Float64ArrayConstructor() {
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.367: 	  let __new: Unsupported<"new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float64Array;", "ts2mls/js/src/test/typescript/ES5.d.ts", 4322, 66>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.368: 	  fun from<T>(arrayLike: ArrayLike<T>, mapfn: (T) => (number) => number, thisArg: (anything) | (undefined)): Float64Array /* warning: the overload of function from is not supported yet. */
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.369: 	  let prototype: Float64Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.370: 	  fun id"of"(items: MutArray<number>): Float64Array
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.371: 	  let BYTES_PER_ELEMENT: number
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.372: 	}
//│ ╙──       	^
//│ let NaN: number
//│ let Infinity: number
//│ fun eval: (x: string,) -> anything
//│ fun parseInt: (string: string, radix: number | undefined,) -> number
//│ fun parseFloat: (string: string,) -> number
//│ fun isNaN: (number: number,) -> bool
//│ fun isFinite: (number: number,) -> bool
//│ fun decodeURI: (encodedURI: string,) -> string
//│ fun decodeURIComponent: (encodedURIComponent: string,) -> string
//│ fun encodeURI: (uri: string,) -> string
//│ fun encodeURIComponent: (uriComponent: false | number | string | true,) -> string
//│ fun escape: (string: string,) -> string
//│ fun unescape: (string: string,) -> string
//│ trait Symbol()
//│ type PropertyKey = number | string | Symbol
//│ trait PropertyDescriptor()
//│ trait PropertyDescriptorMap()
//│ trait Object()
//│ trait ObjectConstructor()
//│ let Function: FunctionConstructor
//│ trait FunctionConstructor()
//│ type ThisParameterType[T] = error
//│ type OmitThisParameter[T] = error
//│ trait CallableFunction()
//│ trait NewableFunction()
//│ trait IArguments()
//│ trait String()
//│ trait StringConstructor()
//│ let Boolean: BooleanConstructor
//│ trait BooleanConstructor()
//│ trait Number()
//│ trait NumberConstructor()
//│ trait TemplateStringsArray()
//│ trait ImportMeta()
//│ trait ImportCallOptions()
//│ trait ImportAssertions()
//│ let Math: error
//│ trait Date()
//│ trait DateConstructor()
//│ trait RegExp()
//│ let Error: ErrorConstructor
//│ trait ErrorConstructor()
//│ let EvalError: EvalErrorConstructor
//│ trait EvalErrorConstructor()
//│ let RangeError: RangeErrorConstructor
//│ trait RangeErrorConstructor()
//│ let ReferenceError: ReferenceErrorConstructor
//│ trait ReferenceErrorConstructor()
//│ let SyntaxError: SyntaxErrorConstructor
//│ trait SyntaxErrorConstructor()
//│ let TypeError: TypeErrorConstructor
//│ trait TypeErrorConstructor()
//│ let URIError: URIErrorConstructor
//│ trait URIErrorConstructor()
//│ let JSON: error
//│ trait ReadonlyArray[T]()
//│ trait ConcatArray[T]()
//│ let Array: ArrayConstructor
//│ trait ArrayConstructor()
//│ trait TypedPropertyDescriptor[T]()
//│ type PromiseConstructorLike = ((error -> unit) -> (anything -> unit) -> unit) -> error
//│ type Awaited[T] = error
//│ trait ArrayLike[T]()
//│ type Partial[T] = error
//│ type Required[T] = error
//│ type Readonly[T] = error
//│ type Pick[T, K] = error
//│ type Record[K, T] = error
//│ type Exclude[T, U] = error
//│ type Extract[T, U] = error
//│ type Omit[T, K] = error
//│ type NonNullable[T] = T
//│ type Parameters[T] = error
//│ type ConstructorParameters[T] = error
//│ type ReturnType[T] = error
//│ type InstanceType[T] = error
//│ type Uppercase[S] = error
//│ type Lowercase[S] = error
//│ type Capitalize[S] = error
//│ type Uncapitalize[S] = error
//│ trait ThisType[T]()
//│ let ArrayBuffer: ArrayBufferConstructor
//│ trait ArrayBufferTypes()
//│ type ArrayBufferLike = error
//│ trait ArrayBufferConstructor()
//│ trait ArrayBufferView()
//│ let DataView: DataViewConstructor
//│ trait DataViewConstructor()
//│ let Int8Array: Int8ArrayConstructor
//│ trait Int8ArrayConstructor()
//│ trait Uint8Array()
//│ trait Uint8ArrayConstructor()
//│ let Uint8ClampedArray: Uint8ClampedArrayConstructor
//│ trait Uint8ClampedArrayConstructor()
//│ let Int16Array: Int16ArrayConstructor
//│ trait Int16ArrayConstructor()
//│ let Uint16Array: Uint16ArrayConstructor
//│ trait Uint16ArrayConstructor()
//│ let Int32Array: Int32ArrayConstructor
//│ trait Int32ArrayConstructor()
//│ let Uint32Array: Uint32ArrayConstructor
//│ trait Uint32ArrayConstructor()
//│ let Float32Array: Float32ArrayConstructor
//│ trait Float32ArrayConstructor()
//│ let Float64Array: Float64ArrayConstructor
//│ trait Float64ArrayConstructor()
//│ module Intl() {
//│   trait Collator()
//│   trait CollatorOptions()
//│   trait DateTimeFormat()
//│   trait DateTimeFormatOptions()
//│   trait NumberFormat()
//│   trait NumberFormatOptions()
//│   trait ResolvedCollatorOptions()
//│   trait ResolvedDateTimeFormatOptions()
//│   trait ResolvedNumberFormatOptions()
//│ }
