:NewParser
:ParseOnly
fun multi1(_: number): number
fun multi3(): unit
class Foo: Base
trait AnotherBase(y: string)
namespace N {
  fun f(): unit
  fun g(): unit
  fun h(): unit
}
fun multi2(_: string): string
fun multi4(): unit
trait Base(a: number)
class AnotherFoo: AnotherBase
fun multi5(): unit
//│ |#fun| |multi1|(|_|#:| |number|)|#:| |number|↵|#fun| |multi3|(||)|#:| |unit|↵|#class| |Foo|#:| |Base|↵|#trait| |AnotherBase|(|y|#:| |string|)|↵|namespace| |N| |{|→|#fun| |f|(||)|#:| |unit|↵|#fun| |g|(||)|#:| |unit|↵|#fun| |h|(||)|#:| |unit|←|↵|}|↵|#fun| |multi2|(|_|#:| |string|)|#:| |string|↵|#fun| |multi4|(||)|#:| |unit|↵|#trait| |Base|(|a|#:| |number|)|↵|#class| |AnotherFoo|#:| |AnotherBase|↵|#fun| |multi5|(||)|#:| |unit|
//│ ╔══[WARNING] Paren-less applications should use the 'of' keyword
//│ ║  l.7: 	namespace N {
//│ ╙──     	^^^^^^^^^^^
//│ ╔══[PARSE ERROR] Expected end of input; found curly brace section instead
//│ ║  l.7: 	namespace N {
//│ ║       	            ^
//│ ║  l.8: 	  fun f(): unit
//│ ║       	^^^^^^^^^^^^^^^
//│ ║  l.9: 	  fun g(): unit
//│ ║       	^^^^^^^^^^^^^^^
//│ ║  l.10: 	  fun h(): unit
//│ ║        	^^^^^^^^^^^^^^^
//│ ║  l.11: 	}
//│ ╙──      	^
//│ Parsed: {fun multi1: [] -> (_: number,) -> number; fun multi3: [] -> () -> unit; class Foo(): Base {}; trait AnotherBase(y: string,): {}; namespace (N,)}
