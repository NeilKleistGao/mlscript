:NewParser
:ParseOnly
fun hello(): unit
fun add(x: number, y: number): number
fun sub(x: number, y: number): number
fun foo(): number
fun id(x: anything): anything
fun odd(x: number): (false) | (true)
fun isnull(x: anything): (false) | (true)
fun bar(): anything
fun nu(n: null): null
fun un(n: undefined): undefined
fun fail(): nothing
fun create(): object
fun pa(x: number): number
fun wtf(x: anything): unit
class Foooooo() {
  mut ooooooo: number
}
fun inn(f: Foooooo): unit
fun out(): Foooooo
trait Barrrrrrrrr() {
  mut rrrrrrr: number
}
fun inn2(b: Barrrrrrrrr): unit
fun out2(): Barrrrrrrrr
//│ |#fun| |hello|(||)|#:| |unit|↵|#fun| |add|(|x|#:| |number|,| |y|#:| |number|)|#:| |number|↵|#fun| |sub|(|x|#:| |number|,| |y|#:| |number|)|#:| |number|↵|#fun| |foo|(||)|#:| |number|↵|#fun| |id|(|x|#:| |anything|)|#:| |anything|↵|#fun| |odd|(|x|#:| |number|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |isnull|(|x|#:| |anything|)|#:| |(|false|)| ||| |(|true|)|↵|#fun| |bar|(||)|#:| |anything|↵|#fun| |nu|(|n|#:| |null|)|#:| |null|↵|#fun| |un|(|n|#:| |undefined|)|#:| |undefined|↵|#fun| |fail|(||)|#:| |nothing|↵|#fun| |create|(||)|#:| |object|↵|#fun| |pa|(|x|#:| |number|)|#:| |number|↵|#fun| |wtf|(|x|#:| |anything|)|#:| |unit|↵|#class| |Foooooo|(||)| |{|→|#mut| |ooooooo|#:| |number|←|↵|}|↵|#fun| |inn|(|f|#:| |Foooooo|)|#:| |unit|↵|#fun| |out|(||)|#:| |Foooooo|↵|#trait| |Barrrrrrrrr|(||)| |{|→|#mut| |rrrrrrr|#:| |number|←|↵|}|↵|#fun| |inn2|(|b|#:| |Barrrrrrrrr|)|#:| |unit|↵|#fun| |out2|(||)|#:| |Barrrrrrrrr|
//│ ╔══[PARSE ERROR] Unexpected 'mut' keyword in expression position
//│ ║  l.18: 	  mut ooooooo: number
//│ ╙──      	  ^^^
//│ ╔══[PARSE ERROR] Unexpected 'mut' keyword in expression position
//│ ║  l.23: 	  mut rrrrrrr: number
//│ ╙──      	  ^^^
//│ Parsed: {fun hello: [] -> () -> unit; fun add: [] -> (x: number, y: number,) -> number; fun sub: [] -> (x: number, y: number,) -> number; fun foo: [] -> () -> number; fun id: [] -> (x: anything,) -> anything; fun odd: [] -> (x: number,) -> ((false,) | (true,)); fun isnull: [] -> (x: anything,) -> ((false,) | (true,)); fun bar: [] -> () -> anything; fun nu: [] -> (n: null,) -> null; fun un: [] -> (n: undefined,) -> undefined; fun fail: [] -> () -> nothing; fun create: [] -> () -> object; fun pa: [] -> (x: number,) -> number; fun wtf: [] -> (x: anything,) -> unit; class Foooooo() {ooooooo : TypeName(number)}; fun inn: [] -> (f: Foooooo,) -> unit; fun out: [] -> () -> Foooooo; trait Barrrrrrrrr() {rrrrrrr : TypeName(number)}; fun inn2: [] -> (b: Barrrrrrrrr,) -> unit; fun out2: [] -> () -> Barrrrrrrrr}
