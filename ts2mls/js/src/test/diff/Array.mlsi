:NewParser
:NewDefs
:NoJS
:AllowTypeErrors
fun first(x: MutArray<string>): string
fun getZero3(): MutArray<number>
fun first2(fs: MutArray<(number) => number>): (number) => number
fun doEs(e: MutArray<int>): MutArray<int>
class C() {}
trait I() {
  let i: number
}
fun doCs(c: MutArray<C>): MutArray<C>
fun doIs(i: MutArray<I>): MutArray<I>
fun inter<U, T>(x: MutArray<(U) & (T)>): MutArray<(U) & (T)>
fun clean(x: MutArray<(string, number, )>): MutArray<(string, number, )>
fun translate<T, U>(x: MutArray<T>): MutArray<U>
fun uu(x: MutArray<((number) | (false)) | (true)>): MutArray<((number) | (false)) | (true)>
class Temp<T>() {
  let x: T
}
fun ta(ts: MutArray<Temp<(false) | (true)>>): MutArray<Temp<(false) | (true)>>
fun tat<T>(ts: MutArray<Temp<T>>): MutArray<Temp<T>>
//│ ╔══[ERROR] traits are not yet supported
//│ ║  l.10: 	trait I() {
//│ ║        	^^^^^^^^^^^
//│ ║  l.11: 	  let i: number
//│ ║        	^^^^^^^^^^^^^^^
//│ ║  l.12: 	}
//│ ╙──      	^
//│ ╔══[ERROR] trait I cannot be used as a type
//│ ║  l.14: 	fun doIs(i: MutArray<I>): MutArray<I>
//│ ╙──      	                     ^
//│ ╔══[ERROR] trait I cannot be used as a type
//│ ║  l.14: 	fun doIs(i: MutArray<I>): MutArray<I>
//│ ╙──      	                                   ^
//│ ╔══[ERROR] Type parameters here are not yet supported in this position
//│ ║  l.15: 	fun inter<U, T>(x: MutArray<(U) & (T)>): MutArray<(U) & (T)>
//│ ╙──      	          ^
//│ ╔══[ERROR] type identifier not found: U
//│ ║  l.15: 	fun inter<U, T>(x: MutArray<(U) & (T)>): MutArray<(U) & (T)>
//│ ╙──      	                            ^^^
//│ ╔══[ERROR] type identifier not found: T
//│ ║  l.15: 	fun inter<U, T>(x: MutArray<(U) & (T)>): MutArray<(U) & (T)>
//│ ╙──      	                                  ^^^
//│ ╔══[ERROR] type identifier not found: U
//│ ║  l.15: 	fun inter<U, T>(x: MutArray<(U) & (T)>): MutArray<(U) & (T)>
//│ ╙──      	                                                  ^^^
//│ ╔══[ERROR] type identifier not found: T
//│ ║  l.15: 	fun inter<U, T>(x: MutArray<(U) & (T)>): MutArray<(U) & (T)>
//│ ╙──      	                                                        ^^^
//│ ╔══[ERROR] Type parameters here are not yet supported in this position
//│ ║  l.17: 	fun translate<T, U>(x: MutArray<T>): MutArray<U>
//│ ╙──      	              ^
//│ ╔══[ERROR] type identifier not found: T
//│ ║  l.17: 	fun translate<T, U>(x: MutArray<T>): MutArray<U>
//│ ╙──      	                                ^
//│ ╔══[ERROR] type identifier not found: U
//│ ║  l.17: 	fun translate<T, U>(x: MutArray<T>): MutArray<U>
//│ ╙──      	                                              ^
//│ ╔══[ERROR] Type parameters here are not yet supported in this position
//│ ║  l.23: 	fun tat<T>(ts: MutArray<Temp<T>>): MutArray<Temp<T>>
//│ ╙──      	        ^
//│ ╔══[ERROR] type identifier not found: T
//│ ║  l.23: 	fun tat<T>(ts: MutArray<Temp<T>>): MutArray<Temp<T>>
//│ ╙──      	                             ^
//│ ╔══[ERROR] type identifier not found: T
//│ ║  l.23: 	fun tat<T>(ts: MutArray<Temp<T>>): MutArray<Temp<T>>
//│ ╙──      	                                                 ^
//│ fun first: (x: MutArray[string],) -> string
//│ fun getZero3: () -> MutArray[number]
//│ fun first2: (fs: MutArray[number -> number],) -> number -> number
//│ fun doEs: (e: MutArray[int],) -> MutArray[int]
//│ class C()
//│ trait I()
//│ fun doCs: (c: MutArray[C],) -> MutArray[C]
//│ fun doIs: (i: MutArray[I],) -> MutArray[I]
//│ fun inter: (x: MutArray[error],) -> MutArray[error]
//│ fun clean: (x: MutArray[(string, number,)],) -> MutArray[(string, number,)]
//│ fun translate: (x: MutArray[error],) -> MutArray[error]
//│ fun uu: (x: MutArray[false | number | true],) -> MutArray[false | number | true]
//│ class Temp[T]() {
//│   let x: T
//│ }
//│ fun ta: (ts: MutArray[Temp[bool]],) -> MutArray[Temp[bool]]
//│ fun tat: (ts: MutArray[Temp[error]],) -> MutArray[Temp[error]]
