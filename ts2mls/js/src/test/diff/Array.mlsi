export declare module Array {
  fun first(x: MutArray<string>): string
  fun getZero3(): MutArray<number>
  fun first2(fs: MutArray<(number) => number>): (number) => number
  fun doEs(e: MutArray<int>): MutArray<int>
  declare class C {}
  declare trait I {
    val i: number
  }
  fun doCs(c: MutArray<C>): MutArray<C>
  fun doIs(i: MutArray<I>): MutArray<I>
  fun inter<U, T>(x: MutArray<(U) & (T)>): MutArray<(U) & (T)>
  fun clean(x: MutArray<(string, number, )>): MutArray<(string, number, )>
  fun translate<T, U>(x: MutArray<T>): MutArray<U>
  fun uu(x: MutArray<((number) | (false)) | (true)>): MutArray<((number) | (false)) | (true)>
  declare class Temp<T> {
    val x: T
  }
  fun ta(ts: MutArray<Temp<(false) | (true)>>): MutArray<Temp<(false) | (true)>>
  fun tat<T>(ts: MutArray<Temp<T>>): MutArray<Temp<T>>
}
