export declare module TSArray {
  fun first(x: MutArray[Str]): Str
  fun getZero3(): MutArray[Num]
  fun first2(fs: MutArray[(x: Num) => Num]): (x: Num) => Num
  fun doEs(e: MutArray[Int]): MutArray[Int]
  declare class C {}
  declare trait I {
    val i: Num
  }
  fun doCs(c: MutArray[C]): MutArray[C]
  fun doIs(i: MutArray[I]): MutArray[I]
  fun inter['U, 'T](x: MutArray[('U) & ('T)]): MutArray[('U) & ('T)]
  fun clean(x: MutArray[(Str, Num, )]): MutArray[(Str, Num, )]
  fun translate['T, 'U](x: MutArray['T]): MutArray['U]
  fun uu(x: MutArray[((Num) | (false)) | (true)]): MutArray[((Num) | (false)) | (true)]
  declare class Temp['T] {
    val x: 'T
  }
  fun ta(ts: MutArray[Temp[(false) | (true)]]): MutArray[Temp[(false) | (true)]]
  fun tat['T](ts: MutArray[Temp['T]]): MutArray[Temp['T]]
}
