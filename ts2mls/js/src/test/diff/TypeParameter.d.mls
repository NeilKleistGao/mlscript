:NewParser
:ParseOnly
let inc: T => number
class CC<T> {
  let print: T => unit
}
let con: T => U
class Printer<T> {
  let print: T => unit
}
let setStringPrinter: Printer<string> => unit
let getStringPrinter: unit => Printer<string>
let foo: Printer<T> => T => T
let foo2: Printer<T> => T => T
class F<T> {
  let x: T
  let GG: U => T
}
trait I<T> {
  let x: T
  let GG: U => T
}
class FFF<T> {
  let fff: T => unit
}
let fff: FFF<string> => string => unit
let getFFF: unit => FFF<number>
//│ |#let| |inc|#:| |T| |=>| |number|↵|#class| |CC|‹|T|›| |{|→|#let| |print|#:| |T| |=>| |unit|←|↵|}|↵|#let| |con|#:| |T| |=>| |U|↵|#class| |Printer|‹|T|›| |{|→|#let| |print|#:| |T| |=>| |unit|←|↵|}|↵|#let| |setStringPrinter|#:| |Printer|‹|string|›| |=>| |unit|↵|#let| |getStringPrinter|#:| |unit| |=>| |Printer|‹|string|›|↵|#let| |foo|#:| |Printer|‹|T|›| |=>| |T| |=>| |T|↵|#let| |foo2|#:| |Printer|‹|T|›| |=>| |T| |=>| |T|↵|#class| |F|‹|T|›| |{|→|#let| |x|#:| |T|↵|#let| |GG|#:| |U| |=>| |T|←|↵|}|↵|#trait| |I|‹|T|›| |{|→|#let| |x|#:| |T|↵|#let| |GG|#:| |U| |=>| |T|←|↵|}|↵|#class| |FFF|‹|T|›| |{|→|#let| |fff|#:| |T| |=>| |unit|←|↵|}|↵|#let| |fff|#:| |FFF|‹|string|›| |=>| |string| |=>| |unit|↵|#let| |getFFF|#:| |unit| |=>| |FFF|‹|number|›|
//│ Parsed: {fun inc: [] -> T -> number; class CC[T]() {fun print: [] -> T -> unit}; fun con: [] -> T -> U; class Printer[T]() {fun print: [] -> T -> unit}; fun setStringPrinter: [] -> Printer[string] -> unit; fun getStringPrinter: [] -> unit -> Printer[string]; fun foo: [] -> Printer[T] -> T -> T; fun foo2: [] -> Printer[T] -> T -> T; class F[T]() {fun x: [] -> T; fun GG: [] -> U -> T}; trait I[T](): {fun x: [] -> T; fun GG: [] -> U -> T}; class FFF[T]() {fun fff: [] -> T -> unit}; fun fff: [] -> FFF[string] -> string -> unit; fun getFFF: [] -> unit -> FFF[number]}
