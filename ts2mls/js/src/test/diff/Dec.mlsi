:NewParser
:ParseOnly
fun getName(id: (string) | (number)): string
fun render(callback: (unit => unit) | (undefined)): string
trait Get() {
  let __call: Unsupported<"(id: string): string", "ts2mls/js/src/test/typescript/Dec.d.ts", 4, 22>
}
class Person(name: string, age: number) {
  fun getName(id: number): string
}
namespace OOO {
}
//│ |#fun| |getName|(|id|#:| |(|string|)| ||| |(|number|)|)|#:| |string|↵|#fun| |render|(|callback|#:| |(|unit| |=>| |unit|)| ||| |(|undefined|)|)|#:| |string|↵|#trait| |Get|(||)| |{|→|#let| |__call|#:| |Unsupported|‹|"(id: string): string"|,| |"ts2mls/js/src/test/typescript/Dec.d.ts"|,| |4|,| |22|›|←|↵|}|↵|#class| |Person|(|name|#:| |string|,| |age|#:| |number|)| |{|→|#fun| |getName|(|id|#:| |number|)|#:| |string|←|↵|}|↵|#namespace| |OOO| |{|↵|}|
//│ Parsed: {fun getName: (id: string | number,) -> string; fun render: (callback: unit -> unit | undefined,) -> string; trait Get() {let __call: Unsupported["(id: string): string", "ts2mls/js/src/test/typescript/Dec.d.ts", 4, 22]}; class Person(name: string, age: number,) {fun getName: (id: number,) -> string}; module OOO() {}}
