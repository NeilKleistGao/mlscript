package mlscript.codegen.ast

import mlscript.codegen.utils.DisjointRangeTree

object IdentifierHelpers:
  private def isInAstralSet(char: Char, set: Array[Int]): Boolean = ???

  def isValidIdentifier(name: String, reserved: Boolean = true): Boolean = ???

  private def isIdentifierStart(char: Char): Boolean =
    if (char < 'A')
      char == '$'
    else if (char <= 'Z')
      true
    else if (char < 'a')
      char == '_'
    else if (char < 'z')
      true
    else if (char <= 0xffff)
      char >= 0xaa && nonASCIIidentifierPartChars.contains(char)
    else
      isInAstralSet(char, astralIdentifierStartCodes)

  def isIdentifierName(name: String): Boolean =
    // name.iterator.zipWithIndex.foreach { case (ch, i) =>
    //   if (i + 1 < name.length && (cp & 0xfc00) == 0xd800) {
    //     val trail = 
    //   }
    // }
    ???

  private def decodeOffsetString(offsets: String): Array[Int] =
    offsets.split(",").map(_.toInt)

  private val astralIdentifierStartCodes: Array[Int] = decodeOffsetString {
    "0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191"
  }

  private val astralIdentifierCodes: Array[Int] = decodeOffsetString {
    "509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239"
  }

  private val nonASCIIidentifierStartCharRanges = List(
    (0x00aa, 0x00aa), (0x00b5, 0x00b5), (0x00ba, 0x00ba), (0x00c0, 0x00d6), (0x00d8, 0x00f6), (0x00f8, 0x02c1), (0x02c6, 0x02d1), (0x02e0, 0x02e4), (0x02ec, 0x02ec), (0x02ee, 0x02ee), (0x0370, 0x0374), (0x0376, 0x0376), (0x0377, 0x0377), (0x037a, 0x037d), (0x037f, 0x037f), (0x0386, 0x0386), (0x0388, 0x038a), (0x038c, 0x038c), (0x038e, 0x03a1), (0x03a3, 0x03f5), (0x03f7, 0x0481), (0x048a, 0x052f), (0x0531, 0x0556), (0x0559, 0x0559), (0x0560, 0x0588), (0x05d0, 0x05ea), (0x05ef, 0x05f2), (0x0620, 0x064a), (0x066e, 0x066e), (0x066f, 0x066f), (0x0671, 0x06d3), (0x06d5, 0x06d5), (0x06e5, 0x06e5), (0x06e6, 0x06e6), (0x06ee, 0x06ee), (0x06ef, 0x06ef), (0x06fa, 0x06fc), (0x06ff, 0x06ff), (0x0710, 0x0710), (0x0712, 0x072f), (0x074d, 0x07a5), (0x07b1, 0x07b1), (0x07ca, 0x07ea), (0x07f4, 0x07f4), (0x07f5, 0x07f5), (0x07fa, 0x07fa), (0x0800, 0x0815), (0x081a, 0x081a), (0x0824, 0x0824), (0x0828, 0x0828), (0x0840, 0x0858), (0x0860, 0x086a), (0x0870, 0x0887), (0x0889, 0x088e), (0x08a0, 0x08c9), (0x0904, 0x0939), (0x093d, 0x093d), (0x0950, 0x0950), (0x0958, 0x0961), (0x0971, 0x0980), (0x0985, 0x098c), (0x098f, 0x098f), (0x0990, 0x0990), (0x0993, 0x09a8), (0x09aa, 0x09b0), (0x09b2, 0x09b2), (0x09b6, 0x09b9), (0x09bd, 0x09bd), (0x09ce, 0x09ce), (0x09dc, 0x09dc), (0x09dd, 0x09dd), (0x09df, 0x09e1), (0x09f0, 0x09f0), (0x09f1, 0x09f1), (0x09fc, 0x09fc), (0x0a05, 0x0a0a), (0x0a0f, 0x0a0f), (0x0a10, 0x0a10), (0x0a13, 0x0a28), (0x0a2a, 0x0a30), (0x0a32, 0x0a32), (0x0a33, 0x0a33), (0x0a35, 0x0a35), (0x0a36, 0x0a36), (0x0a38, 0x0a38), (0x0a39, 0x0a39), (0x0a59, 0x0a5c), (0x0a5e, 0x0a5e), (0x0a72, 0x0a74), (0x0a85, 0x0a8d), (0x0a8f, 0x0a91), (0x0a93, 0x0aa8), (0x0aaa, 0x0ab0), (0x0ab2, 0x0ab2), (0x0ab3, 0x0ab3), (0x0ab5, 0x0ab9), (0x0abd, 0x0abd), (0x0ad0, 0x0ad0), (0x0ae0, 0x0ae0), (0x0ae1, 0x0ae1), (0x0af9, 0x0af9), (0x0b05, 0x0b0c), (0x0b0f, 0x0b0f), (0x0b10, 0x0b10), (0x0b13, 0x0b28), (0x0b2a, 0x0b30), (0x0b32, 0x0b32), (0x0b33, 0x0b33), (0x0b35, 0x0b39), (0x0b3d, 0x0b3d), (0x0b5c, 0x0b5c), (0x0b5d, 0x0b5d), (0x0b5f, 0x0b61), (0x0b71, 0x0b71), (0x0b83, 0x0b83), (0x0b85, 0x0b8a), (0x0b8e, 0x0b90), (0x0b92, 0x0b95), (0x0b99, 0x0b99), (0x0b9a, 0x0b9a), (0x0b9c, 0x0b9c), (0x0b9e, 0x0b9e), (0x0b9f, 0x0b9f), (0x0ba3, 0x0ba3), (0x0ba4, 0x0ba4), (0x0ba8, 0x0baa), (0x0bae, 0x0bb9), (0x0bd0, 0x0bd0), (0x0c05, 0x0c0c), (0x0c0e, 0x0c10), (0x0c12, 0x0c28), (0x0c2a, 0x0c39), (0x0c3d, 0x0c3d), (0x0c58, 0x0c5a), (0x0c5d, 0x0c5d), (0x0c60, 0x0c60), (0x0c61, 0x0c61), (0x0c80, 0x0c80), (0x0c85, 0x0c8c), (0x0c8e, 0x0c90), (0x0c92, 0x0ca8), (0x0caa, 0x0cb3), (0x0cb5, 0x0cb9), (0x0cbd, 0x0cbd), (0x0cdd, 0x0cdd), (0x0cde, 0x0cde), (0x0ce0, 0x0ce0), (0x0ce1, 0x0ce1), (0x0cf1, 0x0cf1), (0x0cf2, 0x0cf2), (0x0d04, 0x0d0c), (0x0d0e, 0x0d10), (0x0d12, 0x0d3a), (0x0d3d, 0x0d3d), (0x0d4e, 0x0d4e), (0x0d54, 0x0d56), (0x0d5f, 0x0d61), (0x0d7a, 0x0d7f), (0x0d85, 0x0d96), (0x0d9a, 0x0db1), (0x0db3, 0x0dbb), (0x0dbd, 0x0dbd), (0x0dc0, 0x0dc6), (0x0e01, 0x0e30), (0x0e32, 0x0e32), (0x0e33, 0x0e33), (0x0e40, 0x0e46), (0x0e81, 0x0e81), (0x0e82, 0x0e82), (0x0e84, 0x0e84), (0x0e86, 0x0e8a), (0x0e8c, 0x0ea3), (0x0ea5, 0x0ea5), (0x0ea7, 0x0eb0), (0x0eb2, 0x0eb2), (0x0eb3, 0x0eb3), (0x0ebd, 0x0ebd), (0x0ec0, 0x0ec4), (0x0ec6, 0x0ec6), (0x0edc, 0x0edf), (0x0f00, 0x0f00), (0x0f40, 0x0f47), (0x0f49, 0x0f6c), (0x0f88, 0x0f8c), (0x1000, 0x102a), (0x103f, 0x103f), (0x1050, 0x1055), (0x105a, 0x105d), (0x1061, 0x1061), (0x1065, 0x1065), (0x1066, 0x1066), (0x106e, 0x1070), (0x1075, 0x1081), (0x108e, 0x108e), (0x10a0, 0x10c5), (0x10c7, 0x10c7), (0x10cd, 0x10cd), (0x10d0, 0x10fa), (0x10fc, 0x1248), (0x124a, 0x124d), (0x1250, 0x1256), (0x1258, 0x1258), (0x125a, 0x125d), (0x1260, 0x1288), (0x128a, 0x128d), (0x1290, 0x12b0), (0x12b2, 0x12b5), (0x12b8, 0x12be), (0x12c0, 0x12c0), (0x12c2, 0x12c5), (0x12c8, 0x12d6), (0x12d8, 0x1310), (0x1312, 0x1315), (0x1318, 0x135a), (0x1380, 0x138f), (0x13a0, 0x13f5), (0x13f8, 0x13fd), (0x1401, 0x166c), (0x166f, 0x167f), (0x1681, 0x169a), (0x16a0, 0x16ea), (0x16ee, 0x16f8), (0x1700, 0x1711), (0x171f, 0x1731), (0x1740, 0x1751), (0x1760, 0x176c), (0x176e, 0x1770), (0x1780, 0x17b3), (0x17d7, 0x17d7), (0x17dc, 0x17dc), (0x1820, 0x1878), (0x1880, 0x18a8), (0x18aa, 0x18aa), (0x18b0, 0x18f5), (0x1900, 0x191e), (0x1950, 0x196d), (0x1970, 0x1974), (0x1980, 0x19ab), (0x19b0, 0x19c9), (0x1a00, 0x1a16), (0x1a20, 0x1a54), (0x1aa7, 0x1aa7), (0x1b05, 0x1b33), (0x1b45, 0x1b4c), (0x1b83, 0x1ba0), (0x1bae, 0x1bae), (0x1baf, 0x1baf), (0x1bba, 0x1be5), (0x1c00, 0x1c23), (0x1c4d, 0x1c4f), (0x1c5a, 0x1c7d), (0x1c80, 0x1c88), (0x1c90, 0x1cba), (0x1cbd, 0x1cbf), (0x1ce9, 0x1cec), (0x1cee, 0x1cf3), (0x1cf5, 0x1cf5), (0x1cf6, 0x1cf6), (0x1cfa, 0x1cfa), (0x1d00, 0x1dbf), (0x1e00, 0x1f15), (0x1f18, 0x1f1d), (0x1f20, 0x1f45), (0x1f48, 0x1f4d), (0x1f50, 0x1f57), (0x1f59, 0x1f59), (0x1f5b, 0x1f5b), (0x1f5d, 0x1f5d), (0x1f5f, 0x1f7d), (0x1f80, 0x1fb4), (0x1fb6, 0x1fbc), (0x1fbe, 0x1fbe), (0x1fc2, 0x1fc4), (0x1fc6, 0x1fcc), (0x1fd0, 0x1fd3), (0x1fd6, 0x1fdb), (0x1fe0, 0x1fec), (0x1ff2, 0x1ff4), (0x1ff6, 0x1ffc), (0x2071, 0x2071), (0x207f, 0x207f), (0x2090, 0x209c), (0x2102, 0x2102), (0x2107, 0x2107), (0x210a, 0x2113), (0x2115, 0x2115), (0x2118, 0x211d), (0x2124, 0x2124), (0x2126, 0x2126), (0x2128, 0x2128), (0x212a, 0x2139), (0x213c, 0x213f), (0x2145, 0x2149), (0x214e, 0x214e), (0x2160, 0x2188), (0x2c00, 0x2ce4), (0x2ceb, 0x2cee), (0x2cf2, 0x2cf2), (0x2cf3, 0x2cf3), (0x2d00, 0x2d25), (0x2d27, 0x2d27), (0x2d2d, 0x2d2d), (0x2d30, 0x2d67), (0x2d6f, 0x2d6f), (0x2d80, 0x2d96), (0x2da0, 0x2da6), (0x2da8, 0x2dae), (0x2db0, 0x2db6), (0x2db8, 0x2dbe), (0x2dc0, 0x2dc6), (0x2dc8, 0x2dce), (0x2dd0, 0x2dd6), (0x2dd8, 0x2dde), (0x3005, 0x3007), (0x3021, 0x3029), (0x3031, 0x3035), (0x3038, 0x303c), (0x3041, 0x3096), (0x309b, 0x309f), (0x30a1, 0x30fa), (0x30fc, 0x30ff), (0x3105, 0x312f), (0x3131, 0x318e), (0x31a0, 0x31bf), (0x31f0, 0x31ff), (0x3400, 0x4dbf), (0x4e00, 0xa48c), (0xa4d0, 0xa4fd), (0xa500, 0xa60c), (0xa610, 0xa61f), (0xa62a, 0xa62a), (0xa62b, 0xa62b), (0xa640, 0xa66e), (0xa67f, 0xa69d), (0xa6a0, 0xa6ef), (0xa717, 0xa71f), (0xa722, 0xa788), (0xa78b, 0xa7ca), (0xa7d0, 0xa7d0), (0xa7d1, 0xa7d1), (0xa7d3, 0xa7d3), (0xa7d5, 0xa7d9), (0xa7f2, 0xa801), (0xa803, 0xa805), (0xa807, 0xa80a), (0xa80c, 0xa822), (0xa840, 0xa873), (0xa882, 0xa8b3), (0xa8f2, 0xa8f7), (0xa8fb, 0xa8fb), (0xa8fd, 0xa8fd), (0xa8fe, 0xa8fe), (0xa90a, 0xa925), (0xa930, 0xa946), (0xa960, 0xa97c), (0xa984, 0xa9b2), (0xa9cf, 0xa9cf), (0xa9e0, 0xa9e4), (0xa9e6, 0xa9ef), (0xa9fa, 0xa9fe), (0xaa00, 0xaa28), (0xaa40, 0xaa42), (0xaa44, 0xaa4b), (0xaa60, 0xaa76), (0xaa7a, 0xaa7a), (0xaa7e, 0xaaaf), (0xaab1, 0xaab1), (0xaab5, 0xaab5), (0xaab6, 0xaab6), (0xaab9, 0xaabd), (0xaac0, 0xaac0), (0xaac2, 0xaac2), (0xaadb, 0xaadd), (0xaae0, 0xaaea), (0xaaf2, 0xaaf4), (0xab01, 0xab06), (0xab09, 0xab0e), (0xab11, 0xab16), (0xab20, 0xab26), (0xab28, 0xab2e), (0xab30, 0xab5a), (0xab5c, 0xab69), (0xab70, 0xabe2), (0xac00, 0xd7a3), (0xd7b0, 0xd7c6), (0xd7cb, 0xd7fb), (0xf900, 0xfa6d), (0xfa70, 0xfad9), (0xfb00, 0xfb06), (0xfb13, 0xfb17), (0xfb1d, 0xfb1d), (0xfb1f, 0xfb28), (0xfb2a, 0xfb36), (0xfb38, 0xfb3c), (0xfb3e, 0xfb3e), (0xfb40, 0xfb40), (0xfb41, 0xfb41), (0xfb43, 0xfb43), (0xfb44, 0xfb44), (0xfb46, 0xfbb1), (0xfbd3, 0xfd3d), (0xfd50, 0xfd8f), (0xfd92, 0xfdc7), (0xfdf0, 0xfdfb), (0xfe70, 0xfe74), (0xfe76, 0xfefc), (0xff21, 0xff3a), (0xff41, 0xff5a), (0xff66, 0xffbe), (0xffc2, 0xffc7), (0xffca, 0xffcf), (0xffd2, 0xffd7), (0xffda, 0xffdc)
  )

  private val nonASCIIidentifierPartCharRanges = nonASCIIidentifierStartCharRanges ++ List(
    (0x200c, 0x200c), (0x200d, 0x200d), (0x00b7, 0x00b7), (0x0300, 0x036f), (0x0387, 0x0387), (0x0483, 0x0487), (0x0591, 0x05bd), (0x05bf, 0x05bf), (0x05c1, 0x05c1), (0x05c2, 0x05c2), (0x05c4, 0x05c4), (0x05c5, 0x05c5), (0x05c7, 0x05c7), (0x0610, 0x061a), (0x064b, 0x0669), (0x0670, 0x0670), (0x06d6, 0x06dc), (0x06df, 0x06e4), (0x06e7, 0x06e7), (0x06e8, 0x06e8), (0x06ea, 0x06ed), (0x06f0, 0x06f9), (0x0711, 0x0711), (0x0730, 0x074a), (0x07a6, 0x07b0), (0x07c0, 0x07c9), (0x07eb, 0x07f3), (0x07fd, 0x07fd), (0x0816, 0x0819), (0x081b, 0x0823), (0x0825, 0x0827), (0x0829, 0x082d), (0x0859, 0x085b), (0x0898, 0x089f), (0x08ca, 0x08e1), (0x08e3, 0x0903), (0x093a, 0x093c), (0x093e, 0x094f), (0x0951, 0x0957), (0x0962, 0x0962), (0x0963, 0x0963), (0x0966, 0x096f), (0x0981, 0x0983), (0x09bc, 0x09bc), (0x09be, 0x09c4), (0x09c7, 0x09c7), (0x09c8, 0x09c8), (0x09cb, 0x09cd), (0x09d7, 0x09d7), (0x09e2, 0x09e2), (0x09e3, 0x09e3), (0x09e6, 0x09ef), (0x09fe, 0x09fe), (0x0a01, 0x0a03), (0x0a3c, 0x0a3c), (0x0a3e, 0x0a42), (0x0a47, 0x0a47), (0x0a48, 0x0a48), (0x0a4b, 0x0a4d), (0x0a51, 0x0a51), (0x0a66, 0x0a71), (0x0a75, 0x0a75), (0x0a81, 0x0a83), (0x0abc, 0x0abc), (0x0abe, 0x0ac5), (0x0ac7, 0x0ac9), (0x0acb, 0x0acd), (0x0ae2, 0x0ae2), (0x0ae3, 0x0ae3), (0x0ae6, 0x0aef), (0x0afa, 0x0aff), (0x0b01, 0x0b03), (0x0b3c, 0x0b3c), (0x0b3e, 0x0b44), (0x0b47, 0x0b47), (0x0b48, 0x0b48), (0x0b4b, 0x0b4d), (0x0b55, 0x0b57), (0x0b62, 0x0b62), (0x0b63, 0x0b63), (0x0b66, 0x0b6f), (0x0b82, 0x0b82), (0x0bbe, 0x0bc2), (0x0bc6, 0x0bc8), (0x0bca, 0x0bcd), (0x0bd7, 0x0bd7), (0x0be6, 0x0bef), (0x0c00, 0x0c04), (0x0c3c, 0x0c3c), (0x0c3e, 0x0c44), (0x0c46, 0x0c48), (0x0c4a, 0x0c4d), (0x0c55, 0x0c55), (0x0c56, 0x0c56), (0x0c62, 0x0c62), (0x0c63, 0x0c63), (0x0c66, 0x0c6f), (0x0c81, 0x0c83), (0x0cbc, 0x0cbc), (0x0cbe, 0x0cc4), (0x0cc6, 0x0cc8), (0x0cca, 0x0ccd), (0x0cd5, 0x0cd5), (0x0cd6, 0x0cd6), (0x0ce2, 0x0ce2), (0x0ce3, 0x0ce3), (0x0ce6, 0x0cef), (0x0cf3, 0x0cf3), (0x0d00, 0x0d03), (0x0d3b, 0x0d3b), (0x0d3c, 0x0d3c), (0x0d3e, 0x0d44), (0x0d46, 0x0d48), (0x0d4a, 0x0d4d), (0x0d57, 0x0d57), (0x0d62, 0x0d62), (0x0d63, 0x0d63), (0x0d66, 0x0d6f), (0x0d81, 0x0d83), (0x0dca, 0x0dca), (0x0dcf, 0x0dd4), (0x0dd6, 0x0dd6), (0x0dd8, 0x0ddf), (0x0de6, 0x0def), (0x0df2, 0x0df2), (0x0df3, 0x0df3), (0x0e31, 0x0e31), (0x0e34, 0x0e3a), (0x0e47, 0x0e4e), (0x0e50, 0x0e59), (0x0eb1, 0x0eb1), (0x0eb4, 0x0ebc), (0x0ec8, 0x0ece), (0x0ed0, 0x0ed9), (0x0f18, 0x0f18), (0x0f19, 0x0f19), (0x0f20, 0x0f29), (0x0f35, 0x0f35), (0x0f37, 0x0f37), (0x0f39, 0x0f39), (0x0f3e, 0x0f3e), (0x0f3f, 0x0f3f), (0x0f71, 0x0f84), (0x0f86, 0x0f86), (0x0f87, 0x0f87), (0x0f8d, 0x0f97), (0x0f99, 0x0fbc), (0x0fc6, 0x0fc6), (0x102b, 0x103e), (0x1040, 0x1049), (0x1056, 0x1059), (0x105e, 0x1060), (0x1062, 0x1064), (0x1067, 0x106d), (0x1071, 0x1074), (0x1082, 0x108d), (0x108f, 0x109d), (0x135d, 0x135f), (0x1369, 0x1371), (0x1712, 0x1715), (0x1732, 0x1734), (0x1752, 0x1752), (0x1753, 0x1753), (0x1772, 0x1772), (0x1773, 0x1773), (0x17b4, 0x17d3), (0x17dd, 0x17dd), (0x17e0, 0x17e9), (0x180b, 0x180d), (0x180f, 0x1819), (0x18a9, 0x18a9), (0x1920, 0x192b), (0x1930, 0x193b), (0x1946, 0x194f), (0x19d0, 0x19da), (0x1a17, 0x1a1b), (0x1a55, 0x1a5e), (0x1a60, 0x1a7c), (0x1a7f, 0x1a89), (0x1a90, 0x1a99), (0x1ab0, 0x1abd), (0x1abf, 0x1ace), (0x1b00, 0x1b04), (0x1b34, 0x1b44), (0x1b50, 0x1b59), (0x1b6b, 0x1b73), (0x1b80, 0x1b82), (0x1ba1, 0x1bad), (0x1bb0, 0x1bb9), (0x1be6, 0x1bf3), (0x1c24, 0x1c37), (0x1c40, 0x1c49), (0x1c50, 0x1c59), (0x1cd0, 0x1cd2), (0x1cd4, 0x1ce8), (0x1ced, 0x1ced), (0x1cf4, 0x1cf4), (0x1cf7, 0x1cf9), (0x1dc0, 0x1dff), (0x203f, 0x203f), (0x2040, 0x2040), (0x2054, 0x2054), (0x20d0, 0x20dc), (0x20e1, 0x20e1), (0x20e5, 0x20f0), (0x2cef, 0x2cf1), (0x2d7f, 0x2d7f), (0x2de0, 0x2dff), (0x302a, 0x302f), (0x3099, 0x3099), (0x309a, 0x309a), (0xa620, 0xa629), (0xa66f, 0xa66f), (0xa674, 0xa67d), (0xa69e, 0xa69e), (0xa69f, 0xa69f), (0xa6f0, 0xa6f0), (0xa6f1, 0xa6f1), (0xa802, 0xa802), (0xa806, 0xa806), (0xa80b, 0xa80b), (0xa823, 0xa827), (0xa82c, 0xa82c), (0xa880, 0xa880), (0xa881, 0xa881), (0xa8b4, 0xa8c5), (0xa8d0, 0xa8d9), (0xa8e0, 0xa8f1), (0xa8ff, 0xa909), (0xa926, 0xa92d), (0xa947, 0xa953), (0xa980, 0xa983), (0xa9b3, 0xa9c0), (0xa9d0, 0xa9d9), (0xa9e5, 0xa9e5), (0xa9f0, 0xa9f9), (0xaa29, 0xaa36), (0xaa43, 0xaa43), (0xaa4c, 0xaa4c), (0xaa4d, 0xaa4d), (0xaa50, 0xaa59), (0xaa7b, 0xaa7d), (0xaab0, 0xaab0), (0xaab2, 0xaab4), (0xaab7, 0xaab7), (0xaab8, 0xaab8), (0xaabe, 0xaabe), (0xaabf, 0xaabf), (0xaac1, 0xaac1), (0xaaeb, 0xaaef), (0xaaf5, 0xaaf5), (0xaaf6, 0xaaf6), (0xabe3, 0xabea), (0xabec, 0xabec), (0xabed, 0xabed), (0xabf0, 0xabf9), (0xfb1e, 0xfb1e), (0xfe00, 0xfe0f), (0xfe20, 0xfe2f), (0xfe33, 0xfe33), (0xfe34, 0xfe34), (0xfe4d, 0xfe4f), (0xff10, 0xff19), (0xff3f, 0xff3f)
  )

  private val nonASCIIidentifierStartChars = DisjointRangeTree.from(nonASCIIidentifierStartCharRanges)

  private val nonASCIIidentifierPartChars = DisjointRangeTree.from(nonASCIIidentifierPartCharRanges)
