// NOTE: This file is autogenerated. Do not modify.
package mlscript.codegen.ast

import mlscript.codegen.{Position => SourcePosition, Location => SourceLocation}
import scala.collection.mutable.{Map => MutMap}

trait Located:
  val start: Option[Int]
  val end: Option[Int]
  val location: Option[SourceLocation]

abstract class Node extends Located:
  val start: Option[Int]
  val end: Option[Int]
  val location: Option[SourceLocation]
  // val range: Option[(Int, Int)]
  var extra: Option[MutMap[String, Any]] = None

  def compact: Boolean =
    extra match
      case None => false
      case Some(map) => map.get("compact") match
        case Some(compact: Boolean) => compact
        case _ => false

  def compact_=(value: Boolean) =
    (extra.getOrElse {
      val m = MutMap.empty[String, Any]
      extra = Some(m)
      m
    }) += ("compact" -> value)

  def parenthesized: Boolean =
    extra match
      case None => false
      case Some(map) => map.get("parenthesized") match
        case Some(parenthesized: Boolean) => parenthesized
        case _ => false

  def parenthesized_=(value: Boolean) =
    (extra.getOrElse {
      val m = MutMap.empty[String, Any]
      extra = Some(m)
      m
    }) += ("parenthesized" -> value)

/**
 * A cover of AST nodes which are part of an official ECMAScript specification.
 */
trait Standardized

/**
 * A cover of any Expressions.
 */
trait Expression

/**
 * A cover of BinaryExpression and LogicalExpression, which share the same AST shape.
 */
trait Binary:
  val operator: BinaryOperator | LogicalOperator
  val left: Node
  val right: Node

/**
 * A cover of FunctionParent and BlockParent.
 */
trait Scopable

/**
 * A cover of AST nodes that start an execution context with new LexicalEnvironment. In other words, they define the scope of let and const declarations.
 */
trait BlockParent

/**
 * Deprecated. Will be removed in Babel 8.
 */
trait Block

/**
 * A cover of any Statements.
 */
trait Statement

/**
 * A cover of AST nodes whose semantic will change when a line terminator is inserted between the operator and the operand.
 */
trait Terminatorless

/**
 * A statement that indicates the completion records. In other words, they define the control flow of the program, such as when should a loop break or an action throws critical errors.
 */
trait CompletionStatement

/**
 * A cover of ConditionalExpression and IfStatement, which share the same AST shape.
 */
trait Conditional:
  val test: Node with Expression

/**
 * A cover of loop statements.
 */
trait Loop

/**
 * A cover of DoWhileStatement and WhileStatement, which share the same AST shape.
 */
trait While

/**
 * A wrapper of expression that does not have runtime semantics.
 */
trait ExpressionWrapper

/**
 * A cover of ForStatements and ForXStatements.
 */
trait For

/**
 * A cover of ForInStatements and ForOfStatements.
 */
trait ForXStatement

/**
 * A cover of functions and methods, the must have body and params. Note: Function is different to FunctionParent. For example, a StaticBlock is a FunctionParent but not Function.
 */
trait Function

/**
 * A cover of AST nodes that start an execution context with new VariableEnvironment. In other words, they define the scope of var declarations.
 */
trait FunctionParent

/**
 * A cover of AST nodes which do not have side-effects. In other words, there is no observable behaviour changes if they are evaluated more than once.
 */
trait Pureish

/**
 * A cover of any Declarations.
 */
trait Declaration

/**
 * A cover of BindingPatterns.
 */
trait PatternLike

/**
 * A cover of left hand side expressions used in the left of assignment expressions and ForXStatements.
 */
trait LVal

/**
 * A cover of TypeScript entities.
 */
trait TSEntityName

/**
 * A cover of Literals, Regular Expression Literals and Template Literals.
 */
trait Literal extends Expression

/**
 * A cover of immutable objects and JSX elements. An object is immutable if no other properties can be defined once created.
 */
trait Immutable

/**
 * Deprecated. Will be removed in Babel 8.
 */
trait UserWhitespacable

/**
 * A cover of object methods and class methods.
 */
trait Method

/**
 * A cover of members in an object literal.
 */
trait ObjectMember

/**
 * A cover of object properties and class properties.
 */
trait Property

/**
 * A cover of UnaryExpression and SpreadElement.
 */
trait UnaryLike

/**
 * A cover of BindingPattern except Identifiers.
 */
trait Pattern extends PatternLike

/**
 * A cover of ClassExpression and ClassDeclaration, which share the same AST shape.
 */
trait Class:
  val superClass: Option[Node with Expression]

/**
 * A cover of ImportDeclaration and ExportDeclaration
 */
trait ModuleDeclaration

/**
 * A cover of any ExportDeclarations.
 */
trait ExportDeclaration

/**
 * A cover of import and export specifiers. Note: It is not the ModuleSpecifier defined in the spec.
 */
trait ModuleSpecifier

/**
 * Deprecated. Will be removed in Babel 8.
 */
trait Accessor

/**
 * A cover of private class elements and private identifiers.
 */
trait Private

/**
 * A cover of non-standard AST types that are sometimes useful for development.
 */
trait Miscellaneous

/**
 * A cover of AST nodes defined for TypeScript.
 */
trait TypeScript

/**
 * A cover of TypeScript type declarations.
 */
trait TSTypeElement

/**
 * A cover of TypeScript type annotations.
 */
trait TSType

/**
 * A cover of primary TypeScript type annotations.
 */
trait TSBaseType
