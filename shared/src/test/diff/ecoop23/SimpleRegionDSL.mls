:NewDefs


// * Adapted example from Compositional Embeddings of Domain-Specific Languages (OOPSLA 2022)


// ******************* Initial System *******************

class Vector(x: int, y: int)
//│ class Vector(x: int, y: int)

class Circle(radius: int)
class Outside[Region](a: Region)
class Union[Region](a: Region, b: Region)
class Intersect[Region](a: Region, b: Region)
class Translate[Region](v: Vector, a: Region)
//│ class Circle(radius: int)
//│ class Outside[Region](a: Region)
//│ class Union[Region](a: Region, b: Region)
//│ class Intersect[Region](a: Region, b: Region)
//│ class Translate[Region](v: Vector, a: Region)

mixin SizeBase {
  fun size(r) =
    if r is
      Circle(_) then 1
      Outside(a) then this.size(a) + 1
      Union(a, b) then this.size(a) + this.size(b) + 1
      Intersect(a, b) then this.size(a) + this.size(b) + 1
      Translate(_, a) then this.size(a) + 1
}
//│ mixin SizeBase() {
//│   this: {size: ('a | 'a0 | 'a1 | 'a2) -> int}
//│   fun size: (Circle | Intersect['a1] | Outside['a] | Translate['a2] | Union['a0]) -> int
//│ }

// ******************* Linguistic Reuse and Meta-Language Optimizations *******************

fun round(n: number): int = 0
//│ fun round: (n: number,) -> int

fun go(x, offset) =
  if x is 0 then Circle(1)
  else
    let shared = go(x - 1, round(offset / 2))
    Union(Translate(Vector(0 - offset, 0), shared), Translate(Vector(offset, 0), shared))
//│ fun go: forall 'Region. (0 | int & ~0, int,) -> 'Region
//│   where
//│     'Region :> Circle | Union[Translate['Region]]

// * Note that first-class polymorphism manages (correctly) to preserve the universal quantification
let circles = go(2, 1024)
//│ let circles: forall 'Region. 'Region
//│   where
//│     'Region :> Circle | Union[Translate['Region]]
//│ circles
//│         = Union {}

// ******************* Adding More Language Constructs *******************

class Univ()
class Empty()
class Scale[Region](v: Vector, a: Region)
//│ class Univ()
//│ class Empty()
//│ class Scale[Region](v: Vector, a: Region)

mixin SizeExt {
  fun size(a) =
    if a is
      Univ then 1
      Empty then 1
      Scale(_, b) then this.size(b) + 1
    else super.size(a)
}
//│ mixin SizeExt() {
//│   super: {size: 'b -> 'c}
//│   this: {size: 'a -> int}
//│   fun size: (Empty | Scale['a] | Univ | 'b & ~#Empty & ~#Scale & ~#Univ) -> (int | 'c)
//│ }

module TestSize extends SizeBase, SizeExt
//│ module TestSize {
//│   fun size: (Empty | Scale['a] | Univ | 'b & ~#Empty & ~#Scale & ~#Univ) -> int
//│ }
//│ where
//│   'a <: Empty | Scale['a] | Univ | 'b & ~#Empty & ~#Scale & ~#Univ
//│   'b <: Circle | Intersect[Empty | Scale['a] | Univ | 'b & ~#Empty & ~#Scale & ~#Univ] | Outside[Empty | Scale['a] | Univ | 'b & ~#Empty & ~#Scale & ~#Univ] | Translate[Empty | Scale['a] | Univ | 'b & ~#Empty & ~#Scale & ~#Univ] | Union[Empty | Scale['a] | Univ | 'b & ~#Empty & ~#Scale & ~#Univ]

TestSize.size(Empty())
//│ int
//│ res
//│     = 1

TestSize.size(circles)
//│ int
//│ res
//│     = 13

TestSize.size(Scale(Vector(1, 1), circles))
//│ int
//│ res
//│     = 14

// ******************* Adding a New Interpretation *******************
// a stupid power (int ** int) implementation
fun pow(x, a) =
  if a is 0 then 1
  else x * pow(x, a - 1)
//│ fun pow: (int, 0 | int & ~0,) -> int

mixin Contains {
  fun contains(a, p) =
    if a is
      Circle(r) then pow(p.x, 2) + pow(p.y, 2) <= pow(r, 2)
      Outside(a) then not (this.contains(a, p))
      Union(lhs, rhs) then this.contains(lhs, p) || this.contains(rhs, p)
      Intersect(lhs, rhs) then this.contains(lhs, p) && this.contains(rhs, p)
      Translate(v, a) then this.contains(a, Vector(p.x - v.x, p.y - v.y))
}
//│ mixin Contains() {
//│   this: {contains: ('a | 'a0 | 'a1, 'b,) -> bool & ('a2, Vector,) -> 'c}
//│   fun contains: (Circle | Intersect['a1] | Outside['a] | Translate['a2] | Union['a0], {x: int, y: int} & 'b,) -> (bool | 'c)
//│ }

module TestContains extends Contains
//│ module TestContains {
//│   fun contains: forall 'Region 'Region0. (Circle | Intersect['Region0] | Outside['a] | Translate['a0] | Union['Region], {x: int, y: int},) -> bool
//│ }
//│ where
//│   'Region0 <: Circle | Intersect['Region0] | Outside['a] | Translate['a0] | Union['Region]
//│   'a <: Circle | Intersect['Region0] | Outside['a] | Translate['a0] | Union['Region]
//│   'a0 <: Circle | Intersect['Region0] | Outside['a] | Translate['a0] | Union['Region]
//│   'Region <: Circle | Intersect['Region0] | Outside['a] | Translate['a0] | Union['Region]

TestContains.contains(Translate(Vector(0, 0), Circle(1)), Vector(0, 0))
//│ bool
//│ res
//│     = true

TestContains.contains(Intersect(Translate(Vector(0, 0), Circle(1)), Circle(1)), Vector(0, 0))
//│ bool
//│ res
//│     = true

TestContains.contains(circles, Vector(0, 0))
//│ bool
//│ res
//│     = false

// ******************* Dependencies, Complex Interpretations, and Domain-Specific Optimizations *******************

fun toString(a: int): string = "foo"
fun concat(a: string, b: string): string = a
//│ fun toString: (a: int,) -> string
//│ fun concat: (a: string, b: string,) -> string

mixin Text {
  fun text(e) =
    if e is
      Circle(r) then concat("a circular region of radius ", toString(r))
      Outside(a) then concat("outside a region of size ", toString(this.size(a)))
      Union then concat("the union of two regions of size ", toString(this.size(e)))
      Intersect then concat("the intersection of two regions of size ", toString(this.size(e)))
      Translate then concat("a translated region of size ", toString(this.size(e)))
}
//│ mixin Text() {
//│   this: {size: (Intersect[nothing] | Translate['Region] | Union[nothing] | 'a) -> int}
//│   fun text: (Circle | Intersect[anything] | Outside['a] | Translate['Region] | Union[anything]) -> string
//│ }

:e
module SizeText extends Text
//│ ╔══[ERROR] Type `#SizeText & {text: forall ?a ?b ?c ?d ?e ?f. ?c -> (?d | ?e | ?a | ?b | ?f)}` does not contain member `size`
//│ ║  l.165: 	      Translate then concat("a translated region of size ", toString(this.size(e)))
//│ ╙──       	                                                                         ^^^^^
//│ ╔══[ERROR] Type `#SizeText & {text: forall ?a ?b ?c ?d ?e ?f. ?e -> (?b | ?a | ?f | ?d | ?c)}` does not contain member `size`
//│ ║  l.164: 	      Intersect then concat("the intersection of two regions of size ", toString(this.size(e)))
//│ ╙──       	                                                                                     ^^^^^
//│ ╔══[ERROR] Type `#SizeText & {text: forall ?a ?b ?c ?d ?e ?f. ?a -> (?d | ?e | ?f | ?b | ?c)}` does not contain member `size`
//│ ║  l.163: 	      Union then concat("the union of two regions of size ", toString(this.size(e)))
//│ ╙──       	                                                                          ^^^^^
//│ ╔══[ERROR] Type `#SizeText & {text: forall ?a ?b ?c ?d ?e ?f. ?c -> (?d | ?b | ?a | ?f | ?e)}` does not contain member `size`
//│ ║  l.162: 	      Outside(a) then concat("outside a region of size ", toString(this.size(a)))
//│ ╙──       	                                                                       ^^^^^
//│ module SizeText {
//│   fun text: (Circle | Intersect[anything] | Outside[anything] | Translate[anything] | Union[anything]) -> string
//│ }

// * Note: this inferred type got *much worse* after this commit (field access type refinement)
module SizeText extends SizeBase, Text
//│ module SizeText {
//│   fun size: forall 'Region 'Region0. (Circle | Intersect['Region] | Outside['a] | Translate['a0] | Union['Region0]) -> int
//│   fun text: forall 'Region 'Region0. (Circle | Intersect[Circle | Intersect['Region] | Outside['a] | Translate['a0] | Union['Region0]] | Outside[Circle | Intersect['Region] | Outside['a] | Translate['a0] | Union['Region0]] | Translate[Circle | Intersect['Region] | Outside['a] | Translate['a0] | Union['Region0]] | Union[Circle | Intersect['Region] | Outside['a] | Translate['a0] | Union['Region0]]) -> string
//│ }
//│ where
//│   'Region <: Circle | Intersect['Region] | Outside['a] | Translate['a0] | Union['Region0]
//│   'a <: Circle | Intersect['Region] | Outside['a] | Translate['a0] | Union['Region0]
//│   'a0 <: Circle | Intersect['Region] | Outside['a] | Translate['a0] | Union['Region0]
//│   'Region0 <: Circle | Intersect['Region] | Outside['a] | Translate['a0] | Union['Region0]

SizeText.text(circles)
//│ string
//│ res
//│     = 'the union of two regions of size '

SizeText.size(circles)
//│ int
//│ res
//│     = 13

SizeText.text(Intersect(Translate(Vector(0, 0), Circle(1)), Circle(1)))
//│ string
//│ res
//│     = 'the intersection of two regions of size '

SizeText.size(Intersect(Translate(Vector(0, 0), Circle(1)), Circle(1)))
//│ int
//│ res
//│     = 4

mixin IsUniv {
  fun isUniv(e) =
    if e is
      Univ then true
      Outside(a) then this.isEmpty(a)
      Union(a, b) then this.isUniv(a) || this.isUniv(b)
      Intersect(a, b) then this.isUniv(a) && this.isUniv(b)
      Translate(_, a) then this.isUniv(a)
      Scale(_, a) then this.isUniv(a)
    else false
}
//│ mixin IsUniv() {
//│   this: {isEmpty: 'a -> 'b, isUniv: ('a0 | 'a1) -> bool & ('a2 | 'a3) -> 'b}
//│   fun isUniv: (Intersect['a1] | Outside['a] | Scale['a3] | Translate['a2] | Union['a0] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ) -> (bool | 'b)
//│ }

mixin IsEmpty {
  fun isEmpty(e) =
    if e is
      Univ then true
      Outside(a) then this.isUniv(a)
      Union(a, b) then this.isEmpty(a) || this.isEmpty(b)
      Intersect(a, b) then this.isEmpty(a) && this.isEmpty(b)
      Translate(_, a) then this.isEmpty(a)
      Scale(_, a) then this.isEmpty(a)
    else false
}
//│ mixin IsEmpty() {
//│   this: {isEmpty: ('a | 'a0) -> bool & ('a1 | 'a2) -> 'b, isUniv: 'a3 -> 'b}
//│   fun isEmpty: (Intersect['a0] | Outside['a3] | Scale['a2] | Translate['a1] | Union['a] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ) -> (bool | 'b)
//│ }

module IsUnivIsEmpty extends IsUniv, IsEmpty
//│ module IsUnivIsEmpty {
//│   fun isEmpty: forall 'Region 'Region0. (Intersect['Region0] | Outside['a] | Scale['a0] | Translate['a1] | Union['Region] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ) -> (bool | 'b)
//│   fun isUniv: forall 'Region1 'Region2. (Intersect['Region1] | Outside['a2] | Scale['a3] | Translate['a4] | Union['Region2] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ) -> (bool | 'b)
//│ }
//│ where
//│   'Region0 <: Intersect['Region0] | Outside['a] | Scale['a0] | Translate['a1] | Union['Region] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a <: Intersect['Region1] | Outside['a2] | Scale['a3] | Translate['a4] | Union['Region2] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'Region1 <: Intersect['Region1] | Outside['a2] | Scale['a3] | Translate['a4] | Union['Region2] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a3 <: Intersect['Region1] | Outside['a2] | Scale['a3] | Translate['a4] | Union['Region2] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a4 <: Intersect['Region1] | Outside['a2] | Scale['a3] | Translate['a4] | Union['Region2] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'Region2 <: Intersect['Region1] | Outside['a2] | Scale['a3] | Translate['a4] | Union['Region2] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a2 <: Intersect['Region0] | Outside['a] | Scale['a0] | Translate['a1] | Union['Region] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a0 <: Intersect['Region0] | Outside['a] | Scale['a0] | Translate['a1] | Union['Region] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a1 <: Intersect['Region0] | Outside['a] | Scale['a0] | Translate['a1] | Union['Region] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'Region <: Intersect['Region0] | Outside['a] | Scale['a0] | Translate['a1] | Union['Region] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ

module IsUnivIsEmpty extends IsEmpty, IsUniv
//│ module IsUnivIsEmpty {
//│   fun isEmpty: forall 'Region 'Region0. (Intersect['Region] | Outside['a] | Scale['a0] | Translate['a1] | Union['Region0] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ) -> (bool | 'b)
//│   fun isUniv: forall 'Region1 'Region2. (Intersect['Region2] | Outside['a2] | Scale['a3] | Translate['a4] | Union['Region1] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ) -> (bool | 'b)
//│ }
//│ where
//│   'Region <: Intersect['Region] | Outside['a] | Scale['a0] | Translate['a1] | Union['Region0] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a <: Intersect['Region2] | Outside['a2] | Scale['a3] | Translate['a4] | Union['Region1] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'Region2 <: Intersect['Region2] | Outside['a2] | Scale['a3] | Translate['a4] | Union['Region1] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a3 <: Intersect['Region2] | Outside['a2] | Scale['a3] | Translate['a4] | Union['Region1] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a4 <: Intersect['Region2] | Outside['a2] | Scale['a3] | Translate['a4] | Union['Region1] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'Region1 <: Intersect['Region2] | Outside['a2] | Scale['a3] | Translate['a4] | Union['Region1] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a2 <: Intersect['Region] | Outside['a] | Scale['a0] | Translate['a1] | Union['Region0] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a0 <: Intersect['Region] | Outside['a] | Scale['a0] | Translate['a1] | Union['Region0] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a1 <: Intersect['Region] | Outside['a] | Scale['a0] | Translate['a1] | Union['Region0] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'Region0 <: Intersect['Region] | Outside['a] | Scale['a0] | Translate['a1] | Union['Region0] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ

IsUnivIsEmpty.isUniv(circles)
//│ bool | 'a
//│ res
//│     = false

IsUnivIsEmpty.isEmpty(circles)
//│ bool | 'a
//│ res
//│     = false

class Foo()
IsUnivIsEmpty.isEmpty(Scale(Vector(1, 2), Intersect(Foo(), circles)))
//│ class Foo()
//│ bool | 'a
//│ res
//│     = false

mixin Eliminate {
  fun eliminate(e) =
    if e is
      Outside(Outside(a)) then this.eliminate(a)
      Outside(a) then Outside(this.eliminate(a))
      Union(a, b) then Union(this.eliminate(a), this.eliminate(b))
      Intersect(a, b) then Intersect(this.eliminate(a), this.eliminate(b))
      Translate(v, a) then Translate(v, this.eliminate(a))
      Scale(v, a) then Scale(v, this.eliminate(a))
    else e
}
//│ mixin Eliminate() {
//│   this: {eliminate: 'a -> 'b & 'a0 -> 'Region & 'a1 -> 'Region0 & 'a2 -> 'Region1 & 'a3 -> 'Region2 & 'a4 -> 'Region3}
//│   fun eliminate: (Intersect['a2] | Outside['a0 & (Outside['a] | ~#Outside)] | Scale['a4] | Translate['a3] | Union['a1] | 'b & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union) -> (Intersect['Region1] | Outside['Region] | Scale['Region3] | Translate['Region2] | Union['Region0] | 'b)
//│ }

module TestElim extends Eliminate
//│ module TestElim {
//│   fun eliminate: forall 'Region 'b 'Region0 'c. (Intersect['Region] | Outside['a & (Outside['a0] | ~#Outside)] | Scale['a1] | Translate['a2] | Union['Region0] | 'c & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union) -> ('d | 'b | 'c)
//│ }
//│ where
//│   'd :> 'b | 'e
//│   'b :> Outside['d | 'b | 'f] | Translate['d | 'b | 'g] | Scale['d | 'b | 'h] | Union['d | 'b | 'i | 'j] | Intersect['d | 'b | 'k | 'l]
//│   'Region <: Intersect['Region] | Outside['a & (Outside['a0] | ~#Outside)] | Scale['a1] | Translate['a2] | Union['Region0] | 'k & 'l & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union
//│   'a <: Intersect['Region] | Outside['a & (Outside['a0] | ~#Outside)] | Scale['a1] | Translate['a2] | Union['Region0] | 'f & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union
//│   'a0 <: Intersect['Region] | Outside['a & (Outside['a0] | ~#Outside)] | Scale['a1] | Translate['a2] | Union['Region0] | 'e & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union
//│   'a1 <: Intersect['Region] | Outside['a & (Outside['a0] | ~#Outside)] | Scale['a1] | Translate['a2] | Union['Region0] | 'h & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union
//│   'a2 <: Intersect['Region] | Outside['a & (Outside['a0] | ~#Outside)] | Scale['a1] | Translate['a2] | Union['Region0] | 'g & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union
//│   'Region0 <: Intersect['Region] | Outside['a & (Outside['a0] | ~#Outside)] | Scale['a1] | Translate['a2] | Union['Region0] | 'i & 'j & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union

TestElim.eliminate(Outside(Outside(Univ())))
//│ forall 'a. 'b | 'a
//│   where
//│     'b :> forall 'a. Univ | 'a
//│     'a :> Outside[forall 'a. Univ | 'b | 'a] | Union[forall 'a. 'b | 'a] | Intersect[forall 'a. 'b | 'a] | Translate[forall 'a. 'b | 'a] | Scale[forall 'a. 'b | 'a]
//│ res
//│     = Univ {}

TestElim.eliminate(circles)
//│ forall 'a. Circle | 'b | 'a
//│   where
//│     'b :> forall 'a. 'a
//│     'a :> Outside[forall 'a. 'b | 'a] | Union[forall 'a. 'b | 'a] | Intersect[forall 'a. 'b | 'a] | Translate[forall 'a. Circle | 'b | 'a] | Scale[forall 'a. 'b | 'a]
//│ res
//│     = Union {}

fun mk(n) = if n is
  1 then Outside(mk(n))
  2 then Union(mk(n), mk(n))
  3 then Intersect(mk(n), mk(n))
  4 then Translate(Vector(0, 0), mk(n))
  _ then Scale(Vector(0, 0), mk(n))
//│ fun mk: forall 'Region. anything -> 'Region
//│   where
//│     'Region :> Intersect['Region] | Outside['Region] | Scale['Region] | Translate['Region] | Union['Region]

:re
TestElim.eliminate(mk(100))
//│ forall 'a. 'b | 'a
//│   where
//│     'b :> forall 'a. 'a
//│     'a :> Outside[forall 'a. 'b | 'a] | Union[forall 'a. 'b | 'a] | Intersect[forall 'a. 'b | 'a] | Translate[forall 'a. 'b | 'a] | Scale[forall 'a. 'b | 'a]
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// *************************************************************************

module Lang extends SizeBase, SizeExt, Contains, Text, IsUniv, IsEmpty, Eliminate
//│ module Lang {
//│   fun contains: forall 'Region 'Region0. (Circle | Intersect['Region0] | Outside['a] | Translate['a0] | Union['Region], {x: int, y: int},) -> bool
//│   fun eliminate: forall 'Region1 'b 'Region2 'c. (Intersect['Region2] | Outside['a1 & (Outside['a2] | ~#Outside)] | Scale['a3] | Translate['a4] | Union['Region1] | 'b & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union) -> ('d | 'c | 'b)
//│   fun isEmpty: forall 'Region3 'Region4. (Intersect['Region3] | Outside['a5] | Scale['a6] | Translate['a7] | Union['Region4] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ) -> (bool | 'e)
//│   fun isUniv: forall 'Region5 'Region6. (Intersect['Region5] | Outside['a8] | Scale['a9] | Translate['a10] | Union['Region6] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ) -> (bool | 'e)
//│   fun size: (Empty | Scale['a11] | Univ | 'f & ~#Empty & ~#Scale & ~#Univ) -> int
//│   fun text: (Circle | Intersect[Empty | Scale['a11] | Univ | 'f & ~#Empty & ~#Scale & ~#Univ] | Outside[Empty | Scale['a11] | Univ | 'f & ~#Empty & ~#Scale & ~#Univ] | Translate[Empty | Scale['a11] | Univ | 'f & ~#Empty & ~#Scale & ~#Univ] | Union[Empty | Scale['a11] | Univ | 'f & ~#Empty & ~#Scale & ~#Univ]) -> string
//│ }
//│ where
//│   'a11 <: Empty | Scale['a11] | Univ | 'f & ~#Empty & ~#Scale & ~#Univ
//│   'f <: Circle | Intersect[Empty | Scale['a11] | Univ | 'f & ~#Empty & ~#Scale & ~#Univ] | Outside[Empty | Scale['a11] | Univ | 'f & ~#Empty & ~#Scale & ~#Univ] | Translate[Empty | Scale['a11] | Univ | 'f & ~#Empty & ~#Scale & ~#Univ] | Union[Empty | Scale['a11] | Univ | 'f & ~#Empty & ~#Scale & ~#Univ]
//│   'Region3 <: Intersect['Region3] | Outside['a5] | Scale['a6] | Translate['a7] | Union['Region4] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a5 <: Intersect['Region5] | Outside['a8] | Scale['a9] | Translate['a10] | Union['Region6] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'Region5 <: Intersect['Region5] | Outside['a8] | Scale['a9] | Translate['a10] | Union['Region6] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a9 <: Intersect['Region5] | Outside['a8] | Scale['a9] | Translate['a10] | Union['Region6] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a10 <: Intersect['Region5] | Outside['a8] | Scale['a9] | Translate['a10] | Union['Region6] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'Region6 <: Intersect['Region5] | Outside['a8] | Scale['a9] | Translate['a10] | Union['Region6] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a8 <: Intersect['Region3] | Outside['a5] | Scale['a6] | Translate['a7] | Union['Region4] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a6 <: Intersect['Region3] | Outside['a5] | Scale['a6] | Translate['a7] | Union['Region4] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'a7 <: Intersect['Region3] | Outside['a5] | Scale['a6] | Translate['a7] | Union['Region4] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'Region4 <: Intersect['Region3] | Outside['a5] | Scale['a6] | Translate['a7] | Union['Region4] | Univ | ~Intersect[anything] & ~Outside[anything] & ~Scale[anything] & ~Translate[anything] & ~Union[anything] & ~Univ
//│   'd :> 'c | 'g
//│   'c :> Outside['d | 'c | 'h] | Union['d | 'c | 'i | 'j] | Intersect['d | 'c | 'k | 'l] | Translate['d | 'c | 'm] | Scale['d | 'c | 'n]
//│   'Region2 <: Intersect['Region2] | Outside['a1 & (Outside['a2] | ~#Outside)] | Scale['a3] | Translate['a4] | Union['Region1] | 'k & 'l & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union
//│   'a1 <: Intersect['Region2] | Outside['a1 & (Outside['a2] | ~#Outside)] | Scale['a3] | Translate['a4] | Union['Region1] | 'h & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union
//│   'a2 <: Intersect['Region2] | Outside['a1 & (Outside['a2] | ~#Outside)] | Scale['a3] | Translate['a4] | Union['Region1] | 'g & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union
//│   'a3 <: Intersect['Region2] | Outside['a1 & (Outside['a2] | ~#Outside)] | Scale['a3] | Translate['a4] | Union['Region1] | 'n & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union
//│   'a4 <: Intersect['Region2] | Outside['a1 & (Outside['a2] | ~#Outside)] | Scale['a3] | Translate['a4] | Union['Region1] | 'm & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union
//│   'Region1 <: Intersect['Region2] | Outside['a1 & (Outside['a2] | ~#Outside)] | Scale['a3] | Translate['a4] | Union['Region1] | 'i & 'j & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union
//│   'Region0 <: Circle | Intersect['Region0] | Outside['a] | Translate['a0] | Union['Region]
//│   'a <: Circle | Intersect['Region0] | Outside['a] | Translate['a0] | Union['Region]
//│   'a0 <: Circle | Intersect['Region0] | Outside['a] | Translate['a0] | Union['Region]
//│   'Region <: Circle | Intersect['Region0] | Outside['a] | Translate['a0] | Union['Region]

Lang.size(circles)
//│ int
//│ res
//│     = 13

Lang.contains(circles, Vector(0, 0))
//│ bool
//│ res
//│     = false

Lang.text(circles)
//│ string
//│ res
//│     = 'the union of two regions of size '

Lang.isUniv(circles)
//│ bool | 'a
//│ res
//│     = false

Lang.isEmpty(circles)
//│ bool | 'a
//│ res
//│     = false

Lang.size(Lang.eliminate(circles))
//│ int
//│ res
//│     = 13

:re
Lang.size(mk(100))
//│ int
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:e
:re
Lang.contains(mk(100), Vector(0, 0))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.447: 	Lang.contains(mk(100), Vector(0, 0))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Scale[?Region]` does not match type `Circle | Intersect[?Region0] | Outside[?Region1] | Translate[?Region2] | Union[?Region3]`
//│ ║  l.356: 	  _ then Scale(Vector(0, 0), mk(n))
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.114: 	    if a is
//│ ║         	       ^
//│ ╟── Note: type parameter Region is defined at:
//│ ║  l.16: 	class Translate[Region](v: Vector, a: Region)
//│ ╙──      	                ^^^^^^
//│ error
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:e
:re
Lang.text(mk(100))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.467: 	Lang.text(mk(100))
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Scale[?Region]` does not match type `Circle | Intersect[?Region0] | Outside[?Region1] | Translate[?Region2] | Union[?Region3]`
//│ ║  l.356: 	  _ then Scale(Vector(0, 0), mk(n))
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `Circle | Intersect[?Region4] | Outside[?Region5] | Translate[?Region6] | Union[?Region7]`
//│ ║  l.467: 	Lang.text(mk(100))
//│ ║         	          ^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.160: 	    if e is
//│ ╙──       	       ^
//│ error | string
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
Lang.isUniv(mk(100))
//│ bool | 'a
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
Lang.isEmpty(mk(100))
//│ bool | 'a
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
Lang.size(Lang.eliminate(mk(100)))
//│ int
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded
