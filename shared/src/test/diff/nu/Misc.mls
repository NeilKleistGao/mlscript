:NewDefs


1
//│ 1
//│ res
//│     = 1

2 + 2
//│ int
//│ res
//│     = 4

let r = { x: 1 }
//│ let r: {x: 1}
//│ r
//│   = { x: 1 }

r.x + 1
//│ int
//│ res
//│     = 2


x => x + 1
//│ int -> int
//│ res
//│     = [Function: res]

{ y } => y
//│ {y: 'a} -> 'a
//│ res
//│     = [Function: res]

fun f({ y }) = y
//│ fun f: forall 'a. {y: 'a} -> 'a

fun f of { y } = y
//│ fun f: forall 'a. {y: 'a} -> 'a

f({y: 1})
//│ 1
//│ res
//│     = 1


let f = (x, y) => x + y
//│ let f: (int, int,) -> int
//│ f
//│   = [Function: f2]

f(1, 2)
//│ int
//│ res
//│     = 3

:e
f([1, 2])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.58: 	f([1, 2])
//│ ║        	^^^^^^^^^
//│ ╟── argument of type `((1, 2,),)` does not match type `(?a, ?b,)`
//│ ║  l.58: 	f([1, 2])
//│ ║        	 ^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.47: 	let f = (x, y) => x + y
//│ ╙──      	         ^^^^
//│ error | int
//│ res
//│     = '1,2undefined'



let f = ((x, y)) => x + y
//│ let f: (int, int,) -> int
//│ f
//│   = [Function: f3]

:e
f(1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.80: 	f(1, 2)
//│ ║        	^^^^^^^
//│ ╟── argument list of type `(1, 2,)` does not match type `((?a, ?b,),)`
//│ ║  l.80: 	f(1, 2)
//│ ╙──      	 ^^^^^^
//│ error | int
//│ res
//│ Runtime error:
//│   TypeError: number 1 is not iterable (cannot read property Symbol(Symbol.iterator))



f((1, 2))
//│ int
//│ res
//│     = 3

f([1, 2])
//│ int
//│ res
//│     = 3

let f = (((x, y))) => x + y
//│ let f: (int, int,) -> int
//│ f
//│   = [Function: f4]

// TODO parse as tuple arg!
let f = [x, y] => x + y
//│ let f: (int, int,) -> int
//│ f
//│   = [Function: f5]

f(1, 2)
//│ int
//│ res
//│     = 3

// TODO...
let f = [[[x, y]]] => x + y
//│ let f: (int, int,) -> int
//│ f
//│   = [Function: f6]


