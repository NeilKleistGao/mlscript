:NewDefs


:pe
let v1: {mut 1}
//│ ╔══[PARSE ERROR] Record field should have a name
//│ ║  l.5: 	let v1: {mut 1}
//│ ╙──     	             ^
//│ let v1: {mut <error>: 1}
//│ v1
//│    = <missing implementation>

let v1: {mut int}
//│ let v1: {mut int: int}
//│ v1
//│    = <missing implementation>

let v1 = {mut int: 0}
//│ let v1: {mut int: 'int}
//│   where
//│     'int :> 0
//│ v1
//│    = { int: 0 }


let v1: {mut x: int}
//│ let v1: {mut x: int}
//│ v1
//│    = <missing implementation>

:pe
let v1 = {mut 1}
//│ ╔══[PARSE ERROR] Record field should have a name
//│ ║  l.32: 	let v1 = {mut 1}
//│ ╙──      	              ^
//│ let v1: {mut <error>: '<error>}
//│   where
//│     '<error> :> 1
//│ v1
//│    = { '<error>': 1 }

let v1 = {mut x: 1}
//│ let v1: {mut x: 'x}
//│   where
//│     'x :> 1
//│ v1
//│    = { x: 1 }

// * TODO: support this syntax?
:pe
v1.x = 1
//│ ╔══[PARSE ERROR] Expected end of input; found '=' instead
//│ ║  l.51: 	v1.x = 1
//│ ╙──      	     ^
//│ 1
//│ res
//│     = 1

// * TODO: support this syntax?
:e
:ng
v1.x <- 1
//│ ╔══[ERROR] identifier not found: <-
//│ ║  l.62: 	v1.x <- 1
//│ ╙──      	     ^^
//│ error


let v2: (mut int)
//│ let v2: (mut int,)
//│ v2
//│    = <missing implementation>

let v2 = (mut 1)
//│ let v2: (mut 'a,)
//│   where
//│     'a :> 1
//│ v2
//│    = [ 1 ]

let v2: (mut x: int)
//│ let v2: (mut x: int,)
//│ v2
//│    = <missing implementation>

let v2 = (mut 1)
//│ let v2: (mut 'a,)
//│   where
//│     'a :> 1
//│ v2
//│    = [ 1 ]

let v2 = (mut x: 1)
//│ let v2: (mut x: 'x,)
//│   where
//│     'x :> 1
//│ v2
//│    = [ 1 ]

let v2 = (mut y: 1)
//│ let v2: (mut y: 'y,)
//│   where
//│     'y :> 1
//│ v2
//│    = [ 1 ]


