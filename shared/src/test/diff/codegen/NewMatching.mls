:NewDefs

class V0()
class V1(x: Int)
class V2(x: Int, y: Int)
class Pos(x: Int)
class V22(c1: V2, c2: V2)
class Half(invalid: Int, valid: Int)
class None(no: Int)
//│ class V0()
//│ class V1(x: Int)
//│ class V2(x: Int, y: Int)
//│ class Pos(x: Int)
//│ class V22(c1: V2, c2: V2)
//│ class Half(invalid: Int, valid: Int)
//│ class None(no: Int)

:js
fun sum(v) =
  if v is
    V0() then 0
    V1(a) then a
    V2(a, b) then a + b
    Pos(x) and x > 0 then x
    V22(V2(x1, y1), V2(x2, y2)) then x1 + y1 + x2 + y2
    Half(_, x) then x
    None(_) then 0
    _ then -1
//│ fun sum: Object -> Int
//│ // Prelude
//│ class TypingUnit1 {}
//│ const typing_unit1 = new TypingUnit1;
//│ // Query 1
//│ globalThis.sum = function sum(v) {
//│   return ((() => {
//│     let a;
//│     return (a = v, a instanceof V0.class ? 0 : a instanceof V1.class ? (({ x: a }) => a)(V1.class.$unapply(a)) : a instanceof V2.class ? (({
//│       x: a,
//│       y: b
//│     }) => a + b)(V2.class.$unapply(a)) : a instanceof Pos.class ? (({ x }) => x > 0 === true ? x : -1)(Pos.class.$unapply(a)) : a instanceof V22.class ? (({
//│       c1: tmp0,
//│       c2: tmp1
//│     }) => tmp0 instanceof V2.class ? (({
//│       x: x1,
//│       y: y1
//│     }) => tmp1 instanceof V2.class ? (({
//│       x: x2,
//│       y: y2
//│     }) => x1 + y1 + x2 + y2)(V2.class.$unapply(tmp1)) : -1)(V2.class.$unapply(tmp0)) : -1)(V22.class.$unapply(a)) : a instanceof Half.class ? (({ valid: x }) => x)(Half.class.$unapply(a)) : a instanceof None.class ? 0 : -1);
//│   })());
//│ };
//│ // End of generated code

sum(V0())
sum(V1(42))
sum(V2(1, 1))
sum(Pos(1))
sum(Pos(0))
sum(V22(V2(1, 2), V2(3, 4)))
sum(Half(-1, 1))
sum(None(42))
sum(42)
//│ Int
//│ res
//│     = 0
//│ res
//│     = 42
//│ res
//│     = 2
//│ res
//│     = 1
//│ res
//│     = -1
//│ res
//│     = 10
//│ res
//│     = 1
//│ res
//│     = 0
//│ res
//│     = -1

class Some[T](value: T)
//│ class Some[T](value: T)

:js
fun get1(s) =
  if s is
    Some(V1(x)) then x
    Some(y) then y
//│ fun get1: forall 'value. Some[Object & 'value] -> (Int | 'value)
//│ // Prelude
//│ class TypingUnit4 {}
//│ const typing_unit4 = new TypingUnit4;
//│ // Query 1
//│ globalThis.get1 = function get1(s) {
//│   return ((() => {
//│     let a;
//│     return (a = s, a instanceof Some.class ? (({
//│       value: tmp2,
//│       value: y
//│     }) => tmp2 instanceof V1.class ? (({ x }) => x)(V1.class.$unapply(tmp2)) : y)(Some.class.$unapply(a)) : (() => {
//│       throw new Error("non-exhaustive case expression");
//│     })());
//│   })());
//│ };
//│ // End of generated code

get1(Some(V1(1)))
get1(Some(V0()))
//│ Int | V0
//│ res
//│     = 1
//│ res
//│     = V0 {}
