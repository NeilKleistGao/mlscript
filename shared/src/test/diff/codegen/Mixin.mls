:NewParser
:NewDefs

:js
:ShowRepl
class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: int)
//│ // Prelude
//│ let res;
//│ let typing_unit = {
//│   cache: {},
//│   get Add() {
//│     const cache = this.cache;
//│     if (this.cache.Add === undefined) {
//│       class Add {
//│         #lhs;
//│         #rhs;
//│         get lhs() { return this.#lhs; }
//│         get rhs() { return this.#rhs; }
//│         constructor(lhs, rhs) {
//│           this.#lhs = lhs;
//│           this.#rhs = rhs;
//│         }
//│       };
//│       this.cache.Add = ((lhs, rhs) => new Add(lhs, rhs));
//│       this.cache.Add["class"] = Add;
//│     }
//│     return this.cache.Add;
//│   },
//│   get Lit() {
//│     const cache = this.cache;
//│     if (this.cache.Lit === undefined) {
//│       class Lit {
//│         #n;
//│         get n() { return this.#n; }
//│         constructor(n) {
//│           this.#n = n;
//│         }
//│       };
//│       this.cache.Lit = ((n) => new Lit(n));
//│       this.cache.Lit["class"] = Lit;
//│     }
//│     return this.cache.Lit;
//│   }
//│ };
//│ globalThis.Add = typing_unit.Add;
//│ globalThis.Lit = typing_unit.Lit;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:6
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let res;
//│ │ │   let typing_unit = {
//│ │ │     cache: {},
//│ │ │     get Add() {
//│ │ │       const cache = this.cache;
//│ │ │       if (this.cache.Add === undefined) {
//│ │ │         class Add {
//│ │ │           #lhs;
//│ │ │           #rhs;
//│ │ │           get lhs() { return this.#lhs; }
//│ │ │           get rhs() { return this.#rhs; }
//│ │ │           constructor(lhs, rhs) {
//│ │ │             this.#lhs = lhs;
//│ │ │             this.#rhs = rhs;
//│ │ │           }
//│ │ │         };
//│ │ │         this.cache.Add = ((lhs, rhs) => new Add(lhs, rhs));
//│ │ │         this.cache.Add["class"] = Add;
//│ │ │       }
//│ │ │       return this.cache.Add;
//│ │ │     },
//│ │ │     get Lit() {
//│ │ │       const cache = this.cache;
//│ │ │       if (this.cache.Lit === undefined) {
//│ │ │         class Lit {
//│ │ │           #n;
//│ │ │           get n() { return this.#n; }
//│ │ │           constructor(n) {
//│ │ │             this.#n = n;
//│ │ │           }
//│ │ │         };
//│ │ │         this.cache.Lit = ((n) => new Lit(n));
//│ │ │         this.cache.Lit["class"] = Lit;
//│ │ │       }
//│ │ │       return this.cache.Lit;
//│ │ │     }
//│ │ │   };
//│ │ │   globalThis.Add = typing_unit.Add;
//│ │ │   globalThis.Lit = typing_unit.Lit;
//│ │ └── Reply
//│ │     [Function (anonymous)] { class: [class Lit] }
//│ └── No queries

:js
:ShowRepl
mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: 'lhs -> int}
//│   fun eval: (Add['lhs] | Lit) -> int
//│ }
//│ // Prelude
//│ let typing_unit1 = {
//│   cache: {},
//│   EvalBase(base) {
//│     return (class EvalBase extends base {
//│       constructor(...rest) {
//│         super(...rest);
//│       }
//│       eval(e) {
//│         const self = this;
//│         return ((() => {
//│           let a;
//│           return (a = e, a instanceof Lit["class"] ? ((n) => n)(e.n) : a instanceof Add["class"] ? ((l) => ((r) => self.eval(l) + self.eval(r))(e.rhs))(e.lhs) : (() => {
//│             throw new Error("non-exhaustive case expression");
//│           })());
//│         })());
//│       }
//│     });
//│   }
//│ };
//│ globalThis.EvalBase = typing_unit1.EvalBase;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:99
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let typing_unit1 = {
//│ │ │     cache: {},
//│ │ │     EvalBase(base) {
//│ │ │       return (class EvalBase extends base {
//│ │ │         constructor(...rest) {
//│ │ │           super(...rest);
//│ │ │         }
//│ │ │         eval(e) {
//│ │ │           const self = this;
//│ │ │           return ((() => {
//│ │ │             let a;
//│ │ │             return (a = e, a instanceof Lit["class"] ? ((n) => n)(e.n) : a instanceof Add["class"] ? ((l) => ((r) => self.eval(l) + self.eval(r))(e.rhs))(e.lhs) : (() => {
//│ │ │               throw new Error("non-exhaustive case expression");
//│ │ │             })());
//│ │ │           })());
//│ │ │         }
//│ │ │       });
//│ │ │     }
//│ │ │   };
//│ │ │   globalThis.EvalBase = typing_unit1.EvalBase;
//│ │ └── Reply
//│ │     [Function: EvalBase]
//│ └── No queries

:js
:ShowRepl
class Neg<A>(expr: A)
//│ class Neg[A](expr: A)
//│ // Prelude
//│ let typing_unit2 = {
//│   cache: {},
//│   get Neg() {
//│     const cache = this.cache;
//│     if (this.cache.Neg === undefined) {
//│       class Neg {
//│         #expr;
//│         get expr() { return this.#expr; }
//│         constructor(expr) {
//│           this.#expr = expr;
//│         }
//│       };
//│       this.cache.Neg = ((expr) => new Neg(expr));
//│       this.cache.Neg["class"] = Neg;
//│     }
//│     return this.cache.Neg;
//│   }
//│ };
//│ globalThis.Neg = typing_unit2.Neg;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:160
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let typing_unit2 = {
//│ │ │     cache: {},
//│ │ │     get Neg() {
//│ │ │       const cache = this.cache;
//│ │ │       if (this.cache.Neg === undefined) {
//│ │ │         class Neg {
//│ │ │           #expr;
//│ │ │           get expr() { return this.#expr; }
//│ │ │           constructor(expr) {
//│ │ │             this.#expr = expr;
//│ │ │           }
//│ │ │         };
//│ │ │         this.cache.Neg = ((expr) => new Neg(expr));
//│ │ │         this.cache.Neg["class"] = Neg;
//│ │ │       }
//│ │ │       return this.cache.Neg;
//│ │ │     }
//│ │ │   };
//│ │ │   globalThis.Neg = typing_unit2.Neg;
//│ │ └── Reply
//│ │     [Function (anonymous)] { class: [class Neg] }
//│ └── No queries

:js
:ShowRepl
mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: 'expr -> int}
//│   fun eval: (Neg['expr] | 'a & ~#Neg) -> (int | 'b)
//│ }
//│ // Prelude
//│ let typing_unit3 = {
//│   cache: {},
//│   EvalNeg(base) {
//│     return (class EvalNeg extends base {
//│       constructor(...rest) {
//│         super(...rest);
//│       }
//│       eval(e) {
//│         const self = this;
//│         return ((() => {
//│           return e instanceof Neg["class"] ? ((d) => 0 - self.eval(d))(e.expr) : super.eval(e);
//│         })());
//│       }
//│     });
//│   }
//│ };
//│ globalThis.EvalNeg = typing_unit3.EvalNeg;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:211
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let typing_unit3 = {
//│ │ │     cache: {},
//│ │ │     EvalNeg(base) {
//│ │ │       return (class EvalNeg extends base {
//│ │ │         constructor(...rest) {
//│ │ │           super(...rest);
//│ │ │         }
//│ │ │         eval(e) {
//│ │ │           const self = this;
//│ │ │           return ((() => {
//│ │ │             return e instanceof Neg["class"] ? ((d) => 0 - self.eval(d))(e.expr) : super.eval(e);
//│ │ │           })());
//│ │ │         }
//│ │ │       });
//│ │ │     }
//│ │ │   };
//│ │ │   globalThis.EvalNeg = typing_unit3.EvalNeg;
//│ │ └── Reply
//│ │     [Function: EvalNeg]
//│ └── No queries

:js
:ShowRepl
mixin EvalNegNeg {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNegNeg() {
//│   super: {eval: (Neg['A] | 'a) -> 'b}
//│   this: {eval: 'expr -> 'b}
//│   fun eval: (Neg['A & (~#Neg | Neg['expr])] | 'a & ~#Neg) -> 'b
//│ }
//│ // Prelude
//│ let typing_unit4 = {
//│   cache: {},
//│   EvalNegNeg(base) {
//│     return (class EvalNegNeg extends base {
//│       constructor(...rest) {
//│         super(...rest);
//│       }
//│       eval(e) {
//│         const self = this;
//│         return ((() => {
//│           return e instanceof Neg["class"] ? ((tmp0) => tmp0 instanceof Neg["class"] ? ((d) => self.eval(d))(tmp0.expr) : super.eval(e))(e.expr) : super.eval(e);
//│         })());
//│       }
//│     });
//│   }
//│ };
//│ globalThis.EvalNegNeg = typing_unit4.EvalNegNeg;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:266
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let typing_unit4 = {
//│ │ │     cache: {},
//│ │ │     EvalNegNeg(base) {
//│ │ │       return (class EvalNegNeg extends base {
//│ │ │         constructor(...rest) {
//│ │ │           super(...rest);
//│ │ │         }
//│ │ │         eval(e) {
//│ │ │           const self = this;
//│ │ │           return ((() => {
//│ │ │             return e instanceof Neg["class"] ? ((tmp0) => tmp0 instanceof Neg["class"] ? ((d) => self.eval(d))(tmp0.expr) : super.eval(e))(e.expr) : super.eval(e);
//│ │ │           })());
//│ │ │         }
//│ │ │       });
//│ │ │     }
//│ │ │   };
//│ │ │   globalThis.EvalNegNeg = typing_unit4.EvalNegNeg;
//│ │ └── Reply
//│ │     [Function: EvalNegNeg]
//│ └── No queries

:js
:ShowRepl
module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ module TestLang() {
//│   fun eval: 'A -> int
//│ }
//│ where
//│   'A <: Add['A] | Lit | Neg['A & (~#Neg | Neg['A])]
//│ // Prelude
//│ let typing_unit5 = {
//│   cache: {},
//│   get TestLang() {
//│     if (this.cache.TestLang === undefined) {
//│       class TestLang extends EvalNegNeg(EvalNeg(EvalBase(Object))) {
//│         constructor() {
//│           super();
//│         }
//│       }
//│       this.cache.TestLang = new TestLang();
//│       this.cache.TestLang["class"] = TestLang;
//│     }
//│     return this.cache.TestLang;
//│   }
//│ };
//│ globalThis.TestLang = typing_unit5.TestLang;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:321
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let typing_unit5 = {
//│ │ │     cache: {},
//│ │ │     get TestLang() {
//│ │ │       if (this.cache.TestLang === undefined) {
//│ │ │         class TestLang extends EvalNegNeg(EvalNeg(EvalBase(Object))) {
//│ │ │           constructor() {
//│ │ │             super();
//│ │ │           }
//│ │ │         }
//│ │ │         this.cache.TestLang = new TestLang();
//│ │ │         this.cache.TestLang["class"] = TestLang;
//│ │ │       }
//│ │ │       return this.cache.TestLang;
//│ │ │     }
//│ │ │   };
//│ │ │   globalThis.TestLang = typing_unit5.TestLang;
//│ │ └── Reply
//│ │     TestLang { class: [Function: TestLang] }
//│ └── No queries

:js
:ShowRepl
fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
TestLang.eval(mk(0))
//│ fun mk: forall 'E. number -> 'E
//│ int
//│ where
//│   'E :> Add['E] | Lit | Neg['E]
//│ // Prelude
//│ let typing_unit6 = { cache: {} };
//│ // Query 1
//│ globalThis.mk = function mk(n) {
//│   return n == 0 === true ? Lit(0) : n == 1 === true ? Neg(mk(n)) : Add(mk(n), mk(n));
//│ };
//│ // Query 2
//│ res = TestLang.eval(mk(0));
//│ // End of generated code
//│ ┌ Block at Mixin.mls:370
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let typing_unit6 = { cache: {} };
//│ │ └── Reply
//│ │     undefined
//│ ├─┬ Query 1/2
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   globalThis.mk = function mk(n) {
//│ │ ├──     return n == 0 === true ? Lit(0) : n == 1 === true ? Neg(mk(n)) : Add(mk(n), mk(n));
//│ │ ├──   };
//│ │ ├── Intermediate: [Function: mk]
//│ │ └── Reply: [success] [Function: mk]
//│ └─┬ Query 2/2
//│   ├── Prelude: <empty>
//│   ├── Code:
//│   ├──   res = TestLang.eval(mk(0));
//│   ├── Intermediate: 0
//│   └── Reply: [success] 0
//│ res
//│     = [Function: mk]


class Foo(x: int)
//│ class Foo(x: int)


:e
class Bar(x: int, y: int) extends Foo(x + y)
//│ ╔══[ERROR] Class inheritance is not supported yet (use mixins)
//│ ║  l.417: 	class Bar(x: int, y: int) extends Foo(x + y)
//│ ╙──       	                                  ^^^^^^^^^^
//│ class Bar(x: int, y: int)


mixin AA(a: int) {
}
//│ mixin AA(a: int)

mixin BB {}
//│ mixin BB()


class C(x: int) extends BB
//│ class C(x: int)

class D(x: int) extends AA(x)
//│ class D(x: int)

class E(x: int) extends BB, AA(x)
//│ class E(x: int)

:js
mixin Fooo(x: int) { fun f = [x, this.x] }
//│ mixin Fooo(x: int) {
//│   this: {x: 'x}
//│   fun f: (int, 'x,)
//│ }
//│ // Prelude
//│ let typing_unit14 = {
//│   cache: {},
//│   Fooo(base) {
//│     return (class Fooo extends base {
//│       #x;
//│       get x() { return this.#x; }
//│       constructor(x, ...rest) {
//│         super(...rest);
//│         this.#x = x;
//│       }
//│       get f() {
//│         const x = this.#x;
//│         const self = this;
//│         return ([
//│           x,
//│           self.x
//│         ]);
//│       }
//│     });
//│   }
//│ };
//│ globalThis.Fooo = typing_unit14.Fooo;
//│ // End of generated code

:js
mixin Bazz(y: int)
//│ mixin Bazz(y: int)
//│ // Prelude
//│ let typing_unit15 = {
//│   cache: {},
//│   Bazz(base) {
//│     return (class Bazz extends base {
//│       #y;
//│       get y() { return this.#y; }
//│       constructor(y, ...rest) {
//│         super(...rest);
//│         this.#y = y;
//│       }
//│     });
//│   }
//│ };
//│ globalThis.Bazz = typing_unit15.Bazz;
//│ // End of generated code

:js
module Barr extends Fooo(0), Bazz(1)
//│ module Barr() {
//│   fun f: (int, 0,)
//│ }
//│ // Prelude
//│ let typing_unit16 = {
//│   cache: {},
//│   get Barr() {
//│     if (this.cache.Barr === undefined) {
//│       class Barr extends Bazz(Fooo(Object)) {
//│         constructor() {
//│           super(1, 0);
//│         }
//│       }
//│       this.cache.Barr = new Barr();
//│       this.cache.Barr["class"] = Barr;
//│     }
//│     return this.cache.Barr;
//│   }
//│ };
//│ globalThis.Barr = typing_unit16.Barr;
//│ // End of generated code

Barr.x
//│ 0
//│ res
//│     = 0

Barr.y
//│ 1
//│ res
//│     = 1

:e
:ge
mixin Base {
  fun x = y
}
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.529: 	  fun x = y
//│ ╙──       	          ^
//│ mixin Base() {
//│   fun x: error
//│ }
//│ Code generation encountered an error:
//│   unresolved symbol y


:re
module Test extends Base
//│ module Test() {
//│   fun x: error
//│ }
//│ Runtime error:
//│   ReferenceError: Base is not defined


mixin MA(a: int)
mixin MB(b1: int, b2: int)
mixin MC(c: int)
//│ mixin MA(a: int)
//│ mixin MB(b1: int, b2: int)
//│ mixin MC(c: int)

:js
module MM extends MA(1), MB(2, 3), MC(4)
//│ module MM()
//│ // Prelude
//│ let typing_unit22 = {
//│   cache: {},
//│   get MM() {
//│     if (this.cache.MM === undefined) {
//│       class MM extends MC(MB(MA(Object))) {
//│         constructor() {
//│           super(4, 2, 3, 1);
//│         }
//│       }
//│       this.cache.MM = new MM();
//│       this.cache.MM["class"] = MM;
//│     }
//│     return this.cache.MM;
//│   }
//│ };
//│ globalThis.MM = typing_unit22.MM;
//│ // End of generated code

MM.a
MM.b1
MM.b2
MM.c
//│ 4
//│ res
//│     = 1
//│ res
//│     = 2
//│ res
//│     = 3
//│ res
//│     = 4

