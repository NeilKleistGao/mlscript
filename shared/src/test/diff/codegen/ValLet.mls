:NewDefs

:js
class A(x0: Int) {
  let x1 = x0 + 1
  log([x1])
  let x2 = x1 + 1
  log([x1, x2])
  val x3 = x2 + 1
}
//│ class A(x0: Int) {
//│   let x1: Int
//│   let x2: Int
//│   let x3: Int
//│ }
//│ // Prelude
//│ function log(x) {
//│   return console.info(x);
//│ }
//│ let res;
//│ class TypingUnit {
//│   #A;
//│   constructor() {
//│   }
//│   get A() {
//│     const outer = this;
//│     if (this.#A === undefined) {
//│       class A {
//│         #x0;
//│         get x0() { return this.#x0; }
//│         #x3;
//│         get x3() { return this.#x3; }
//│         static $unapply(self) { return [self.#x0, ] }
//│         constructor(x0) {
//│           this.#x0 = x0;
//│           const x1 = x0 + 1;
//│           log([x1]);
//│           const x2 = x1 + 1;
//│           log([
//│             x1,
//│             x2
//│           ]);
//│           this.#x3 = x2 + 1;
//│           const x3 = this.#x3;
//│         }
//│       };
//│       this.#A = ((x0) => Object.freeze(new A(x0)));
//│       this.#A.class = A;
//│     }
//│     return this.#A;
//│   }
//│ }
//│ const typing_unit = new TypingUnit;
//│ globalThis.A = typing_unit.A;
//│ // End of generated code

// FIXME: should be rejected
A(0).x1
//│ Int
//│ res
//│     = undefined
//│ // Output
//│ [ 1 ]
//│ [ 1, 2 ]

A(1).x3
//│ Int
//│ res
//│     = 4
//│ // Output
//│ [ 2 ]
//│ [ 2, 3 ]

:js
class AA() {
  let x = 42
  let no = 0
  fun f(y: Int) = x + y
}
AA().f(0)
//│ class AA() {
//│   fun f: (y: Int,) -> Int
//│   let no: 0
//│   let x: 42
//│ }
//│ Int
//│ // Prelude
//│ class TypingUnit3 {
//│   #AA;
//│   constructor() {
//│   }
//│   get AA() {
//│     const outer = this;
//│     if (this.#AA === undefined) {
//│       class AA {
//│         #x;
//│         static $unapply(self) { return [] }
//│         constructor() {
//│           this.#x = 42;
//│           const x = this.#x;
//│           const no = 0;
//│         }
//│         f(y) {
//│           const self = this;
//│           return self.#x + y;
//│         }
//│       };
//│       this.#AA = (() => Object.freeze(new AA()));
//│       this.#AA.class = AA;
//│     }
//│     return this.#AA;
//│   }
//│ }
//│ const typing_unit3 = new TypingUnit3;
//│ globalThis.AA = typing_unit3.AA;
//│ // Query 1
//│ res = AA().f(0);
//│ // End of generated code
//│ res
//│     = 42

class B(x: Int, val y: Int)
//│ class B(x: Int, y: Int)

// FIXME: should be rejected
B(0, 0).x
//│ Int
//│ res
//│     = 0

B(0, 0).y
//│ Int
//│ res
//│     = 0

// TODO: shoud be rejected?
fun f(val x: Int) = x + 1
//│ fun f: (x: Int,) -> Int
