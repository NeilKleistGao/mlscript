

def foo1: (int -> int & string -> string)
//│ foo1: (int | string) -> 'a
//│     = <missing implementation>

def foo: (int -> int & string -> string) -> ()
//│ foo: ((int | string) -> 'a) -> ()
//│    = <missing implementation>

fooImpl f = f 1
//│ fooImpl: (1 -> 'a) -> 'a
//│        = [Function: fooImpl]

foo = fooImpl
//│ (1 -> 'a) -> 'a
//│   <:  foo:
//│ ((int | string) -> 'a) -> ()
//│    = [Function: fooImpl]

:e
foo id
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.22: 	foo id
//│ ║        	^^^^^^
//│ ╟── type `int` does not match type `string`
//│ ║  l.7: 	def foo: (int -> int & string -> string) -> ()
//│ ║       	          ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.7: 	def foo: (int -> int & string -> string) -> ()
//│ ╙──     	                                 ^^^^^^
//│ res: () | error
//│    = 1

fooImpl id
//│ res: 1
//│    = 1


fooImpl2 (f: int -> int & string -> string) = f 1
//│ fooImpl2: ((int | string) -> 'a) -> 'a
//│         = [Function: fooImpl2]

:e
fooImpl2 id
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.45: 	fooImpl2 id
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `string`
//│ ║  l.40: 	fooImpl2 (f: int -> int & string -> string) = f 1
//│ ║        	             ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.40: 	fooImpl2 (f: int -> int & string -> string) = f 1
//│ ╙──      	                                    ^^^^^^
//│ res: error | 'a
//│    = 1

:re
res "oops"
//│ res: error
//│ Runtime error:
//│   TypeError: res is not a function

