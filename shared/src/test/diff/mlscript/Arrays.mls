:ShowRelativeLineNums
:NoJS

class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ Defined class MyArray

dummy = MyArray {
    size = 0;
    set = fun (i, a) -> ();
    get = fun i -> error
  }
//│ dummy: MyArray['A] with {get: anything -> nothing, set: (anything, anything,) -> (), size: 0}

dummy: MyArray[int]
//│ res: MyArray[int]

def ty1A: MyArray[int]
def ty1B: MyArray[0 | 1]
//│ ty1A: MyArray[int]
//│ ty1B: MyArray[0 | 1]


def ty2A: MyArray['a]
//│ ty2A: MyArray['a]

:stats
ty2A = ty2A
//│ MyArray['a]
//│   <:  ty2A:
//│ MyArray['a]
//│ constrain calls  : 22
//│ annoying  calls  : 20
//│ subtyping calls  : 33

def ty2B: MyArray[MyArray['a]]
//│ ty2B: MyArray[MyArray['a]]

:stats
ty2B = ty2A
//│ MyArray['a]
//│   <:  ty2B:
//│ MyArray[MyArray['a]]
//│ constrain calls  : 20
//│ annoying  calls  : 20
//│ subtyping calls  : 32

:ds
def ty3A: MyArray['a] as 'a
//│ Typed as: 'a0'
//│  where: 
//│ 		'a0' :> MyArray['a0'] <: MyArray['a0']
//│ Pols TreeMap('a0' -> None)
//│ Renewed 'a0' ~> 'a1'
//│ Cleaned up: 'a1'
//│  where: 
//│ 		'a1' :> MyArray['a1'] <: MyArray['a1']
//│ ty[+] 'a1'
//│ | isBadlyRecursive('a1') = Some(None) Some(None)
//│ | 'a1' is badly recursive...
//│ | Renewed 'a1' ~> 'a2'
//│ | ty[+] MyArray['a1']
//│ | -> Right(DNF({}∧MyArray['a1']))
//│ | DNF[+] DNF({}∧MyArray['a1'])
//│ | ~> MyArray['a2']
//│ | ty[-] MyArray['a1']
//│ | -> Right(DNF({}∧MyArray['a1']))
//│ | DNF[-] DNF({}∧MyArray['a1'])
//│ | ~> MyArray['a2']
//│ -> Right(DNF('a1'))
//│ DNF[+] DNF('a1')
//│ ~> 'a2'
//│ Canon: 'a2'
//│  where: 
//│ 		'a2' :> MyArray['a2'] <: MyArray['a2']
//│ analyze[+] 'a2'
//│ | go 'a2'   ()
//│ | | go MyArray['a2']   ('a2')
//│ | | | analyze[+] MyArray['a2']
//│ | | | | analyze[+] 'a2'
//│ | | | | analyze[-] 'a2'
//│ | | | | | go 'a2'   ()
//│ | | | | | | go MyArray['a2']   ('a2')
//│ | | | | | | | analyze[-] MyArray['a2']
//│ | | | | | | | | analyze[+] 'a2'
//│ | | | | | | | | analyze[-] 'a2'
//│ | | | | | >>>> 'a2' HashSet('a2', MyArray['a2']) None
//│ | >>>> 'a2' HashSet('a2', MyArray['a2']) None
//│ [occs] -'a2' {'a2',MyArray['a2']} ; +'a2' {'a2',MyArray['a2']}
//│ isBadlyRecursive('a2') = Some(None) Some(None)
//│ [vars] TreeSet('a2')
//│ [bounds] 
//│ 		'a2' :> MyArray['a2'] <: MyArray['a2']
//│ [rec] HashSet('a2')
//│ [v] 'a2' Some(HashSet('a2', MyArray['a2'])) Some(HashSet('a2', MyArray['a2']))
//│ [sub] 
//│ Renewed 'a2' ~> 'a3'
//│ Type after simplification: 'a3'
//│  where: 
//│ 		'a3' :> MyArray['a3'] <: MyArray['a3']
//│ recons[+] 'a3'  (TypeVariable)
//│ | recons[+] MyArray['a3']  (TypeRef)
//│ | | recons[=] 'a3'  (TypeVariable)
//│ | | => 'a4'
//│ | => MyArray['a4']
//│ | recons[-] MyArray['a3']  (TypeRef)
//│ | | recons[=] 'a3'  (TypeVariable)
//│ | | => 'a4'
//│ | => MyArray['a4']
//│ => 'a4'
//│ Recons: 'a4'
//│  where: 
//│ 		'a4' :> MyArray['a4'] <: MyArray['a4']
//│ allVarPols: ='a4'
//│ expand[+] 'a4'
//│ | isBadlyRecursive('a4') = Some(None) Some(None)
//│ | expand[+] MyArray['a4']
//│ | | expand[-] 'a4'
//│ | | => α4
//│ | | expand[+] 'a4'
//│ | | => α4
//│ | => AppliedType(TypeName(MyArray),List(α4))
//│ | expand[-] MyArray['a4']
//│ | | expand[-] 'a4'
//│ | | => α4
//│ | | expand[+] 'a4'
//│ | | => α4
//│ | => AppliedType(TypeName(MyArray),List(α4))
//│ => Recursive(α4,AppliedType(TypeName(MyArray),List(α4)))
//│ ty3A: MyArray['a] as 'a

:stats
ty3A = ty3A
//│ MyArray['a] as 'a
//│   <:  ty3A:
//│ MyArray['a] as 'a
//│ constrain calls  : 50
//│ annoying  calls  : 44
//│ subtyping calls  : 55

def ty3B: MyArray[MyArray['a]] as 'a
//│ ty3B: MyArray[MyArray['a]] as 'a

:stats
ty3B = ty3A
//│ MyArray['a] as 'a
//│   <:  ty3B:
//│ MyArray[MyArray['a]] as 'a
//│ constrain calls  : 142
//│ annoying  calls  : 127
//│ subtyping calls  : 201

:stats
ty3A = ty3B
//│ MyArray[MyArray['a]] as 'a
//│   <:  ty3A:
//│ MyArray['a] as 'a
//│ constrain calls  : 137
//│ annoying  calls  : 127
//│ subtyping calls  : 187

def ty4B: MyArray[MyArray[MyArray['a]]] as 'a
//│ ty4B: MyArray[MyArray[MyArray['a]]] as 'a

:stats
ty4B = ty4B
//│ MyArray[MyArray[MyArray['a]]] as 'a
//│   <:  ty4B:
//│ MyArray[MyArray[MyArray['a]]] as 'a
//│ constrain calls  : 116
//│ annoying  calls  : 136
//│ subtyping calls  : 150



//===//===//===// ERRORS //===//===//===//


:e
:stats
ty1A = ty1B
//│ MyArray[0 | 1]
//│   <:  ty1A:
//│ MyArray[int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty1A = ty1B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `0 | 1`
//│ ║  l.17: 	def ty1A: MyArray[int]
//│ ║        	                  ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.18: 	def ty1B: MyArray[0 | 1]
//│ ╙──      	                  ^^^^^
//│ constrain calls  : 24
//│ annoying  calls  : 29
//│ subtyping calls  : 45

:e
:stats
ty1B = ty1A
//│ MyArray[int]
//│   <:  ty1B:
//│ MyArray[0 | 1]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty1B = ty1A
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `0 | 1`
//│ ║  l.17: 	def ty1A: MyArray[int]
//│ ║        	                  ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.18: 	def ty1B: MyArray[0 | 1]
//│ ╙──      	                  ^^^^^
//│ constrain calls  : 24
//│ annoying  calls  : 29
//│ subtyping calls  : 50


:e
:stats
ty2A = ty2B
//│ MyArray[MyArray['a]]
//│   <:  ty2A:
//│ MyArray['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `'a` is not an instance of type MyArray
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `'a` is not a record (expected a record with fields: size, set, get)
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.4: 	class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `'a` does not have field 'MyArray#A'
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `MyArray[?a]` is not an instance of type 'a
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ║        	                  ^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ╙──      	                  ^^
//│ constrain calls  : 29
//│ annoying  calls  : 28
//│ subtyping calls  : 48


